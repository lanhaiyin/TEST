// Targeted by JavaCPP version 1.4.2: DO NOT EDIT THIS FILE

package vrv.imsdk.api;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class VimService extends vrv.imsdk.api.VimCallBack {
    static { Loader.load(); }

@Name("std::map<int64,model::SimpleSearchInfo>") public static class LongSearchMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongSearchMap(Pointer p) { super(p); }
    public LongSearchMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongSearchMap put(@ByRef LongSearchMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef SimpleSearchInfo get(long i);
    public native LongSearchMap put(long i, SimpleSearchInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter long first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const SimpleSearchInfo second();
    }
}

@Name("std::map<std::string,std::string>") public static class MapStr2 extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapStr2(Pointer p) { super(p); }
    public MapStr2()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef MapStr2 put(@ByRef MapStr2 x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index/*(function = "at")*/ public native @StdString  String get(@StdString  String i);
    public native MapStr2 put(@StdString  String i, String value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString  String first();
        public native @Name("operator*().second") @MemberGetter @StdString  String second();
    }
}

@Name("std::map<std::string,std::vector<model::OrgUserinfo> >") public static class StrVectorMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StrVectorMap(Pointer p) { super(p); }
    public StrVectorMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef StrVectorMap put(@ByRef StrVectorMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef OrgVector get(@StdString  String i);
    public native StrVectorMap put(@StdString  String i, OrgVector value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString  String first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const OrgVector second();
    }
}

@Name("std::map<std::string,std::vector<EntpriseUserInfo> >") public static class StrEntpriseUserInfoVectorMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StrEntpriseUserInfoVectorMap(Pointer p) { super(p); }
    public StrEntpriseUserInfoVectorMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef StrEntpriseUserInfoVectorMap put(@ByRef StrEntpriseUserInfoVectorMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef EntpriseUserInfoVector get(@StdString  String i);
    public native StrEntpriseUserInfoVectorMap put(@StdString  String i, EntpriseUserInfoVector value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString  String first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const EntpriseUserInfoVector second();
    }
}

@Name("std::map<int64,std::vector<PersonalDataSwitch> >") public static class LongPersonalDataSwitchVectorMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongPersonalDataSwitchVectorMap(Pointer p) { super(p); }
    public LongPersonalDataSwitchVectorMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongPersonalDataSwitchVectorMap put(@ByRef LongPersonalDataSwitchVectorMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef PersonalDataSwitchVector get(long i);
    public native LongPersonalDataSwitchVectorMap put(long i, PersonalDataSwitchVector value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter long first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const PersonalDataSwitchVector second();
    }
}

@Name("std::map<int64,Fileinfo>") public static class LongFileInfoMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongFileInfoMap(Pointer p) { super(p); }
    public LongFileInfoMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongFileInfoMap put(@ByRef LongFileInfoMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef Fileinfo get(long i);
    public native LongFileInfoMap put(long i, Fileinfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter long first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const Fileinfo second();
    }
}

@Name("std::map<std::string,std::vector<OrgUserinfo> >") public static class StrOrgVectorMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StrOrgVectorMap(Pointer p) { super(p); }
    public StrOrgVectorMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef StrOrgVectorMap put(@ByRef StrOrgVectorMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef OrgUserinfoVector get(@StdString  String i);
    public native StrOrgVectorMap put(@StdString  String i, OrgUserinfoVector value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString  String first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const OrgUserinfoVector second();
    }
}

@Name("std::map<std::string,int64>") public static class StrLongMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StrLongMap(Pointer p) { super(p); }
    public StrLongMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef StrLongMap put(@ByRef StrLongMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @Cast("int64") long get(@StdString  String i);
    public native StrLongMap put(@StdString  String i, long value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString  String first();
        public native @Name("operator*().second") @MemberGetter @Cast("int64") long second();
    }
}

@Name("std::map<int64,std::string>") public static class LongStrMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongStrMap(Pointer p) { super(p); }
    public LongStrMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongStrMap put(@ByRef LongStrMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @StdString  String get(long i);
    public native LongStrMap put(long i, String value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter long first();
        public native @Name("operator*().second") @MemberGetter @StdString  String second();
    }
}

@Name("std::map<int64,int>") public static class LongIntMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongIntMap(Pointer p) { super(p); }
    public LongIntMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongIntMap put(@ByRef LongIntMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @Cast("int") int get(long i);
    public native LongIntMap put(long i, int value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter long first();
        public native @Name("operator*().second") @MemberGetter @Cast("int") int second();
    }
}

@Name("std::map<std::string,std::vector<int64> >") public static class StrLongVectorMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StrLongVectorMap(Pointer p) { super(p); }
    public StrLongVectorMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef StrLongVectorMap put(@ByRef StrLongVectorMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef LongVector get(@StdString  String i);
    public native StrLongVectorMap put(@StdString  String i, LongVector value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString  String first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const LongVector second();
    }
}

@Name("std::map<std::string,int>") public static class StringIntMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringIntMap(Pointer p) { super(p); }
    public StringIntMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef StringIntMap put(@ByRef StringIntMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index/*(function = "at")*/ public native @Cast("int") int get(@StdString  String i);
    public native StringIntMap put(@StdString  String i, int value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString  String first();
        public native @Name("operator*().second") @MemberGetter @Cast("int") int second();
    }
}

@Name("std::map<int64,std::vector<LoginClientRecord> >") public static class LongLoginClientRecordVectorMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongLoginClientRecordVectorMap(Pointer p) { super(p); }
    public LongLoginClientRecordVectorMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongLoginClientRecordVectorMap put(@ByRef LongLoginClientRecordVectorMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef LoginClientRecordVector get(long i);
    public native LongLoginClientRecordVectorMap put(long i, LoginClientRecordVector value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter long first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const LoginClientRecordVector second();
    }
}

@Name("std::map<int64,std::vector<int64> >") public static class LongVectorLongMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongVectorLongMap(Pointer p) { super(p); }
    public LongVectorLongMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongVectorLongMap put(@ByRef LongVectorLongMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef LongVector get(long i);
    public native LongVectorLongMap put(long i, LongVector value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter long first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const LongVector second();
    }
}

@Name("std::map<int64,model::SmallMarketAppInfo>") public static class LongSmallMarketAppInfoMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongSmallMarketAppInfoMap(Pointer p) { super(p); }
    public LongSmallMarketAppInfoMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongSmallMarketAppInfoMap put(@ByRef LongSmallMarketAppInfoMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef SmallMarketAppInfo get(long i);
    public native LongSmallMarketAppInfoMap put(long i, SmallMarketAppInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter long first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const SmallMarketAppInfo second();
    }
}

@Name("std::map<int8,std::map<int64,model::SmallMarketAppInfo> >") public static class ByteLongSmallMarketAppInfoMapMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ByteLongSmallMarketAppInfoMapMap(Pointer p) { super(p); }
    public ByteLongSmallMarketAppInfoMapMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef ByteLongSmallMarketAppInfoMapMap put(@ByRef ByteLongSmallMarketAppInfoMapMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "at") public native @ByRef LongSmallMarketAppInfoMap get(byte i);
    public native ByteLongSmallMarketAppInfoMapMap put(byte i, LongSmallMarketAppInfoMap value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter byte first();
        public native @Name("operator*().second") @MemberGetter @ByRef @Const LongSmallMarketAppInfoMap second();
    }
}

@Name("std::vector<int64>") public static class LongVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongVector(Pointer p) { super(p); }
    public LongVector(long ... array) { this(array.length); put(array); }
    public LongVector()       { allocate();  }
    public LongVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef LongVector put(@ByRef LongVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @Cast("int64") long get(@Cast("size_t") long i);
    public native LongVector put(@Cast("size_t") long i, long value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Cast("int64") long get();
    }

    public long[] get() {
        long[] array = new long[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public long pop_back() {
        long size = size();
        long value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public LongVector push_back(long value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public LongVector put(long value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public LongVector put(long ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<EmoticonResult>") public static class EmoticonResultVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmoticonResultVector(Pointer p) { super(p); }
    public EmoticonResultVector(EmoticonResult value) { this(1); put(0, value); }
    public EmoticonResultVector(EmoticonResult ... array) { this(array.length); put(array); }
    public EmoticonResultVector()       { allocate();  }
    public EmoticonResultVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef EmoticonResultVector put(@ByRef EmoticonResultVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef EmoticonResult get(@Cast("size_t") long i);
    public native EmoticonResultVector put(@Cast("size_t") long i, EmoticonResult value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const EmoticonResult get();
    }

    public EmoticonResult[] get() {
        EmoticonResult[] array = new EmoticonResult[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public EmoticonResult pop_back() {
        long size = size();
        EmoticonResult value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public EmoticonResultVector push_back(EmoticonResult value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public EmoticonResultVector put(EmoticonResult value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public EmoticonResultVector put(EmoticonResult ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<int32>") public static class IntegerVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IntegerVector(Pointer p) { super(p); }
    public IntegerVector(int ... array) { this(array.length); put(array); }
    public IntegerVector()       { allocate();  }
    public IntegerVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef IntegerVector put(@ByRef IntegerVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @Cast("int32") int get(@Cast("size_t") long i);
    public native IntegerVector put(@Cast("size_t") long i, int value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Cast("int32") int get();
    }

    public int[] get() {
        int[] array = new int[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public int pop_back() {
        long size = size();
        int value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public IntegerVector push_back(int value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public IntegerVector put(int value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public IntegerVector put(int ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::YMD>") public static class ymdVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ymdVector(Pointer p) { super(p); }
    public ymdVector(YMD value) { this(1); put(0, value); }
    public ymdVector(YMD ... array) { this(array.length); put(array); }
    public ymdVector()       { allocate();  }
    public ymdVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef ymdVector put(@ByRef ymdVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef YMD get(@Cast("size_t") long i);
    public native ymdVector put(@Cast("size_t") long i, YMD value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const YMD get();
    }

    public YMD[] get() {
        YMD[] array = new YMD[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public YMD pop_back() {
        long size = size();
        YMD value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public ymdVector push_back(YMD value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public ymdVector put(YMD value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public ymdVector put(YMD ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<int16>") public static class FloatVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatVector(Pointer p) { super(p); }
    public FloatVector(int ... array) { this(array.length); put(array); }
    public FloatVector()       { allocate();  }
    public FloatVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FloatVector put(@ByRef FloatVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @Cast("int16") int get(@Cast("size_t") long i);
    public native FloatVector put(@Cast("size_t") long i, int value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Cast("int16") int get();
    }

    public int[] get() {
        int[] array = new int[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public int pop_back() {
        long size = size();
        int value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FloatVector push_back(int value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FloatVector put(int value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FloatVector put(int ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<std::string>") public static class StringVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringVector(Pointer p) { super(p); }
    public StringVector(String value) { this(1); put(0, value); }
    public StringVector(String ... array) { this(array.length); put(array); }
    public StringVector()       { allocate();  }
    public StringVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef StringVector put(@ByRef StringVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @StdString  String get(@Cast("size_t") long i);
    public native StringVector put(@Cast("size_t") long i, String value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @StdString  String get();
    }

    public String[] get() {
        String[] array = new String[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public String pop_back() {
        long size = size();
        String value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public StringVector push_back(String value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public StringVector put(String value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public StringVector put(String ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SSharedPtr<TinyGroup> >") public static class TinyGroupSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TinyGroupSharedVector(Pointer p) { super(p); }
    public TinyGroupSharedVector(TinyGroup value) { this(1); put(0, value); }
    public TinyGroupSharedVector(TinyGroup ... array) { this(array.length); put(array); }
    public TinyGroupSharedVector()       { allocate();  }
    public TinyGroupSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef TinyGroupSharedVector put(@ByRef TinyGroupSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr TinyGroup get(@Cast("size_t") long i);
    public native TinyGroupSharedVector put(@Cast("size_t") long i, TinyGroup value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const TinyGroup get();
    }

    public TinyGroup[] get() {
        TinyGroup[] array = new TinyGroup[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public TinyGroup pop_back() {
        long size = size();
        TinyGroup value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public TinyGroupSharedVector push_back(TinyGroup value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public TinyGroupSharedVector put(TinyGroup value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public TinyGroupSharedVector put(TinyGroup ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SSharedPtr<Chat> >") public static class ChatSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ChatSharedVector(Pointer p) { super(p); }
    public ChatSharedVector(Chat value) { this(1); put(0, value); }
    public ChatSharedVector(Chat ... array) { this(array.length); put(array); }
    public ChatSharedVector()       { allocate();  }
    public ChatSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef ChatSharedVector put(@ByRef ChatSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr Chat get(@Cast("size_t") long i);
    public native ChatSharedVector put(@Cast("size_t") long i, Chat value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const Chat get();
    }

    public Chat[] get() {
        Chat[] array = new Chat[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Chat pop_back() {
        long size = size();
        Chat value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public ChatSharedVector push_back(Chat value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public ChatSharedVector put(Chat value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public ChatSharedVector put(Chat ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SSharedPtr<Contact> >") public static class ContactSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ContactSharedVector(Pointer p) { super(p); }
    public ContactSharedVector(Contact value) { this(1); put(0, value); }
    public ContactSharedVector(Contact ... array) { this(array.length); put(array); }
    public ContactSharedVector()       { allocate();  }
    public ContactSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef ContactSharedVector put(@ByRef ContactSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr Contact get(@Cast("size_t") long i);
    public native ContactSharedVector put(@Cast("size_t") long i, Contact value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const Contact get();
    }

    public Contact[] get() {
        Contact[] array = new Contact[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Contact pop_back() {
        long size = size();
        Contact value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public ContactSharedVector push_back(Contact value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public ContactSharedVector put(Contact value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public ContactSharedVector put(Contact ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SSharedPtr<model::Msg> >") public static class MsgPtrVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgPtrVector(Pointer p) { super(p); }
    public MsgPtrVector(Msg value) { this(1); put(0, value); }
    public MsgPtrVector(Msg ... array) { this(array.length); put(array); }
    public MsgPtrVector()       { allocate();  }
    public MsgPtrVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgPtrVector put(@ByRef MsgPtrVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr Msg get(@Cast("size_t") long i);
    public native MsgPtrVector put(@Cast("size_t") long i, Msg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const Msg get();
    }

    public Msg[] get() {
        Msg[] array = new Msg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Msg pop_back() {
        long size = size();
        Msg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgPtrVector push_back(Msg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgPtrVector put(Msg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgPtrVector put(Msg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SSharedPtr<model::MsgText> >") public static class MsgTextPtrVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgTextPtrVector(Pointer p) { super(p); }
    public MsgTextPtrVector(MsgText value) { this(1); put(0, value); }
    public MsgTextPtrVector(MsgText ... array) { this(array.length); put(array); }
    public MsgTextPtrVector()       { allocate();  }
    public MsgTextPtrVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgTextPtrVector put(@ByRef MsgTextPtrVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr MsgText get(@Cast("size_t") long i);
    public native MsgTextPtrVector put(@Cast("size_t") long i, MsgText value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const MsgText get();
    }

    public MsgText[] get() {
        MsgText[] array = new MsgText[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgText pop_back() {
        long size = size();
        MsgText value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgTextPtrVector push_back(MsgText value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgTextPtrVector put(MsgText value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgTextPtrVector put(MsgText ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SSharedPtr<model::MsgImg> >") public static class MsgImgPtrVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgImgPtrVector(Pointer p) { super(p); }
    public MsgImgPtrVector(MsgImg value) { this(1); put(0, value); }
    public MsgImgPtrVector(MsgImg ... array) { this(array.length); put(array); }
    public MsgImgPtrVector()       { allocate();  }
    public MsgImgPtrVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgImgPtrVector put(@ByRef MsgImgPtrVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr MsgImg get(@Cast("size_t") long i);
    public native MsgImgPtrVector put(@Cast("size_t") long i, MsgImg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const MsgImg get();
    }

    public MsgImg[] get() {
        MsgImg[] array = new MsgImg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgImg pop_back() {
        long size = size();
        MsgImg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgImgPtrVector push_back(MsgImg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgImgPtrVector put(MsgImg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgImgPtrVector put(MsgImg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::OrgUserinfo>") public static class OrgVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrgVector(Pointer p) { super(p); }
    public OrgVector(OrgUserinfo value) { this(1); put(0, value); }
    public OrgVector(OrgUserinfo ... array) { this(array.length); put(array); }
    public OrgVector()       { allocate();  }
    public OrgVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef OrgVector put(@ByRef OrgVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef OrgUserinfo get(@Cast("size_t") long i);
    public native OrgVector put(@Cast("size_t") long i, OrgUserinfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const OrgUserinfo get();
    }

    public OrgUserinfo[] get() {
        OrgUserinfo[] array = new OrgUserinfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public OrgUserinfo pop_back() {
        long size = size();
        OrgUserinfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public OrgVector push_back(OrgUserinfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public OrgVector put(OrgUserinfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public OrgVector put(OrgUserinfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<Contact>") public static class ContactVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ContactVector(Pointer p) { super(p); }
    public ContactVector(Contact value) { this(1); put(0, value); }
    public ContactVector(Contact ... array) { this(array.length); put(array); }
    public ContactVector()       { allocate();  }
    public ContactVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef ContactVector put(@ByRef ContactVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Contact get(@Cast("size_t") long i);
    public native ContactVector put(@Cast("size_t") long i, Contact value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Contact get();
    }

    public Contact[] get() {
        Contact[] array = new Contact[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Contact pop_back() {
        long size = size();
        Contact value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public ContactVector push_back(Contact value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public ContactVector put(Contact value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public ContactVector put(Contact ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<st_dbBadWord>") public static class st_dbBadWordVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public st_dbBadWordVector(Pointer p) { super(p); }
    public st_dbBadWordVector(st_dbBadWord value) { this(1); put(0, value); }
    public st_dbBadWordVector(st_dbBadWord ... array) { this(array.length); put(array); }
    public st_dbBadWordVector()       { allocate();  }
    public st_dbBadWordVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef st_dbBadWordVector put(@ByRef st_dbBadWordVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef st_dbBadWord get(@Cast("size_t") long i);
    public native st_dbBadWordVector put(@Cast("size_t") long i, st_dbBadWord value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const st_dbBadWord get();
    }

    public st_dbBadWord[] get() {
        st_dbBadWord[] array = new st_dbBadWord[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public st_dbBadWord pop_back() {
        long size = size();
        st_dbBadWord value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public st_dbBadWordVector push_back(st_dbBadWord value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public st_dbBadWordVector put(st_dbBadWord value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public st_dbBadWordVector put(st_dbBadWord ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<st_dbBWLib>") public static class st_dbBWLibVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public st_dbBWLibVector(Pointer p) { super(p); }
    public st_dbBWLibVector(st_dbBWLib value) { this(1); put(0, value); }
    public st_dbBWLibVector(st_dbBWLib ... array) { this(array.length); put(array); }
    public st_dbBWLibVector()       { allocate();  }
    public st_dbBWLibVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef st_dbBWLibVector put(@ByRef st_dbBWLibVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef st_dbBWLib get(@Cast("size_t") long i);
    public native st_dbBWLibVector put(@Cast("size_t") long i, st_dbBWLib value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const st_dbBWLib get();
    }

    public st_dbBWLib[] get() {
        st_dbBWLib[] array = new st_dbBWLib[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public st_dbBWLib pop_back() {
        long size = size();
        st_dbBWLib value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public st_dbBWLibVector push_back(st_dbBWLib value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public st_dbBWLibVector put(st_dbBWLib value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public st_dbBWLibVector put(st_dbBWLib ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<EnterpriseDictionary>") public static class EntDictVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EntDictVector(Pointer p) { super(p); }
    public EntDictVector(EnterpriseDictionary value) { this(1); put(0, value); }
    public EntDictVector(EnterpriseDictionary ... array) { this(array.length); put(array); }
    public EntDictVector()       { allocate();  }
    public EntDictVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef EntDictVector put(@ByRef EntDictVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef EnterpriseDictionary get(@Cast("size_t") long i);
    public native EntDictVector put(@Cast("size_t") long i, EnterpriseDictionary value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const EnterpriseDictionary get();
    }

    public EnterpriseDictionary[] get() {
        EnterpriseDictionary[] array = new EnterpriseDictionary[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public EnterpriseDictionary pop_back() {
        long size = size();
        EnterpriseDictionary value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public EntDictVector push_back(EnterpriseDictionary value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public EntDictVector put(EnterpriseDictionary value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public EntDictVector put(EnterpriseDictionary ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<OnlineState>") public static class OnlineStateVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OnlineStateVector(Pointer p) { super(p); }
    public OnlineStateVector(OnlineState value) { this(1); put(0, value); }
    public OnlineStateVector(OnlineState ... array) { this(array.length); put(array); }
    public OnlineStateVector()       { allocate();  }
    public OnlineStateVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef OnlineStateVector put(@ByRef OnlineStateVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef OnlineState get(@Cast("size_t") long i);
    public native OnlineStateVector put(@Cast("size_t") long i, OnlineState value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const OnlineState get();
    }

    public OnlineState[] get() {
        OnlineState[] array = new OnlineState[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public OnlineState pop_back() {
        long size = size();
        OnlineState value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public OnlineStateVector push_back(OnlineState value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public OnlineStateVector put(OnlineState value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public OnlineStateVector put(OnlineState ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<Fileinfo>") public static class FileInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileInfoVector(Pointer p) { super(p); }
    public FileInfoVector(Fileinfo value) { this(1); put(0, value); }
    public FileInfoVector(Fileinfo ... array) { this(array.length); put(array); }
    public FileInfoVector()       { allocate();  }
    public FileInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FileInfoVector put(@ByRef FileInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Fileinfo get(@Cast("size_t") long i);
    public native FileInfoVector put(@Cast("size_t") long i, Fileinfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Fileinfo get();
    }

    public Fileinfo[] get() {
        Fileinfo[] array = new Fileinfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Fileinfo pop_back() {
        long size = size();
        Fileinfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FileInfoVector push_back(Fileinfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FileInfoVector put(Fileinfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FileInfoVector put(Fileinfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SSharedPtr<Member> >") public static class MemberSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MemberSharedVector(Pointer p) { super(p); }
    public MemberSharedVector(Member value) { this(1); put(0, value); }
    public MemberSharedVector(Member ... array) { this(array.length); put(array); }
    public MemberSharedVector()       { allocate();  }
    public MemberSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MemberSharedVector put(@ByRef MemberSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr Member get(@Cast("size_t") long i);
    public native MemberSharedVector put(@Cast("size_t") long i, Member value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const Member get();
    }

    public Member[] get() {
        Member[] array = new Member[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Member pop_back() {
        long size = size();
        Member value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MemberSharedVector push_back(Member value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MemberSharedVector put(Member value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MemberSharedVector put(Member ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<Member>") public static class MemberVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MemberVector(Pointer p) { super(p); }
    public MemberVector(Member value) { this(1); put(0, value); }
    public MemberVector(Member ... array) { this(array.length); put(array); }
    public MemberVector()       { allocate();  }
    public MemberVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MemberVector put(@ByRef MemberVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Member get(@Cast("size_t") long i);
    public native MemberVector put(@Cast("size_t") long i, Member value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Member get();
    }

    public Member[] get() {
        Member[] array = new Member[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Member pop_back() {
        long size = size();
        Member value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MemberVector push_back(Member value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MemberVector put(Member value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MemberVector put(Member ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SysMsg>") public static class SysMsgVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SysMsgVector(Pointer p) { super(p); }
    public SysMsgVector(SysMsg value) { this(1); put(0, value); }
    public SysMsgVector(SysMsg ... array) { this(array.length); put(array); }
    public SysMsgVector()       { allocate();  }
    public SysMsgVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef SysMsgVector put(@ByRef SysMsgVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef SysMsg get(@Cast("size_t") long i);
    public native SysMsgVector put(@Cast("size_t") long i, SysMsg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const SysMsg get();
    }

    public SysMsg[] get() {
        SysMsg[] array = new SysMsg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public SysMsg pop_back() {
        long size = size();
        SysMsg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public SysMsgVector push_back(SysMsg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public SysMsgVector put(SysMsg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public SysMsgVector put(SysMsg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<room>") public static class RoomVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RoomVector(Pointer p) { super(p); }
    public RoomVector(room value) { this(1); put(0, value); }
    public RoomVector(room ... array) { this(array.length); put(array); }
    public RoomVector()       { allocate();  }
    public RoomVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef RoomVector put(@ByRef RoomVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef room get(@Cast("size_t") long i);
    public native RoomVector put(@Cast("size_t") long i, room value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const room get();
    }

    public room[] get() {
        room[] array = new room[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public room pop_back() {
        long size = size();
        room value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public RoomVector push_back(room value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public RoomVector put(room value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public RoomVector put(room ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<Task>") public static class TaskVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TaskVector(Pointer p) { super(p); }
    public TaskVector(Task value) { this(1); put(0, value); }
    public TaskVector(Task ... array) { this(array.length); put(array); }
    public TaskVector()       { allocate();  }
    public TaskVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef TaskVector put(@ByRef TaskVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Task get(@Cast("size_t") long i);
    public native TaskVector put(@Cast("size_t") long i, Task value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Task get();
    }

    public Task[] get() {
        Task[] array = new Task[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Task pop_back() {
        long size = size();
        Task value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public TaskVector push_back(Task value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public TaskVector put(Task value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public TaskVector put(Task ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<entpriseInfo>") public static class EntpriseInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EntpriseInfoVector(Pointer p) { super(p); }
    public EntpriseInfoVector(entpriseInfo value) { this(1); put(0, value); }
    public EntpriseInfoVector(entpriseInfo ... array) { this(array.length); put(array); }
    public EntpriseInfoVector()       { allocate();  }
    public EntpriseInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef EntpriseInfoVector put(@ByRef EntpriseInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef entpriseInfo get(@Cast("size_t") long i);
    public native EntpriseInfoVector put(@Cast("size_t") long i, entpriseInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const entpriseInfo get();
    }

    public entpriseInfo[] get() {
        entpriseInfo[] array = new entpriseInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public entpriseInfo pop_back() {
        long size = size();
        entpriseInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public EntpriseInfoVector push_back(entpriseInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public EntpriseInfoVector put(entpriseInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public EntpriseInfoVector put(entpriseInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<BaseNoteInfo>") public static class BaseNoteInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BaseNoteInfoVector(Pointer p) { super(p); }
    public BaseNoteInfoVector(BaseNoteInfo value) { this(1); put(0, value); }
    public BaseNoteInfoVector(BaseNoteInfo ... array) { this(array.length); put(array); }
    public BaseNoteInfoVector()       { allocate();  }
    public BaseNoteInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef BaseNoteInfoVector put(@ByRef BaseNoteInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef BaseNoteInfo get(@Cast("size_t") long i);
    public native BaseNoteInfoVector put(@Cast("size_t") long i, BaseNoteInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const BaseNoteInfo get();
    }

    public BaseNoteInfo[] get() {
        BaseNoteInfo[] array = new BaseNoteInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public BaseNoteInfo pop_back() {
        long size = size();
        BaseNoteInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public BaseNoteInfoVector push_back(BaseNoteInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public BaseNoteInfoVector put(BaseNoteInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public BaseNoteInfoVector put(BaseNoteInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::Msg>") public static class MsgVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgVector(Pointer p) { super(p); }
    public MsgVector(Msg value) { this(1); put(0, value); }
    public MsgVector(Msg ... array) { this(array.length); put(array); }
    public MsgVector()       { allocate();  }
    public MsgVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgVector put(@ByRef MsgVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Msg get(@Cast("size_t") long i);
    public native MsgVector put(@Cast("size_t") long i, Msg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Msg get();
    }

    public Msg[] get() {
        Msg[] array = new Msg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Msg pop_back() {
        long size = size();
        Msg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgVector push_back(Msg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgVector put(Msg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgVector put(Msg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgImg>") public static class MsgImgVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgImgVector(Pointer p) { super(p); }
    public MsgImgVector(MsgImg value) { this(1); put(0, value); }
    public MsgImgVector(MsgImg ... array) { this(array.length); put(array); }
    public MsgImgVector()       { allocate();  }
    public MsgImgVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgImgVector put(@ByRef MsgImgVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgImg get(@Cast("size_t") long i);
    public native MsgImgVector put(@Cast("size_t") long i, MsgImg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgImg get();
    }

    public MsgImg[] get() {
        MsgImg[] array = new MsgImg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgImg pop_back() {
        long size = size();
        MsgImg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgImgVector push_back(MsgImg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgImgVector put(MsgImg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgImgVector put(MsgImg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgText>") public static class MsgTextVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgTextVector(Pointer p) { super(p); }
    public MsgTextVector(MsgText value) { this(1); put(0, value); }
    public MsgTextVector(MsgText ... array) { this(array.length); put(array); }
    public MsgTextVector()       { allocate();  }
    public MsgTextVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgTextVector put(@ByRef MsgTextVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgText get(@Cast("size_t") long i);
    public native MsgTextVector put(@Cast("size_t") long i, MsgText value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgText get();
    }

    public MsgText[] get() {
        MsgText[] array = new MsgText[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgText pop_back() {
        long size = size();
        MsgText value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgTextVector push_back(MsgText value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgTextVector put(MsgText value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgTextVector put(MsgText ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgWeb>") public static class MsgWebVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgWebVector(Pointer p) { super(p); }
    public MsgWebVector(MsgWeb value) { this(1); put(0, value); }
    public MsgWebVector(MsgWeb ... array) { this(array.length); put(array); }
    public MsgWebVector()       { allocate();  }
    public MsgWebVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgWebVector put(@ByRef MsgWebVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgWeb get(@Cast("size_t") long i);
    public native MsgWebVector put(@Cast("size_t") long i, MsgWeb value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgWeb get();
    }

    public MsgWeb[] get() {
        MsgWeb[] array = new MsgWeb[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgWeb pop_back() {
        long size = size();
        MsgWeb value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgWebVector push_back(MsgWeb value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgWebVector put(MsgWeb value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgWebVector put(MsgWeb ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgAudio>") public static class MsgAudioVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgAudioVector(Pointer p) { super(p); }
    public MsgAudioVector(MsgAudio value) { this(1); put(0, value); }
    public MsgAudioVector(MsgAudio ... array) { this(array.length); put(array); }
    public MsgAudioVector()       { allocate();  }
    public MsgAudioVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgAudioVector put(@ByRef MsgAudioVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgAudio get(@Cast("size_t") long i);
    public native MsgAudioVector put(@Cast("size_t") long i, MsgAudio value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgAudio get();
    }

    public MsgAudio[] get() {
        MsgAudio[] array = new MsgAudio[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgAudio pop_back() {
        long size = size();
        MsgAudio value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgAudioVector push_back(MsgAudio value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgAudioVector put(MsgAudio value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgAudioVector put(MsgAudio ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgPosition>") public static class MsgPositionVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgPositionVector(Pointer p) { super(p); }
    public MsgPositionVector(MsgPosition value) { this(1); put(0, value); }
    public MsgPositionVector(MsgPosition ... array) { this(array.length); put(array); }
    public MsgPositionVector()       { allocate();  }
    public MsgPositionVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgPositionVector put(@ByRef MsgPositionVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgPosition get(@Cast("size_t") long i);
    public native MsgPositionVector put(@Cast("size_t") long i, MsgPosition value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgPosition get();
    }

    public MsgPosition[] get() {
        MsgPosition[] array = new MsgPosition[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgPosition pop_back() {
        long size = size();
        MsgPosition value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgPositionVector push_back(MsgPosition value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgPositionVector put(MsgPosition value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgPositionVector put(MsgPosition ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgFile>") public static class MsgFileVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgFileVector(Pointer p) { super(p); }
    public MsgFileVector(MsgFile value) { this(1); put(0, value); }
    public MsgFileVector(MsgFile ... array) { this(array.length); put(array); }
    public MsgFileVector()       { allocate();  }
    public MsgFileVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgFileVector put(@ByRef MsgFileVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgFile get(@Cast("size_t") long i);
    public native MsgFileVector put(@Cast("size_t") long i, MsgFile value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgFile get();
    }

    public MsgFile[] get() {
        MsgFile[] array = new MsgFile[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgFile pop_back() {
        long size = size();
        MsgFile value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgFileVector push_back(MsgFile value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgFileVector put(MsgFile value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgFileVector put(MsgFile ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgCard>") public static class MsgCardVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgCardVector(Pointer p) { super(p); }
    public MsgCardVector(MsgCard value) { this(1); put(0, value); }
    public MsgCardVector(MsgCard ... array) { this(array.length); put(array); }
    public MsgCardVector()       { allocate();  }
    public MsgCardVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgCardVector put(@ByRef MsgCardVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgCard get(@Cast("size_t") long i);
    public native MsgCardVector put(@Cast("size_t") long i, MsgCard value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgCard get();
    }

    public MsgCard[] get() {
        MsgCard[] array = new MsgCard[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgCard pop_back() {
        long size = size();
        MsgCard value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgCardVector push_back(MsgCard value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgCardVector put(MsgCard value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgCardVector put(MsgCard ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgTip>") public static class MsgTipVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgTipVector(Pointer p) { super(p); }
    public MsgTipVector(MsgTip value) { this(1); put(0, value); }
    public MsgTipVector(MsgTip ... array) { this(array.length); put(array); }
    public MsgTipVector()       { allocate();  }
    public MsgTipVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgTipVector put(@ByRef MsgTipVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgTip get(@Cast("size_t") long i);
    public native MsgTipVector put(@Cast("size_t") long i, MsgTip value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgTip get();
    }

    public MsgTip[] get() {
        MsgTip[] array = new MsgTip[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgTip pop_back() {
        long size = size();
        MsgTip value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgTipVector push_back(MsgTip value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgTipVector put(MsgTip value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgTipVector put(MsgTip ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgPicWithText>") public static class MsgPicWithTextVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgPicWithTextVector(Pointer p) { super(p); }
    public MsgPicWithTextVector(MsgPicWithText value) { this(1); put(0, value); }
    public MsgPicWithTextVector(MsgPicWithText ... array) { this(array.length); put(array); }
    public MsgPicWithTextVector()       { allocate();  }
    public MsgPicWithTextVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgPicWithTextVector put(@ByRef MsgPicWithTextVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgPicWithText get(@Cast("size_t") long i);
    public native MsgPicWithTextVector put(@Cast("size_t") long i, MsgPicWithText value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgPicWithText get();
    }

    public MsgPicWithText[] get() {
        MsgPicWithText[] array = new MsgPicWithText[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgPicWithText pop_back() {
        long size = size();
        MsgPicWithText value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgPicWithTextVector push_back(MsgPicWithText value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgPicWithTextVector put(MsgPicWithText value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgPicWithTextVector put(MsgPicWithText ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgDynExpression>") public static class MsgDynExpressionVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgDynExpressionVector(Pointer p) { super(p); }
    public MsgDynExpressionVector(MsgDynExpression value) { this(1); put(0, value); }
    public MsgDynExpressionVector(MsgDynExpression ... array) { this(array.length); put(array); }
    public MsgDynExpressionVector()       { allocate();  }
    public MsgDynExpressionVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgDynExpressionVector put(@ByRef MsgDynExpressionVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgDynExpression get(@Cast("size_t") long i);
    public native MsgDynExpressionVector put(@Cast("size_t") long i, MsgDynExpression value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgDynExpression get();
    }

    public MsgDynExpression[] get() {
        MsgDynExpression[] array = new MsgDynExpression[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgDynExpression pop_back() {
        long size = size();
        MsgDynExpression value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgDynExpressionVector push_back(MsgDynExpression value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgDynExpressionVector put(MsgDynExpression value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgDynExpressionVector put(MsgDynExpression ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgVoice>") public static class MsgVoiceVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgVoiceVector(Pointer p) { super(p); }
    public MsgVoiceVector(MsgVoice value) { this(1); put(0, value); }
    public MsgVoiceVector(MsgVoice ... array) { this(array.length); put(array); }
    public MsgVoiceVector()       { allocate();  }
    public MsgVoiceVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgVoiceVector put(@ByRef MsgVoiceVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgVoice get(@Cast("size_t") long i);
    public native MsgVoiceVector put(@Cast("size_t") long i, MsgVoice value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgVoice get();
    }

    public MsgVoice[] get() {
        MsgVoice[] array = new MsgVoice[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgVoice pop_back() {
        long size = size();
        MsgVoice value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgVoiceVector push_back(MsgVoice value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgVoiceVector put(MsgVoice value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgVoiceVector put(MsgVoice ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgTask>") public static class MsgTaskVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgTaskVector(Pointer p) { super(p); }
    public MsgTaskVector(MsgTask value) { this(1); put(0, value); }
    public MsgTaskVector(MsgTask ... array) { this(array.length); put(array); }
    public MsgTaskVector()       { allocate();  }
    public MsgTaskVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgTaskVector put(@ByRef MsgTaskVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgTask get(@Cast("size_t") long i);
    public native MsgTaskVector put(@Cast("size_t") long i, MsgTask value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgTask get();
    }

    public MsgTask[] get() {
        MsgTask[] array = new MsgTask[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgTask pop_back() {
        long size = size();
        MsgTask value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgTaskVector push_back(MsgTask value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgTaskVector put(MsgTask value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgTaskVector put(MsgTask ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgMasterplate>") public static class MsgMasterplateVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgMasterplateVector(Pointer p) { super(p); }
    public MsgMasterplateVector(MsgMasterplate value) { this(1); put(0, value); }
    public MsgMasterplateVector(MsgMasterplate ... array) { this(array.length); put(array); }
    public MsgMasterplateVector()       { allocate();  }
    public MsgMasterplateVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgMasterplateVector put(@ByRef MsgMasterplateVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgMasterplate get(@Cast("size_t") long i);
    public native MsgMasterplateVector put(@Cast("size_t") long i, MsgMasterplate value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgMasterplate get();
    }

    public MsgMasterplate[] get() {
        MsgMasterplate[] array = new MsgMasterplate[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgMasterplate pop_back() {
        long size = size();
        MsgMasterplate value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgMasterplateVector push_back(MsgMasterplate value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgMasterplateVector put(MsgMasterplate value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgMasterplateVector put(MsgMasterplate ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgMiniVedio>") public static class MsgMiniVedioVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgMiniVedioVector(Pointer p) { super(p); }
    public MsgMiniVedioVector(MsgMiniVedio value) { this(1); put(0, value); }
    public MsgMiniVedioVector(MsgMiniVedio ... array) { this(array.length); put(array); }
    public MsgMiniVedioVector()       { allocate();  }
    public MsgMiniVedioVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgMiniVedioVector put(@ByRef MsgMiniVedioVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgMiniVedio get(@Cast("size_t") long i);
    public native MsgMiniVedioVector put(@Cast("size_t") long i, MsgMiniVedio value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgMiniVedio get();
    }

    public MsgMiniVedio[] get() {
        MsgMiniVedio[] array = new MsgMiniVedio[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgMiniVedio pop_back() {
        long size = size();
        MsgMiniVedio value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgMiniVedioVector push_back(MsgMiniVedio value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgMiniVedioVector put(MsgMiniVedio value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgMiniVedioVector put(MsgMiniVedio ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgDynExpression2>") public static class MsgDynExpression2Vector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgDynExpression2Vector(Pointer p) { super(p); }
    public MsgDynExpression2Vector(MsgDynExpression2 value) { this(1); put(0, value); }
    public MsgDynExpression2Vector(MsgDynExpression2 ... array) { this(array.length); put(array); }
    public MsgDynExpression2Vector()       { allocate();  }
    public MsgDynExpression2Vector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgDynExpression2Vector put(@ByRef MsgDynExpression2Vector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgDynExpression2 get(@Cast("size_t") long i);
    public native MsgDynExpression2Vector put(@Cast("size_t") long i, MsgDynExpression2 value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgDynExpression2 get();
    }

    public MsgDynExpression2[] get() {
        MsgDynExpression2[] array = new MsgDynExpression2[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgDynExpression2 pop_back() {
        long size = size();
        MsgDynExpression2 value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgDynExpression2Vector push_back(MsgDynExpression2 value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgDynExpression2Vector put(MsgDynExpression2 value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgDynExpression2Vector put(MsgDynExpression2 ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgNineBlock>") public static class MsgNineBlockVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgNineBlockVector(Pointer p) { super(p); }
    public MsgNineBlockVector(MsgNineBlock value) { this(1); put(0, value); }
    public MsgNineBlockVector(MsgNineBlock ... array) { this(array.length); put(array); }
    public MsgNineBlockVector()       { allocate();  }
    public MsgNineBlockVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgNineBlockVector put(@ByRef MsgNineBlockVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgNineBlock get(@Cast("size_t") long i);
    public native MsgNineBlockVector put(@Cast("size_t") long i, MsgNineBlock value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgNineBlock get();
    }

    public MsgNineBlock[] get() {
        MsgNineBlock[] array = new MsgNineBlock[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgNineBlock pop_back() {
        long size = size();
        MsgNineBlock value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgNineBlockVector push_back(MsgNineBlock value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgNineBlockVector put(MsgNineBlock value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgNineBlockVector put(MsgNineBlock ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgAppShare>") public static class MsgAppShareVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgAppShareVector(Pointer p) { super(p); }
    public MsgAppShareVector(MsgAppShare value) { this(1); put(0, value); }
    public MsgAppShareVector(MsgAppShare ... array) { this(array.length); put(array); }
    public MsgAppShareVector()       { allocate();  }
    public MsgAppShareVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgAppShareVector put(@ByRef MsgAppShareVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgAppShare get(@Cast("size_t") long i);
    public native MsgAppShareVector put(@Cast("size_t") long i, MsgAppShare value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgAppShare get();
    }

    public MsgAppShare[] get() {
        MsgAppShare[] array = new MsgAppShare[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgAppShare pop_back() {
        long size = size();
        MsgAppShare value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgAppShareVector push_back(MsgAppShare value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgAppShareVector put(MsgAppShare value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgAppShareVector put(MsgAppShare ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<OrganizationInfo>") public static class OrganizationInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrganizationInfoVector(Pointer p) { super(p); }
    public OrganizationInfoVector(OrganizationInfo value) { this(1); put(0, value); }
    public OrganizationInfoVector(OrganizationInfo ... array) { this(array.length); put(array); }
    public OrganizationInfoVector()       { allocate();  }
    public OrganizationInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef OrganizationInfoVector put(@ByRef OrganizationInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef OrganizationInfo get(@Cast("size_t") long i);
    public native OrganizationInfoVector put(@Cast("size_t") long i, OrganizationInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const OrganizationInfo get();
    }

    public OrganizationInfo[] get() {
        OrganizationInfo[] array = new OrganizationInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public OrganizationInfo pop_back() {
        long size = size();
        OrganizationInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public OrganizationInfoVector push_back(OrganizationInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public OrganizationInfoVector put(OrganizationInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public OrganizationInfoVector put(OrganizationInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<OrgSearchUserInfo>") public static class OrgSearchUserInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrgSearchUserInfoVector(Pointer p) { super(p); }
    public OrgSearchUserInfoVector(OrgSearchUserInfo value) { this(1); put(0, value); }
    public OrgSearchUserInfoVector(OrgSearchUserInfo ... array) { this(array.length); put(array); }
    public OrgSearchUserInfoVector()       { allocate();  }
    public OrgSearchUserInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef OrgSearchUserInfoVector put(@ByRef OrgSearchUserInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef OrgSearchUserInfo get(@Cast("size_t") long i);
    public native OrgSearchUserInfoVector put(@Cast("size_t") long i, OrgSearchUserInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const OrgSearchUserInfo get();
    }

    public OrgSearchUserInfo[] get() {
        OrgSearchUserInfo[] array = new OrgSearchUserInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public OrgSearchUserInfo pop_back() {
        long size = size();
        OrgSearchUserInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public OrgSearchUserInfoVector push_back(OrgSearchUserInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public OrgSearchUserInfoVector put(OrgSearchUserInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public OrgSearchUserInfoVector put(OrgSearchUserInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<EntpriseUserInfo>") public static class EntpriseUserInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EntpriseUserInfoVector(Pointer p) { super(p); }
    public EntpriseUserInfoVector(EntpriseUserInfo value) { this(1); put(0, value); }
    public EntpriseUserInfoVector(EntpriseUserInfo ... array) { this(array.length); put(array); }
    public EntpriseUserInfoVector()       { allocate();  }
    public EntpriseUserInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef EntpriseUserInfoVector put(@ByRef EntpriseUserInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef EntpriseUserInfo get(@Cast("size_t") long i);
    public native EntpriseUserInfoVector put(@Cast("size_t") long i, EntpriseUserInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const EntpriseUserInfo get();
    }

    public EntpriseUserInfo[] get() {
        EntpriseUserInfo[] array = new EntpriseUserInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public EntpriseUserInfo pop_back() {
        long size = size();
        EntpriseUserInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public EntpriseUserInfoVector push_back(EntpriseUserInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public EntpriseUserInfoVector put(EntpriseUserInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public EntpriseUserInfoVector put(EntpriseUserInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<LocalSetting>") public static class LocalSettingVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LocalSettingVector(Pointer p) { super(p); }
    public LocalSettingVector(LocalSetting value) { this(1); put(0, value); }
    public LocalSettingVector(LocalSetting ... array) { this(array.length); put(array); }
    public LocalSettingVector()       { allocate();  }
    public LocalSettingVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef LocalSettingVector put(@ByRef LocalSettingVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef LocalSetting get(@Cast("size_t") long i);
    public native LocalSettingVector put(@Cast("size_t") long i, LocalSetting value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const LocalSetting get();
    }

    public LocalSetting[] get() {
        LocalSetting[] array = new LocalSetting[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public LocalSetting pop_back() {
        long size = size();
        LocalSetting value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public LocalSettingVector push_back(LocalSetting value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public LocalSettingVector put(LocalSetting value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public LocalSettingVector put(LocalSetting ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::SmallMarketAppInfo>") public static class SmallMarketAppInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SmallMarketAppInfoVector(Pointer p) { super(p); }
    public SmallMarketAppInfoVector(SmallMarketAppInfo value) { this(1); put(0, value); }
    public SmallMarketAppInfoVector(SmallMarketAppInfo ... array) { this(array.length); put(array); }
    public SmallMarketAppInfoVector()       { allocate();  }
    public SmallMarketAppInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef SmallMarketAppInfoVector put(@ByRef SmallMarketAppInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef SmallMarketAppInfo get(@Cast("size_t") long i);
    public native SmallMarketAppInfoVector put(@Cast("size_t") long i, SmallMarketAppInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const SmallMarketAppInfo get();
    }

    public SmallMarketAppInfo[] get() {
        SmallMarketAppInfo[] array = new SmallMarketAppInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public SmallMarketAppInfo pop_back() {
        long size = size();
        SmallMarketAppInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public SmallMarketAppInfoVector push_back(SmallMarketAppInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public SmallMarketAppInfoVector put(SmallMarketAppInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public SmallMarketAppInfoVector put(SmallMarketAppInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::GroupAppListMenuResult>") public static class GroupAppListMenuResultVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupAppListMenuResultVector(Pointer p) { super(p); }
    public GroupAppListMenuResultVector(GroupAppListMenuResult value) { this(1); put(0, value); }
    public GroupAppListMenuResultVector(GroupAppListMenuResult ... array) { this(array.length); put(array); }
    public GroupAppListMenuResultVector()       { allocate();  }
    public GroupAppListMenuResultVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef GroupAppListMenuResultVector put(@ByRef GroupAppListMenuResultVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef GroupAppListMenuResult get(@Cast("size_t") long i);
    public native GroupAppListMenuResultVector put(@Cast("size_t") long i, GroupAppListMenuResult value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const GroupAppListMenuResult get();
    }

    public GroupAppListMenuResult[] get() {
        GroupAppListMenuResult[] array = new GroupAppListMenuResult[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public GroupAppListMenuResult pop_back() {
        long size = size();
        GroupAppListMenuResult value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public GroupAppListMenuResultVector push_back(GroupAppListMenuResult value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public GroupAppListMenuResultVector put(GroupAppListMenuResult value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public GroupAppListMenuResultVector put(GroupAppListMenuResult ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::UserContact>") public static class UserContactVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UserContactVector(Pointer p) { super(p); }
    public UserContactVector(UserContact value) { this(1); put(0, value); }
    public UserContactVector(UserContact ... array) { this(array.length); put(array); }
    public UserContactVector()       { allocate();  }
    public UserContactVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef UserContactVector put(@ByRef UserContactVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef UserContact get(@Cast("size_t") long i);
    public native UserContactVector put(@Cast("size_t") long i, UserContact value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const UserContact get();
    }

    public UserContact[] get() {
        UserContact[] array = new UserContact[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public UserContact pop_back() {
        long size = size();
        UserContact value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public UserContactVector push_back(UserContact value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public UserContactVector put(UserContact value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public UserContactVector put(UserContact ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::EmoticonPackage>") public static class EmoticonPackageVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmoticonPackageVector(Pointer p) { super(p); }
    public EmoticonPackageVector(EmoticonPackage value) { this(1); put(0, value); }
    public EmoticonPackageVector(EmoticonPackage ... array) { this(array.length); put(array); }
    public EmoticonPackageVector()       { allocate();  }
    public EmoticonPackageVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef EmoticonPackageVector put(@ByRef EmoticonPackageVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef EmoticonPackage get(@Cast("size_t") long i);
    public native EmoticonPackageVector put(@Cast("size_t") long i, EmoticonPackage value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const EmoticonPackage get();
    }

    public EmoticonPackage[] get() {
        EmoticonPackage[] array = new EmoticonPackage[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public EmoticonPackage pop_back() {
        long size = size();
        EmoticonPackage value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public EmoticonPackageVector push_back(EmoticonPackage value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public EmoticonPackageVector put(EmoticonPackage value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public EmoticonPackageVector put(EmoticonPackage ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<Emoticon>") public static class EmoticonVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmoticonVector(Pointer p) { super(p); }
    public EmoticonVector(Emoticon value) { this(1); put(0, value); }
    public EmoticonVector(Emoticon ... array) { this(array.length); put(array); }
    public EmoticonVector()       { allocate();  }
    public EmoticonVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef EmoticonVector put(@ByRef EmoticonVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Emoticon get(@Cast("size_t") long i);
    public native EmoticonVector put(@Cast("size_t") long i, Emoticon value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Emoticon get();
    }

    public Emoticon[] get() {
        Emoticon[] array = new Emoticon[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Emoticon pop_back() {
        long size = size();
        Emoticon value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public EmoticonVector push_back(Emoticon value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public EmoticonVector put(Emoticon value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public EmoticonVector put(Emoticon ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<PersonalData>") public static class PersonalDataVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PersonalDataVector(Pointer p) { super(p); }
    public PersonalDataVector(PersonalData value) { this(1); put(0, value); }
    public PersonalDataVector(PersonalData ... array) { this(array.length); put(array); }
    public PersonalDataVector()       { allocate();  }
    public PersonalDataVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef PersonalDataVector put(@ByRef PersonalDataVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef PersonalData get(@Cast("size_t") long i);
    public native PersonalDataVector put(@Cast("size_t") long i, PersonalData value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const PersonalData get();
    }

    public PersonalData[] get() {
        PersonalData[] array = new PersonalData[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public PersonalData pop_back() {
        long size = size();
        PersonalData value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public PersonalDataVector push_back(PersonalData value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public PersonalDataVector put(PersonalData value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public PersonalDataVector put(PersonalData ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::User>") public static class UserVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UserVector(Pointer p) { super(p); }
    public UserVector(User value) { this(1); put(0, value); }
    public UserVector(User ... array) { this(array.length); put(array); }
    public UserVector()       { allocate();  }
    public UserVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef UserVector put(@ByRef UserVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef User get(@Cast("size_t") long i);
    public native UserVector put(@Cast("size_t") long i, User value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const User get();
    }

    public User[] get() {
        User[] array = new User[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public User pop_back() {
        long size = size();
        User value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public UserVector push_back(User value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public UserVector put(User value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public UserVector put(User ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::TinyGroup>") public static class TinyGroupVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TinyGroupVector(Pointer p) { super(p); }
    public TinyGroupVector(TinyGroup value) { this(1); put(0, value); }
    public TinyGroupVector(TinyGroup ... array) { this(array.length); put(array); }
    public TinyGroupVector()       { allocate();  }
    public TinyGroupVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef TinyGroupVector put(@ByRef TinyGroupVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef TinyGroup get(@Cast("size_t") long i);
    public native TinyGroupVector put(@Cast("size_t") long i, TinyGroup value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const TinyGroup get();
    }

    public TinyGroup[] get() {
        TinyGroup[] array = new TinyGroup[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public TinyGroup pop_back() {
        long size = size();
        TinyGroup value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public TinyGroupVector push_back(TinyGroup value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public TinyGroupVector put(TinyGroup value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public TinyGroupVector put(TinyGroup ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::EntInfo>") public static class EntInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EntInfoVector(Pointer p) { super(p); }
    public EntInfoVector(EntInfo value) { this(1); put(0, value); }
    public EntInfoVector(EntInfo ... array) { this(array.length); put(array); }
    public EntInfoVector()       { allocate();  }
    public EntInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef EntInfoVector put(@ByRef EntInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef EntInfo get(@Cast("size_t") long i);
    public native EntInfoVector put(@Cast("size_t") long i, EntInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const EntInfo get();
    }

    public EntInfo[] get() {
        EntInfo[] array = new EntInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public EntInfo pop_back() {
        long size = size();
        EntInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public EntInfoVector push_back(EntInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public EntInfoVector put(EntInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public EntInfoVector put(EntInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::OrGroupinfo>") public static class OrGroupinfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrGroupinfoVector(Pointer p) { super(p); }
    public OrGroupinfoVector(OrGroupinfo value) { this(1); put(0, value); }
    public OrGroupinfoVector(OrGroupinfo ... array) { this(array.length); put(array); }
    public OrGroupinfoVector()       { allocate();  }
    public OrGroupinfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef OrGroupinfoVector put(@ByRef OrGroupinfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef OrGroupinfo get(@Cast("size_t") long i);
    public native OrGroupinfoVector put(@Cast("size_t") long i, OrGroupinfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const OrGroupinfo get();
    }

    public OrGroupinfo[] get() {
        OrGroupinfo[] array = new OrGroupinfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public OrGroupinfo pop_back() {
        long size = size();
        OrGroupinfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public OrGroupinfoVector push_back(OrGroupinfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public OrGroupinfoVector put(OrGroupinfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public OrGroupinfoVector put(OrGroupinfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::EntAppinfo>") public static class EntAppinfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EntAppinfoVector(Pointer p) { super(p); }
    public EntAppinfoVector(EntAppinfo value) { this(1); put(0, value); }
    public EntAppinfoVector(EntAppinfo ... array) { this(array.length); put(array); }
    public EntAppinfoVector()       { allocate();  }
    public EntAppinfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef EntAppinfoVector put(@ByRef EntAppinfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef EntAppinfo get(@Cast("size_t") long i);
    public native EntAppinfoVector put(@Cast("size_t") long i, EntAppinfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const EntAppinfo get();
    }

    public EntAppinfo[] get() {
        EntAppinfo[] array = new EntAppinfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public EntAppinfo pop_back() {
        long size = size();
        EntAppinfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public EntAppinfoVector push_back(EntAppinfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public EntAppinfoVector put(EntAppinfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public EntAppinfoVector put(EntAppinfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::LocalSearchMemberInfo>") public static class LocalSearchMemberInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LocalSearchMemberInfoVector(Pointer p) { super(p); }
    public LocalSearchMemberInfoVector(LocalSearchMemberInfo value) { this(1); put(0, value); }
    public LocalSearchMemberInfoVector(LocalSearchMemberInfo ... array) { this(array.length); put(array); }
    public LocalSearchMemberInfoVector()       { allocate();  }
    public LocalSearchMemberInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef LocalSearchMemberInfoVector put(@ByRef LocalSearchMemberInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef LocalSearchMemberInfo get(@Cast("size_t") long i);
    public native LocalSearchMemberInfoVector put(@Cast("size_t") long i, LocalSearchMemberInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const LocalSearchMemberInfo get();
    }

    public LocalSearchMemberInfo[] get() {
        LocalSearchMemberInfo[] array = new LocalSearchMemberInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public LocalSearchMemberInfo pop_back() {
        long size = size();
        LocalSearchMemberInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public LocalSearchMemberInfoVector push_back(LocalSearchMemberInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public LocalSearchMemberInfoVector put(LocalSearchMemberInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public LocalSearchMemberInfoVector put(LocalSearchMemberInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<LoginInfo>") public static class LoginInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LoginInfoVector(Pointer p) { super(p); }
    public LoginInfoVector(LoginInfo value) { this(1); put(0, value); }
    public LoginInfoVector(LoginInfo ... array) { this(array.length); put(array); }
    public LoginInfoVector()       { allocate();  }
    public LoginInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef LoginInfoVector put(@ByRef LoginInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef LoginInfo get(@Cast("size_t") long i);
    public native LoginInfoVector put(@Cast("size_t") long i, LoginInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const LoginInfo get();
    }

    public LoginInfo[] get() {
        LoginInfo[] array = new LoginInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public LoginInfo pop_back() {
        long size = size();
        LoginInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public LoginInfoVector push_back(LoginInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public LoginInfoVector put(LoginInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public LoginInfoVector put(LoginInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::picTextBean>") public static class PicTextBeanVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PicTextBeanVector(Pointer p) { super(p); }
    public PicTextBeanVector(picTextBean value) { this(1); put(0, value); }
    public PicTextBeanVector(picTextBean ... array) { this(array.length); put(array); }
    public PicTextBeanVector()       { allocate();  }
    public PicTextBeanVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef PicTextBeanVector put(@ByRef PicTextBeanVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef picTextBean get(@Cast("size_t") long i);
    public native PicTextBeanVector put(@Cast("size_t") long i, picTextBean value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const picTextBean get();
    }

    public picTextBean[] get() {
        picTextBean[] array = new picTextBean[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public picTextBean pop_back() {
        long size = size();
        picTextBean value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public PicTextBeanVector push_back(picTextBean value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public PicTextBeanVector put(picTextBean value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public PicTextBeanVector put(picTextBean ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<model::MsgSearchResult::info>") public static class InfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InfoVector(Pointer p) { super(p); }
    public InfoVector(MsgSearchResult.info value) { this(1); put(0, value); }
    public InfoVector(MsgSearchResult.info ... array) { this(array.length); put(array); }
    public InfoVector()       { allocate();  }
    public InfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef InfoVector put(@ByRef InfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgSearchResult.info get(@Cast("size_t") long i);
    public native InfoVector put(@Cast("size_t") long i, MsgSearchResult.info value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgSearchResult.info get();
    }

    public MsgSearchResult.info[] get() {
        MsgSearchResult.info[] array = new MsgSearchResult.info[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgSearchResult.info pop_back() {
        long size = size();
        MsgSearchResult.info value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public InfoVector push_back(MsgSearchResult.info value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public InfoVector put(MsgSearchResult.info value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public InfoVector put(MsgSearchResult.info ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<p2pUser>") public static class P2pUserVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public P2pUserVector(Pointer p) { super(p); }
    public P2pUserVector(p2pUser value) { this(1); put(0, value); }
    public P2pUserVector(p2pUser ... array) { this(array.length); put(array); }
    public P2pUserVector()       { allocate();  }
    public P2pUserVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef P2pUserVector put(@ByRef P2pUserVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef p2pUser get(@Cast("size_t") long i);
    public native P2pUserVector put(@Cast("size_t") long i, p2pUser value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const p2pUser get();
    }

    public p2pUser[] get() {
        p2pUser[] array = new p2pUser[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public p2pUser pop_back() {
        long size = size();
        p2pUser value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public P2pUserVector push_back(p2pUser value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public P2pUserVector put(p2pUser value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public P2pUserVector put(p2pUser ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<OrgUserinfo>") public static class OrgUserinfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrgUserinfoVector(Pointer p) { super(p); }
    public OrgUserinfoVector(OrgUserinfo value) { this(1); put(0, value); }
    public OrgUserinfoVector(OrgUserinfo ... array) { this(array.length); put(array); }
    public OrgUserinfoVector()       { allocate();  }
    public OrgUserinfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef OrgUserinfoVector put(@ByRef OrgUserinfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef OrgUserinfo get(@Cast("size_t") long i);
    public native OrgUserinfoVector put(@Cast("size_t") long i, OrgUserinfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const OrgUserinfo get();
    }

    public OrgUserinfo[] get() {
        OrgUserinfo[] array = new OrgUserinfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public OrgUserinfo pop_back() {
        long size = size();
        OrgUserinfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public OrgUserinfoVector push_back(OrgUserinfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public OrgUserinfoVector put(OrgUserinfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public OrgUserinfoVector put(OrgUserinfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<OfflineMsg>") public static class OfflineMsgVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OfflineMsgVector(Pointer p) { super(p); }
    public OfflineMsgVector(OfflineMsg value) { this(1); put(0, value); }
    public OfflineMsgVector(OfflineMsg ... array) { this(array.length); put(array); }
    public OfflineMsgVector()       { allocate();  }
    public OfflineMsgVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef OfflineMsgVector put(@ByRef OfflineMsgVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef OfflineMsg get(@Cast("size_t") long i);
    public native OfflineMsgVector put(@Cast("size_t") long i, OfflineMsg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const OfflineMsg get();
    }

    public OfflineMsg[] get() {
        OfflineMsg[] array = new OfflineMsg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public OfflineMsg pop_back() {
        long size = size();
        OfflineMsg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public OfflineMsgVector push_back(OfflineMsg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public OfflineMsgVector put(OfflineMsg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public OfflineMsgVector put(OfflineMsg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<PhoneBookContact>") public static class PhoneBookContactVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PhoneBookContactVector(Pointer p) { super(p); }
    public PhoneBookContactVector(PhoneBookContact value) { this(1); put(0, value); }
    public PhoneBookContactVector(PhoneBookContact ... array) { this(array.length); put(array); }
    public PhoneBookContactVector()       { allocate();  }
    public PhoneBookContactVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef PhoneBookContactVector put(@ByRef PhoneBookContactVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef PhoneBookContact get(@Cast("size_t") long i);
    public native PhoneBookContactVector put(@Cast("size_t") long i, PhoneBookContact value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const PhoneBookContact get();
    }

    public PhoneBookContact[] get() {
        PhoneBookContact[] array = new PhoneBookContact[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public PhoneBookContact pop_back() {
        long size = size();
        PhoneBookContact value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public PhoneBookContactVector push_back(PhoneBookContact value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public PhoneBookContactVector put(PhoneBookContact value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public PhoneBookContactVector put(PhoneBookContact ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<RecommendContact>") public static class RecommendContactVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RecommendContactVector(Pointer p) { super(p); }
    public RecommendContactVector(RecommendContact value) { this(1); put(0, value); }
    public RecommendContactVector(RecommendContact ... array) { this(array.length); put(array); }
    public RecommendContactVector()       { allocate();  }
    public RecommendContactVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef RecommendContactVector put(@ByRef RecommendContactVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef RecommendContact get(@Cast("size_t") long i);
    public native RecommendContactVector put(@Cast("size_t") long i, RecommendContact value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const RecommendContact get();
    }

    public RecommendContact[] get() {
        RecommendContact[] array = new RecommendContact[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public RecommendContact pop_back() {
        long size = size();
        RecommendContact value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public RecommendContactVector push_back(RecommendContact value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public RecommendContactVector put(RecommendContact value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public RecommendContactVector put(RecommendContact ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SubServerInfo>") public static class SubServerInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SubServerInfoVector(Pointer p) { super(p); }
    public SubServerInfoVector(SubServerInfo value) { this(1); put(0, value); }
    public SubServerInfoVector(SubServerInfo ... array) { this(array.length); put(array); }
    public SubServerInfoVector()       { allocate();  }
    public SubServerInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef SubServerInfoVector put(@ByRef SubServerInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef SubServerInfo get(@Cast("size_t") long i);
    public native SubServerInfoVector put(@Cast("size_t") long i, SubServerInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const SubServerInfo get();
    }

    public SubServerInfo[] get() {
        SubServerInfo[] array = new SubServerInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public SubServerInfo pop_back() {
        long size = size();
        SubServerInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public SubServerInfoVector push_back(SubServerInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public SubServerInfoVector put(SubServerInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public SubServerInfoVector put(SubServerInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<service::jst_picTextBean>") public static class JstPicTextBeanVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public JstPicTextBeanVector(Pointer p) { super(p); }
    public JstPicTextBeanVector(jst_picTextBean value) { this(1); put(0, value); }
    public JstPicTextBeanVector(jst_picTextBean ... array) { this(array.length); put(array); }
    public JstPicTextBeanVector()       { allocate();  }
    public JstPicTextBeanVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef JstPicTextBeanVector put(@ByRef JstPicTextBeanVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef jst_picTextBean get(@Cast("size_t") long i);
    public native JstPicTextBeanVector put(@Cast("size_t") long i, jst_picTextBean value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const jst_picTextBean get();
    }

    public jst_picTextBean[] get() {
        jst_picTextBean[] array = new jst_picTextBean[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public jst_picTextBean pop_back() {
        long size = size();
        jst_picTextBean value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public JstPicTextBeanVector push_back(jst_picTextBean value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public JstPicTextBeanVector put(jst_picTextBean value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public JstPicTextBeanVector put(jst_picTextBean ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<ImgMsgInner>") public static class ImgMsgInnerVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImgMsgInnerVector(Pointer p) { super(p); }
    public ImgMsgInnerVector(ImgMsgInner value) { this(1); put(0, value); }
    public ImgMsgInnerVector(ImgMsgInner ... array) { this(array.length); put(array); }
    public ImgMsgInnerVector()       { allocate();  }
    public ImgMsgInnerVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef ImgMsgInnerVector put(@ByRef ImgMsgInnerVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef ImgMsgInner get(@Cast("size_t") long i);
    public native ImgMsgInnerVector put(@Cast("size_t") long i, ImgMsgInner value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const ImgMsgInner get();
    }

    public ImgMsgInner[] get() {
        ImgMsgInner[] array = new ImgMsgInner[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public ImgMsgInner pop_back() {
        long size = size();
        ImgMsgInner value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public ImgMsgInnerVector push_back(ImgMsgInner value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public ImgMsgInnerVector put(ImgMsgInner value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public ImgMsgInnerVector put(ImgMsgInner ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<singleEmoticon>") public static class SingleEmoticonVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SingleEmoticonVector(Pointer p) { super(p); }
    public SingleEmoticonVector(singleEmoticon value) { this(1); put(0, value); }
    public SingleEmoticonVector(singleEmoticon ... array) { this(array.length); put(array); }
    public SingleEmoticonVector()       { allocate();  }
    public SingleEmoticonVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef SingleEmoticonVector put(@ByRef SingleEmoticonVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef singleEmoticon get(@Cast("size_t") long i);
    public native SingleEmoticonVector put(@Cast("size_t") long i, singleEmoticon value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const singleEmoticon get();
    }

    public singleEmoticon[] get() {
        singleEmoticon[] array = new singleEmoticon[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public singleEmoticon pop_back() {
        long size = size();
        singleEmoticon value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public SingleEmoticonVector push_back(singleEmoticon value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public SingleEmoticonVector put(singleEmoticon value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public SingleEmoticonVector put(singleEmoticon ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<localPhoneBook>") public static class localPhoneBookVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public localPhoneBookVector(Pointer p) { super(p); }
    public localPhoneBookVector(localPhoneBook value) { this(1); put(0, value); }
    public localPhoneBookVector(localPhoneBook ... array) { this(array.length); put(array); }
    public localPhoneBookVector()       { allocate();  }
    public localPhoneBookVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef localPhoneBookVector put(@ByRef localPhoneBookVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef localPhoneBook get(@Cast("size_t") long i);
    public native localPhoneBookVector put(@Cast("size_t") long i, localPhoneBook value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const localPhoneBook get();
    }

    public localPhoneBook[] get() {
        localPhoneBook[] array = new localPhoneBook[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public localPhoneBook pop_back() {
        long size = size();
        localPhoneBook value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public localPhoneBookVector push_back(localPhoneBook value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public localPhoneBookVector put(localPhoneBook value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public localPhoneBookVector put(localPhoneBook ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<stupdateInfo>") public static class stupdateInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public stupdateInfoVector(Pointer p) { super(p); }
    public stupdateInfoVector(stupdateInfo value) { this(1); put(0, value); }
    public stupdateInfoVector(stupdateInfo ... array) { this(array.length); put(array); }
    public stupdateInfoVector()       { allocate();  }
    public stupdateInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef stupdateInfoVector put(@ByRef stupdateInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef stupdateInfo get(@Cast("size_t") long i);
    public native stupdateInfoVector put(@Cast("size_t") long i, stupdateInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const stupdateInfo get();
    }

    public stupdateInfo[] get() {
        stupdateInfo[] array = new stupdateInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public stupdateInfo pop_back() {
        long size = size();
        stupdateInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public stupdateInfoVector push_back(stupdateInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public stupdateInfoVector put(stupdateInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public stupdateInfoVector put(stupdateInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<smallMarketAppType>") public static class marketAppVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public marketAppVector(Pointer p) { super(p); }
    public marketAppVector(smallMarketAppType value) { this(1); put(0, value); }
    public marketAppVector(smallMarketAppType ... array) { this(array.length); put(array); }
    public marketAppVector()       { allocate();  }
    public marketAppVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef marketAppVector put(@ByRef marketAppVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef smallMarketAppType get(@Cast("size_t") long i);
    public native marketAppVector put(@Cast("size_t") long i, smallMarketAppType value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const smallMarketAppType get();
    }

    public smallMarketAppType[] get() {
        smallMarketAppType[] array = new smallMarketAppType[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public smallMarketAppType pop_back() {
        long size = size();
        smallMarketAppType value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public marketAppVector push_back(smallMarketAppType value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public marketAppVector put(smallMarketAppType value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public marketAppVector put(smallMarketAppType ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<queryTag>") public static class queryVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public queryVector(Pointer p) { super(p); }
    public queryVector(queryTag value) { this(1); put(0, value); }
    public queryVector(queryTag ... array) { this(array.length); put(array); }
    public queryVector()       { allocate();  }
    public queryVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef queryVector put(@ByRef queryVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef queryTag get(@Cast("size_t") long i);
    public native queryVector put(@Cast("size_t") long i, queryTag value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const queryTag get();
    }

    public queryTag[] get() {
        queryTag[] array = new queryTag[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public queryTag pop_back() {
        long size = size();
        queryTag value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public queryVector push_back(queryTag value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public queryVector put(queryTag value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public queryVector put(queryTag ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<AccountType>") public static class acctTypeVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public acctTypeVector(Pointer p) { super(p); }
    public acctTypeVector(AccountType value) { this(1); put(0, value); }
    public acctTypeVector(AccountType ... array) { this(array.length); put(array); }
    public acctTypeVector()       { allocate();  }
    public acctTypeVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef acctTypeVector put(@ByRef acctTypeVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef AccountType get(@Cast("size_t") long i);
    public native acctTypeVector put(@Cast("size_t") long i, AccountType value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const AccountType get();
    }

    public AccountType[] get() {
        AccountType[] array = new AccountType[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public AccountType pop_back() {
        long size = size();
        AccountType value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public acctTypeVector push_back(AccountType value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public acctTypeVector put(AccountType value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public acctTypeVector put(AccountType ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<CloudFileInfo>") public static class CloudFileVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CloudFileVector(Pointer p) { super(p); }
    public CloudFileVector(CloudFileInfo value) { this(1); put(0, value); }
    public CloudFileVector(CloudFileInfo ... array) { this(array.length); put(array); }
    public CloudFileVector()       { allocate();  }
    public CloudFileVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef CloudFileVector put(@ByRef CloudFileVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef CloudFileInfo get(@Cast("size_t") long i);
    public native CloudFileVector put(@Cast("size_t") long i, CloudFileInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const CloudFileInfo get();
    }

    public CloudFileInfo[] get() {
        CloudFileInfo[] array = new CloudFileInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public CloudFileInfo pop_back() {
        long size = size();
        CloudFileInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public CloudFileVector push_back(CloudFileInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public CloudFileVector put(CloudFileInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public CloudFileVector put(CloudFileInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<TeamMemberInfo>") public static class TeamMemberInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TeamMemberInfoVector(Pointer p) { super(p); }
    public TeamMemberInfoVector(TeamMemberInfo value) { this(1); put(0, value); }
    public TeamMemberInfoVector(TeamMemberInfo ... array) { this(array.length); put(array); }
    public TeamMemberInfoVector()       { allocate();  }
    public TeamMemberInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef TeamMemberInfoVector put(@ByRef TeamMemberInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef TeamMemberInfo get(@Cast("size_t") long i);
    public native TeamMemberInfoVector put(@Cast("size_t") long i, TeamMemberInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const TeamMemberInfo get();
    }

    public TeamMemberInfo[] get() {
        TeamMemberInfo[] array = new TeamMemberInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public TeamMemberInfo pop_back() {
        long size = size();
        TeamMemberInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public TeamMemberInfoVector push_back(TeamMemberInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public TeamMemberInfoVector put(TeamMemberInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public TeamMemberInfoVector put(TeamMemberInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<CloudRoleInfo>") public static class CloudRoleInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CloudRoleInfoVector(Pointer p) { super(p); }
    public CloudRoleInfoVector(CloudRoleInfo value) { this(1); put(0, value); }
    public CloudRoleInfoVector(CloudRoleInfo ... array) { this(array.length); put(array); }
    public CloudRoleInfoVector()       { allocate();  }
    public CloudRoleInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef CloudRoleInfoVector put(@ByRef CloudRoleInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef CloudRoleInfo get(@Cast("size_t") long i);
    public native CloudRoleInfoVector put(@Cast("size_t") long i, CloudRoleInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const CloudRoleInfo get();
    }

    public CloudRoleInfo[] get() {
        CloudRoleInfo[] array = new CloudRoleInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public CloudRoleInfo pop_back() {
        long size = size();
        CloudRoleInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public CloudRoleInfoVector push_back(CloudRoleInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public CloudRoleInfoVector put(CloudRoleInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public CloudRoleInfoVector put(CloudRoleInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<AppNodeInfo>") public static class AppNodeInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AppNodeInfoVector(Pointer p) { super(p); }
    public AppNodeInfoVector(AppNodeInfo value) { this(1); put(0, value); }
    public AppNodeInfoVector(AppNodeInfo ... array) { this(array.length); put(array); }
    public AppNodeInfoVector()       { allocate();  }
    public AppNodeInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef AppNodeInfoVector put(@ByRef AppNodeInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef AppNodeInfo get(@Cast("size_t") long i);
    public native AppNodeInfoVector put(@Cast("size_t") long i, AppNodeInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const AppNodeInfo get();
    }

    public AppNodeInfo[] get() {
        AppNodeInfo[] array = new AppNodeInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public AppNodeInfo pop_back() {
        long size = size();
        AppNodeInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public AppNodeInfoVector push_back(AppNodeInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public AppNodeInfoVector put(AppNodeInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public AppNodeInfoVector put(AppNodeInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<WorkbenchBanner>") public static class WorkbenchBannerVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public WorkbenchBannerVector(Pointer p) { super(p); }
    public WorkbenchBannerVector(WorkbenchBanner value) { this(1); put(0, value); }
    public WorkbenchBannerVector(WorkbenchBanner ... array) { this(array.length); put(array); }
    public WorkbenchBannerVector()       { allocate();  }
    public WorkbenchBannerVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef WorkbenchBannerVector put(@ByRef WorkbenchBannerVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef WorkbenchBanner get(@Cast("size_t") long i);
    public native WorkbenchBannerVector put(@Cast("size_t") long i, WorkbenchBanner value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const WorkbenchBanner get();
    }

    public WorkbenchBanner[] get() {
        WorkbenchBanner[] array = new WorkbenchBanner[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public WorkbenchBanner pop_back() {
        long size = size();
        WorkbenchBanner value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public WorkbenchBannerVector push_back(WorkbenchBanner value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public WorkbenchBannerVector put(WorkbenchBanner value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public WorkbenchBannerVector put(WorkbenchBanner ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<HelpSystemInfo>") public static class HelpSystemInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HelpSystemInfoVector(Pointer p) { super(p); }
    public HelpSystemInfoVector(HelpSystemInfo value) { this(1); put(0, value); }
    public HelpSystemInfoVector(HelpSystemInfo ... array) { this(array.length); put(array); }
    public HelpSystemInfoVector()       { allocate();  }
    public HelpSystemInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef HelpSystemInfoVector put(@ByRef HelpSystemInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef HelpSystemInfo get(@Cast("size_t") long i);
    public native HelpSystemInfoVector put(@Cast("size_t") long i, HelpSystemInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const HelpSystemInfo get();
    }

    public HelpSystemInfo[] get() {
        HelpSystemInfo[] array = new HelpSystemInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public HelpSystemInfo pop_back() {
        long size = size();
        HelpSystemInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public HelpSystemInfoVector push_back(HelpSystemInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public HelpSystemInfoVector put(HelpSystemInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public HelpSystemInfoVector put(HelpSystemInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SnapshotInfo>") public static class SnapshotInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SnapshotInfoVector(Pointer p) { super(p); }
    public SnapshotInfoVector(SnapshotInfo value) { this(1); put(0, value); }
    public SnapshotInfoVector(SnapshotInfo ... array) { this(array.length); put(array); }
    public SnapshotInfoVector()       { allocate();  }
    public SnapshotInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef SnapshotInfoVector put(@ByRef SnapshotInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef SnapshotInfo get(@Cast("size_t") long i);
    public native SnapshotInfoVector put(@Cast("size_t") long i, SnapshotInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const SnapshotInfo get();
    }

    public SnapshotInfo[] get() {
        SnapshotInfo[] array = new SnapshotInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public SnapshotInfo pop_back() {
        long size = size();
        SnapshotInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public SnapshotInfoVector push_back(SnapshotInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public SnapshotInfoVector put(SnapshotInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public SnapshotInfoVector put(SnapshotInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<MsgUnreadCounter>") public static class MsgUnreadCounterVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgUnreadCounterVector(Pointer p) { super(p); }
    public MsgUnreadCounterVector(MsgUnreadCounter value) { this(1); put(0, value); }
    public MsgUnreadCounterVector(MsgUnreadCounter ... array) { this(array.length); put(array); }
    public MsgUnreadCounterVector()       { allocate();  }
    public MsgUnreadCounterVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MsgUnreadCounterVector put(@ByRef MsgUnreadCounterVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MsgUnreadCounter get(@Cast("size_t") long i);
    public native MsgUnreadCounterVector put(@Cast("size_t") long i, MsgUnreadCounter value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MsgUnreadCounter get();
    }

    public MsgUnreadCounter[] get() {
        MsgUnreadCounter[] array = new MsgUnreadCounter[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MsgUnreadCounter pop_back() {
        long size = size();
        MsgUnreadCounter value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MsgUnreadCounterVector push_back(MsgUnreadCounter value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MsgUnreadCounterVector put(MsgUnreadCounter value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MsgUnreadCounterVector put(MsgUnreadCounter ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<p2pServerInfo>") public static class P2pServerInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public P2pServerInfoVector(Pointer p) { super(p); }
    public P2pServerInfoVector(p2pServerInfo value) { this(1); put(0, value); }
    public P2pServerInfoVector(p2pServerInfo ... array) { this(array.length); put(array); }
    public P2pServerInfoVector()       { allocate();  }
    public P2pServerInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef P2pServerInfoVector put(@ByRef P2pServerInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef p2pServerInfo get(@Cast("size_t") long i);
    public native P2pServerInfoVector put(@Cast("size_t") long i, p2pServerInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const p2pServerInfo get();
    }

    public p2pServerInfo[] get() {
        p2pServerInfo[] array = new p2pServerInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public p2pServerInfo pop_back() {
        long size = size();
        p2pServerInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public P2pServerInfoVector push_back(p2pServerInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public P2pServerInfoVector put(p2pServerInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public P2pServerInfoVector put(p2pServerInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<AppOrderInfo>") public static class AppOrderVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AppOrderVector(Pointer p) { super(p); }
    public AppOrderVector(AppOrderInfo value) { this(1); put(0, value); }
    public AppOrderVector(AppOrderInfo ... array) { this(array.length); put(array); }
    public AppOrderVector()       { allocate();  }
    public AppOrderVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef AppOrderVector put(@ByRef AppOrderVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef AppOrderInfo get(@Cast("size_t") long i);
    public native AppOrderVector put(@Cast("size_t") long i, AppOrderInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const AppOrderInfo get();
    }

    public AppOrderInfo[] get() {
        AppOrderInfo[] array = new AppOrderInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public AppOrderInfo pop_back() {
        long size = size();
        AppOrderInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public AppOrderVector push_back(AppOrderInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public AppOrderVector put(AppOrderInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public AppOrderVector put(AppOrderInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<MarketAppGroup>") public static class MarketAppGroupVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MarketAppGroupVector(Pointer p) { super(p); }
    public MarketAppGroupVector(MarketAppGroup value) { this(1); put(0, value); }
    public MarketAppGroupVector(MarketAppGroup ... array) { this(array.length); put(array); }
    public MarketAppGroupVector()       { allocate();  }
    public MarketAppGroupVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MarketAppGroupVector put(@ByRef MarketAppGroupVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MarketAppGroup get(@Cast("size_t") long i);
    public native MarketAppGroupVector put(@Cast("size_t") long i, MarketAppGroup value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MarketAppGroup get();
    }

    public MarketAppGroup[] get() {
        MarketAppGroup[] array = new MarketAppGroup[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MarketAppGroup pop_back() {
        long size = size();
        MarketAppGroup value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MarketAppGroupVector push_back(MarketAppGroup value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MarketAppGroupVector put(MarketAppGroup value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MarketAppGroupVector put(MarketAppGroup ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<GroupIssue>") public static class GroupIssueVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupIssueVector(Pointer p) { super(p); }
    public GroupIssueVector(GroupIssue value) { this(1); put(0, value); }
    public GroupIssueVector(GroupIssue ... array) { this(array.length); put(array); }
    public GroupIssueVector()       { allocate();  }
    public GroupIssueVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef GroupIssueVector put(@ByRef GroupIssueVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef GroupIssue get(@Cast("size_t") long i);
    public native GroupIssueVector put(@Cast("size_t") long i, GroupIssue value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const GroupIssue get();
    }

    public GroupIssue[] get() {
        GroupIssue[] array = new GroupIssue[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public GroupIssue pop_back() {
        long size = size();
        GroupIssue value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public GroupIssueVector push_back(GroupIssue value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public GroupIssueVector put(GroupIssue value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public GroupIssueVector put(GroupIssue ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<GroupAnnouncementInfo>") public static class GroupAnnouncementInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupAnnouncementInfoVector(Pointer p) { super(p); }
    public GroupAnnouncementInfoVector(GroupAnnouncementInfo value) { this(1); put(0, value); }
    public GroupAnnouncementInfoVector(GroupAnnouncementInfo ... array) { this(array.length); put(array); }
    public GroupAnnouncementInfoVector()       { allocate();  }
    public GroupAnnouncementInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef GroupAnnouncementInfoVector put(@ByRef GroupAnnouncementInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef GroupAnnouncementInfo get(@Cast("size_t") long i);
    public native GroupAnnouncementInfoVector put(@Cast("size_t") long i, GroupAnnouncementInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const GroupAnnouncementInfo get();
    }

    public GroupAnnouncementInfo[] get() {
        GroupAnnouncementInfo[] array = new GroupAnnouncementInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public GroupAnnouncementInfo pop_back() {
        long size = size();
        GroupAnnouncementInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public GroupAnnouncementInfoVector push_back(GroupAnnouncementInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public GroupAnnouncementInfoVector put(GroupAnnouncementInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public GroupAnnouncementInfoVector put(GroupAnnouncementInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<LocalAppInfo>") public static class LocalAppInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LocalAppInfoVector(Pointer p) { super(p); }
    public LocalAppInfoVector(LocalAppInfo value) { this(1); put(0, value); }
    public LocalAppInfoVector(LocalAppInfo ... array) { this(array.length); put(array); }
    public LocalAppInfoVector()       { allocate();  }
    public LocalAppInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef LocalAppInfoVector put(@ByRef LocalAppInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef LocalAppInfo get(@Cast("size_t") long i);
    public native LocalAppInfoVector put(@Cast("size_t") long i, LocalAppInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const LocalAppInfo get();
    }

    public LocalAppInfo[] get() {
        LocalAppInfo[] array = new LocalAppInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public LocalAppInfo pop_back() {
        long size = size();
        LocalAppInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public LocalAppInfoVector push_back(LocalAppInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public LocalAppInfoVector put(LocalAppInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public LocalAppInfoVector put(LocalAppInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<Notebook>") public static class NotebookVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NotebookVector(Pointer p) { super(p); }
    public NotebookVector(Notebook value) { this(1); put(0, value); }
    public NotebookVector(Notebook ... array) { this(array.length); put(array); }
    public NotebookVector()       { allocate();  }
    public NotebookVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef NotebookVector put(@ByRef NotebookVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Notebook get(@Cast("size_t") long i);
    public native NotebookVector put(@Cast("size_t") long i, Notebook value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Notebook get();
    }

    public Notebook[] get() {
        Notebook[] array = new Notebook[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Notebook pop_back() {
        long size = size();
        Notebook value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public NotebookVector push_back(Notebook value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public NotebookVector put(Notebook value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public NotebookVector put(Notebook ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<NoteEntry>") public static class NoteEntryVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NoteEntryVector(Pointer p) { super(p); }
    public NoteEntryVector(NoteEntry value) { this(1); put(0, value); }
    public NoteEntryVector(NoteEntry ... array) { this(array.length); put(array); }
    public NoteEntryVector()       { allocate();  }
    public NoteEntryVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef NoteEntryVector put(@ByRef NoteEntryVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef NoteEntry get(@Cast("size_t") long i);
    public native NoteEntryVector put(@Cast("size_t") long i, NoteEntry value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const NoteEntry get();
    }

    public NoteEntry[] get() {
        NoteEntry[] array = new NoteEntry[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public NoteEntry pop_back() {
        long size = size();
        NoteEntry value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public NoteEntryVector push_back(NoteEntry value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public NoteEntryVector put(NoteEntry value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public NoteEntryVector put(NoteEntry ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<CustomerPoolBean>") public static class CustomerPoolBeanVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CustomerPoolBeanVector(Pointer p) { super(p); }
    public CustomerPoolBeanVector(CustomerPoolBean value) { this(1); put(0, value); }
    public CustomerPoolBeanVector(CustomerPoolBean ... array) { this(array.length); put(array); }
    public CustomerPoolBeanVector()       { allocate();  }
    public CustomerPoolBeanVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef CustomerPoolBeanVector put(@ByRef CustomerPoolBeanVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef CustomerPoolBean get(@Cast("size_t") long i);
    public native CustomerPoolBeanVector put(@Cast("size_t") long i, CustomerPoolBean value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const CustomerPoolBean get();
    }

    public CustomerPoolBean[] get() {
        CustomerPoolBean[] array = new CustomerPoolBean[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public CustomerPoolBean pop_back() {
        long size = size();
        CustomerPoolBean value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public CustomerPoolBeanVector push_back(CustomerPoolBean value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public CustomerPoolBeanVector put(CustomerPoolBean value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public CustomerPoolBeanVector put(CustomerPoolBean ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<CustomChat>") public static class CustomChatVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CustomChatVector(Pointer p) { super(p); }
    public CustomChatVector(CustomChat value) { this(1); put(0, value); }
    public CustomChatVector(CustomChat ... array) { this(array.length); put(array); }
    public CustomChatVector()       { allocate();  }
    public CustomChatVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef CustomChatVector put(@ByRef CustomChatVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef CustomChat get(@Cast("size_t") long i);
    public native CustomChatVector put(@Cast("size_t") long i, CustomChat value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const CustomChat get();
    }

    public CustomChat[] get() {
        CustomChat[] array = new CustomChat[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public CustomChat pop_back() {
        long size = size();
        CustomChat value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public CustomChatVector push_back(CustomChat value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public CustomChatVector put(CustomChat value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public CustomChatVector put(CustomChat ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<CustomAppInfo>") public static class CustomAppInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CustomAppInfoVector(Pointer p) { super(p); }
    public CustomAppInfoVector(CustomAppInfo value) { this(1); put(0, value); }
    public CustomAppInfoVector(CustomAppInfo ... array) { this(array.length); put(array); }
    public CustomAppInfoVector()       { allocate();  }
    public CustomAppInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef CustomAppInfoVector put(@ByRef CustomAppInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef CustomAppInfo get(@Cast("size_t") long i);
    public native CustomAppInfoVector put(@Cast("size_t") long i, CustomAppInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const CustomAppInfo get();
    }

    public CustomAppInfo[] get() {
        CustomAppInfo[] array = new CustomAppInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public CustomAppInfo pop_back() {
        long size = size();
        CustomAppInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public CustomAppInfoVector push_back(CustomAppInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public CustomAppInfoVector put(CustomAppInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public CustomAppInfoVector put(CustomAppInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<globalNoDisturbModeInfo>") public static class globalNoDisturbModeInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public globalNoDisturbModeInfoVector(Pointer p) { super(p); }
    public globalNoDisturbModeInfoVector(globalNoDisturbModeInfo value) { this(1); put(0, value); }
    public globalNoDisturbModeInfoVector(globalNoDisturbModeInfo ... array) { this(array.length); put(array); }
    public globalNoDisturbModeInfoVector()       { allocate();  }
    public globalNoDisturbModeInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef globalNoDisturbModeInfoVector put(@ByRef globalNoDisturbModeInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef globalNoDisturbModeInfo get(@Cast("size_t") long i);
    public native globalNoDisturbModeInfoVector put(@Cast("size_t") long i, globalNoDisturbModeInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const globalNoDisturbModeInfo get();
    }

    public globalNoDisturbModeInfo[] get() {
        globalNoDisturbModeInfo[] array = new globalNoDisturbModeInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public globalNoDisturbModeInfo pop_back() {
        long size = size();
        globalNoDisturbModeInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public globalNoDisturbModeInfoVector push_back(globalNoDisturbModeInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public globalNoDisturbModeInfoVector put(globalNoDisturbModeInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public globalNoDisturbModeInfoVector put(globalNoDisturbModeInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<DeviceLoginRecord>") public static class DeviceLoginRecordVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeviceLoginRecordVector(Pointer p) { super(p); }
    public DeviceLoginRecordVector(DeviceLoginRecord value) { this(1); put(0, value); }
    public DeviceLoginRecordVector(DeviceLoginRecord ... array) { this(array.length); put(array); }
    public DeviceLoginRecordVector()       { allocate();  }
    public DeviceLoginRecordVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef DeviceLoginRecordVector put(@ByRef DeviceLoginRecordVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef DeviceLoginRecord get(@Cast("size_t") long i);
    public native DeviceLoginRecordVector put(@Cast("size_t") long i, DeviceLoginRecord value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const DeviceLoginRecord get();
    }

    public DeviceLoginRecord[] get() {
        DeviceLoginRecord[] array = new DeviceLoginRecord[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public DeviceLoginRecord pop_back() {
        long size = size();
        DeviceLoginRecord value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public DeviceLoginRecordVector push_back(DeviceLoginRecord value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public DeviceLoginRecordVector put(DeviceLoginRecord value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public DeviceLoginRecordVector put(DeviceLoginRecord ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<reminderMsg>") public static class reminderMsgVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public reminderMsgVector(Pointer p) { super(p); }
    public reminderMsgVector(reminderMsg value) { this(1); put(0, value); }
    public reminderMsgVector(reminderMsg ... array) { this(array.length); put(array); }
    public reminderMsgVector()       { allocate();  }
    public reminderMsgVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef reminderMsgVector put(@ByRef reminderMsgVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef reminderMsg get(@Cast("size_t") long i);
    public native reminderMsgVector put(@Cast("size_t") long i, reminderMsg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const reminderMsg get();
    }

    public reminderMsg[] get() {
        reminderMsg[] array = new reminderMsg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public reminderMsg pop_back() {
        long size = size();
        reminderMsg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public reminderMsgVector push_back(reminderMsg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public reminderMsgVector put(reminderMsg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public reminderMsgVector put(reminderMsg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<agencymsg>") public static class agencymsgVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public agencymsgVector(Pointer p) { super(p); }
    public agencymsgVector(agencymsg value) { this(1); put(0, value); }
    public agencymsgVector(agencymsg ... array) { this(array.length); put(array); }
    public agencymsgVector()       { allocate();  }
    public agencymsgVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef agencymsgVector put(@ByRef agencymsgVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef agencymsg get(@Cast("size_t") long i);
    public native agencymsgVector put(@Cast("size_t") long i, agencymsg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const agencymsg get();
    }

    public agencymsg[] get() {
        agencymsg[] array = new agencymsg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public agencymsg pop_back() {
        long size = size();
        agencymsg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public agencymsgVector push_back(agencymsg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public agencymsgVector put(agencymsg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public agencymsgVector put(agencymsg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<LoginClientRecord>") public static class LoginClientRecordVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LoginClientRecordVector(Pointer p) { super(p); }
    public LoginClientRecordVector(LoginClientRecord value) { this(1); put(0, value); }
    public LoginClientRecordVector(LoginClientRecord ... array) { this(array.length); put(array); }
    public LoginClientRecordVector()       { allocate();  }
    public LoginClientRecordVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef LoginClientRecordVector put(@ByRef LoginClientRecordVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef LoginClientRecord get(@Cast("size_t") long i);
    public native LoginClientRecordVector put(@Cast("size_t") long i, LoginClientRecord value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const LoginClientRecord get();
    }

    public LoginClientRecord[] get() {
        LoginClientRecord[] array = new LoginClientRecord[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public LoginClientRecord pop_back() {
        long size = size();
        LoginClientRecord value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public LoginClientRecordVector push_back(LoginClientRecord value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public LoginClientRecordVector put(LoginClientRecord value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public LoginClientRecordVector put(LoginClientRecord ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<SmallAppHelp>") public static class SmallAppHelpVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SmallAppHelpVector(Pointer p) { super(p); }
    public SmallAppHelpVector(SmallAppHelp value) { this(1); put(0, value); }
    public SmallAppHelpVector(SmallAppHelp ... array) { this(array.length); put(array); }
    public SmallAppHelpVector()       { allocate();  }
    public SmallAppHelpVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef SmallAppHelpVector put(@ByRef SmallAppHelpVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef SmallAppHelp get(@Cast("size_t") long i);
    public native SmallAppHelpVector put(@Cast("size_t") long i, SmallAppHelp value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const SmallAppHelp get();
    }

    public SmallAppHelp[] get() {
        SmallAppHelp[] array = new SmallAppHelp[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public SmallAppHelp pop_back() {
        long size = size();
        SmallAppHelp value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public SmallAppHelpVector push_back(SmallAppHelp value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public SmallAppHelpVector put(SmallAppHelp value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public SmallAppHelpVector put(SmallAppHelp ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<strc_UserToAppConfig>") public static class strc_UserToAppConfigVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public strc_UserToAppConfigVector(Pointer p) { super(p); }
    public strc_UserToAppConfigVector(strc_UserToAppConfig value) { this(1); put(0, value); }
    public strc_UserToAppConfigVector(strc_UserToAppConfig ... array) { this(array.length); put(array); }
    public strc_UserToAppConfigVector()       { allocate();  }
    public strc_UserToAppConfigVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef strc_UserToAppConfigVector put(@ByRef strc_UserToAppConfigVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef strc_UserToAppConfig get(@Cast("size_t") long i);
    public native strc_UserToAppConfigVector put(@Cast("size_t") long i, strc_UserToAppConfig value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const strc_UserToAppConfig get();
    }

    public strc_UserToAppConfig[] get() {
        strc_UserToAppConfig[] array = new strc_UserToAppConfig[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public strc_UserToAppConfig pop_back() {
        long size = size();
        strc_UserToAppConfig value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public strc_UserToAppConfigVector push_back(strc_UserToAppConfig value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public strc_UserToAppConfigVector put(strc_UserToAppConfig value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public strc_UserToAppConfigVector put(strc_UserToAppConfig ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<PersonalDataSwitch>") public static class PersonalDataSwitchVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PersonalDataSwitchVector(Pointer p) { super(p); }
    public PersonalDataSwitchVector(PersonalDataSwitch value) { this(1); put(0, value); }
    public PersonalDataSwitchVector(PersonalDataSwitch ... array) { this(array.length); put(array); }
    public PersonalDataSwitchVector()       { allocate();  }
    public PersonalDataSwitchVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef PersonalDataSwitchVector put(@ByRef PersonalDataSwitchVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef PersonalDataSwitch get(@Cast("size_t") long i);
    public native PersonalDataSwitchVector put(@Cast("size_t") long i, PersonalDataSwitch value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const PersonalDataSwitch get();
    }

    public PersonalDataSwitch[] get() {
        PersonalDataSwitch[] array = new PersonalDataSwitch[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public PersonalDataSwitch pop_back() {
        long size = size();
        PersonalDataSwitch value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public PersonalDataSwitchVector push_back(PersonalDataSwitch value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public PersonalDataSwitchVector put(PersonalDataSwitch value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public PersonalDataSwitchVector put(PersonalDataSwitch ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<ClientMenuSet>") public static class ClientMenuSetVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ClientMenuSetVector(Pointer p) { super(p); }
    public ClientMenuSetVector(ClientMenuSet value) { this(1); put(0, value); }
    public ClientMenuSetVector(ClientMenuSet ... array) { this(array.length); put(array); }
    public ClientMenuSetVector()       { allocate();  }
    public ClientMenuSetVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef ClientMenuSetVector put(@ByRef ClientMenuSetVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef ClientMenuSet get(@Cast("size_t") long i);
    public native ClientMenuSetVector put(@Cast("size_t") long i, ClientMenuSet value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const ClientMenuSet get();
    }

    public ClientMenuSet[] get() {
        ClientMenuSet[] array = new ClientMenuSet[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public ClientMenuSet pop_back() {
        long size = size();
        ClientMenuSet value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public ClientMenuSetVector push_back(ClientMenuSet value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public ClientMenuSetVector put(ClientMenuSet value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public ClientMenuSetVector put(ClientMenuSet ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<Security>") public static class SecurityVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SecurityVector(Pointer p) { super(p); }
    public SecurityVector(Security value) { this(1); put(0, value); }
    public SecurityVector(Security ... array) { this(array.length); put(array); }
    public SecurityVector()       { allocate();  }
    public SecurityVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef SecurityVector put(@ByRef SecurityVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Security get(@Cast("size_t") long i);
    public native SecurityVector put(@Cast("size_t") long i, Security value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Security get();
    }

    public Security[] get() {
        Security[] array = new Security[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Security pop_back() {
        long size = size();
        Security value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public SecurityVector push_back(Security value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public SecurityVector put(Security value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public SecurityVector put(Security ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<OutEntNodeInfo>") public static class OutEntNodeInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OutEntNodeInfoVector(Pointer p) { super(p); }
    public OutEntNodeInfoVector(OutEntNodeInfo value) { this(1); put(0, value); }
    public OutEntNodeInfoVector(OutEntNodeInfo ... array) { this(array.length); put(array); }
    public OutEntNodeInfoVector()       { allocate();  }
    public OutEntNodeInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef OutEntNodeInfoVector put(@ByRef OutEntNodeInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef OutEntNodeInfo get(@Cast("size_t") long i);
    public native OutEntNodeInfoVector put(@Cast("size_t") long i, OutEntNodeInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const OutEntNodeInfo get();
    }

    public OutEntNodeInfo[] get() {
        OutEntNodeInfo[] array = new OutEntNodeInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public OutEntNodeInfo pop_back() {
        long size = size();
        OutEntNodeInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public OutEntNodeInfoVector push_back(OutEntNodeInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public OutEntNodeInfoVector put(OutEntNodeInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public OutEntNodeInfoVector put(OutEntNodeInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<ElevatorAuthority>") public static class ElevatorAuthorityVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ElevatorAuthorityVector(Pointer p) { super(p); }
    public ElevatorAuthorityVector(ElevatorAuthority value) { this(1); put(0, value); }
    public ElevatorAuthorityVector(ElevatorAuthority ... array) { this(array.length); put(array); }
    public ElevatorAuthorityVector()       { allocate();  }
    public ElevatorAuthorityVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef ElevatorAuthorityVector put(@ByRef ElevatorAuthorityVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef ElevatorAuthority get(@Cast("size_t") long i);
    public native ElevatorAuthorityVector put(@Cast("size_t") long i, ElevatorAuthority value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const ElevatorAuthority get();
    }

    public ElevatorAuthority[] get() {
        ElevatorAuthority[] array = new ElevatorAuthority[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public ElevatorAuthority pop_back() {
        long size = size();
        ElevatorAuthority value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public ElevatorAuthorityVector push_back(ElevatorAuthority value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public ElevatorAuthorityVector put(ElevatorAuthority value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public ElevatorAuthorityVector put(ElevatorAuthority ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<ToDoTaskMsg>") public static class ToDoTaskMsgVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ToDoTaskMsgVector(Pointer p) { super(p); }
    public ToDoTaskMsgVector(ToDoTaskMsg value) { this(1); put(0, value); }
    public ToDoTaskMsgVector(ToDoTaskMsg ... array) { this(array.length); put(array); }
    public ToDoTaskMsgVector()       { allocate();  }
    public ToDoTaskMsgVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef ToDoTaskMsgVector put(@ByRef ToDoTaskMsgVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef ToDoTaskMsg get(@Cast("size_t") long i);
    public native ToDoTaskMsgVector put(@Cast("size_t") long i, ToDoTaskMsg value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const ToDoTaskMsg get();
    }

    public ToDoTaskMsg[] get() {
        ToDoTaskMsg[] array = new ToDoTaskMsg[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public ToDoTaskMsg pop_back() {
        long size = size();
        ToDoTaskMsg value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public ToDoTaskMsgVector push_back(ToDoTaskMsg value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public ToDoTaskMsgVector put(ToDoTaskMsg value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public ToDoTaskMsgVector put(ToDoTaskMsg ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<MarketAppInfo>") public static class MarketAppInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MarketAppInfoVector(Pointer p) { super(p); }
    public MarketAppInfoVector(MarketAppInfo value) { this(1); put(0, value); }
    public MarketAppInfoVector(MarketAppInfo ... array) { this(array.length); put(array); }
    public MarketAppInfoVector()       { allocate();  }
    public MarketAppInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef MarketAppInfoVector put(@ByRef MarketAppInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef MarketAppInfo get(@Cast("size_t") long i);
    public native MarketAppInfoVector put(@Cast("size_t") long i, MarketAppInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const MarketAppInfo get();
    }

    public MarketAppInfo[] get() {
        MarketAppInfo[] array = new MarketAppInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public MarketAppInfo pop_back() {
        long size = size();
        MarketAppInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public MarketAppInfoVector push_back(MarketAppInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public MarketAppInfoVector put(MarketAppInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public MarketAppInfoVector put(MarketAppInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<GroupDocAttribute>") public static class GroupDocAttributeVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupDocAttributeVector(Pointer p) { super(p); }
    public GroupDocAttributeVector(GroupDocAttribute value) { this(1); put(0, value); }
    public GroupDocAttributeVector(GroupDocAttribute ... array) { this(array.length); put(array); }
    public GroupDocAttributeVector()       { allocate();  }
    public GroupDocAttributeVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef GroupDocAttributeVector put(@ByRef GroupDocAttributeVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef GroupDocAttribute get(@Cast("size_t") long i);
    public native GroupDocAttributeVector put(@Cast("size_t") long i, GroupDocAttribute value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const GroupDocAttribute get();
    }

    public GroupDocAttribute[] get() {
        GroupDocAttribute[] array = new GroupDocAttribute[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public GroupDocAttribute pop_back() {
        long size = size();
        GroupDocAttribute value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public GroupDocAttributeVector push_back(GroupDocAttribute value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public GroupDocAttributeVector put(GroupDocAttribute value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public GroupDocAttributeVector put(GroupDocAttribute ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<GroupDocUpdownInfo>") public static class GroupDocUpdownInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupDocUpdownInfoVector(Pointer p) { super(p); }
    public GroupDocUpdownInfoVector(GroupDocUpdownInfo value) { this(1); put(0, value); }
    public GroupDocUpdownInfoVector(GroupDocUpdownInfo ... array) { this(array.length); put(array); }
    public GroupDocUpdownInfoVector()       { allocate();  }
    public GroupDocUpdownInfoVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef GroupDocUpdownInfoVector put(@ByRef GroupDocUpdownInfoVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef GroupDocUpdownInfo get(@Cast("size_t") long i);
    public native GroupDocUpdownInfoVector put(@Cast("size_t") long i, GroupDocUpdownInfo value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const GroupDocUpdownInfo get();
    }

    public GroupDocUpdownInfo[] get() {
        GroupDocUpdownInfo[] array = new GroupDocUpdownInfo[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public GroupDocUpdownInfo pop_back() {
        long size = size();
        GroupDocUpdownInfo value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public GroupDocUpdownInfoVector push_back(GroupDocUpdownInfo value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public GroupDocUpdownInfoVector put(GroupDocUpdownInfo value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public GroupDocUpdownInfoVector put(GroupDocUpdownInfo ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

// Parsed from interface/IAuthService.h

// #pragma once

// #include "../model/LoginInfo.h"
// #include "../model/Packet.h"
// #include "../model/Account.h"
// #include "IService.h"
// #include <string>

// #define VER_IAUTH INTERFACE_VERSION(1,0)

@Namespace("service") public static class IAuthService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IAuthService(Pointer p) { super(p); }


	/*****************************************注册通知回调*******************************************/

	/**
	* \brief 监听网络连接状态
	* @param [out] cb 0代表网络ＯＫ，非零是网络异常
	* -1表示与服务器无法建立连接
	* -2表示推送连接两次尝试失败，客户端收到-2后根据系统api提供的4Gwifi网络状态和sdk提供的ap请求异常，判断服务器是否宕机
	* -3表示推送线程退出，客户端收到-3后如果再收到请求接口返回-16777171或者regReLoginCb接口返回115，可以报登录状态异常
	*/
	public native void regNetChangedCb(@ByVal FnCbInt cb);

	/**
	* \brief 监听补链结果
	* @param [out] cb 0代表补链完成，非零是异常
	*/
	public native void regPullMsgCb(@ByVal FnCbInt cb);

	/**
	* \brief 设置监听数据库升级完成的回调
	* @param [out] cb 0代表开始 1代表升级完成 2升级失败
	*/
	public native void regDbUpdatedCb(@ByVal FnCbInt cb);

	/**
	* \brief 设置监听数据库升级完成的回调，带进度条
	* @param [out] cb  _1：0代表开始 1代表升级完成 2升级失败 3升级进行中 _2升级进行中时使用，进度0代表0%，100代表100%
	*/
	public native void regDbUpdatedProcessCb(@ByVal FnCbIntLong cb);

	/**
	* \brief 重新登录时推送
	* @param [out] cb  _1 错误标示,  _2用户ID
	*/
	public native void regReLoginCb(@ByVal FnCbIntLong cb);

	/**
	* \brief 登陆跳转url,返回code推送
	* @param [out] cb _1 暂时不用, _2 返回信息
	*/
	public native void regOAuthInfoCb(@ByVal FnCbIntStr cb);

	/**
	* \brief 版本升级推送
	* @param [out] cb 版本升级信息结构 见packet.h
	*/
	public native void regUpgrageCb(@ByVal FnCbUpgradeInfo cb);

	/**
	* \brief 监听服务器端推送的Qrcode字符串
	* @param [out] cb Qrcode string 字符串代表推送的二维码QrCode的string
	*/
	public native void regScanQrCb(@ByVal FnCbScanQrInfo cb);

	/**
	* \brief 获取是否有后台请求
	* @param [out] cb 结果回调 _1 错误信息 0:成功，_2 返回结构体信息 如果SUBTYPE 是5 需要获取adminName 如果是6获取status
	*/
	public native void regGetServerRequst(@ByVal FnCbIntBifactorSt cb);
	/*****************************************请求接口*******************************************/

	/**
	* \brief 快速注册
	* @param [in] server 传入服务器地址，域名或IP均可
	* @param [in] name 用户昵称
	* @param [in] account 传入注册账号 如果是手机账户格式为“0086158********”
	* @param [in] passwd 密码
	* @param [out] cb 传入接收结果回调 _1错误信息  _2超时
	*/
	public native void quickRegister(@StdString  String server, @StdString  String name, @StdString  String account, @StdString  String passwd, @ByVal FnCbError cb);

	/**
	* \brief 获取注册验证码
	* @param [in] server 服务器或邀请码
	* @param [in] account 传入注册账号 目前只支持手机注册 手机账户格式为“0086********”
    * @param [in] type 1.获取手机号注册验证码 2.获取手机号登录验证码 3.更换手机获取验证码
	* @param [out] cb 传入接收结果回调 _1错误信息  _2超时
	*/
	public native void getRegCode(@StdString  String server, @StdString  String account, @Cast("int8") byte type, @ByVal FnCbErrInt cb);

	/**
	* \brief 注册用户
	* @param [in] regCode 验证码
	* @param [in] account 注册账号 手机账户格式为“0086158********”
	* @param [out] cb 传入接收结果回调  _1错误信息 _2如果是通过邀请码注册，返回邀请码创建者ID
	*/
    public native void signup(@StdString  String regCode, @StdString  String account, @ByVal FnCbErr2Long cb);

	/**
	* \brief 注册用户扩展，可返回我的客服信息
	* @param [in] regCode 验证码
	* @param [in] account 注册账号 手机账户格式为“0086158********”
	* @param [out] cb 传入接收结果回调  _1错误信息 _2如果是通过邀请码注册，返回邀请码创建者ID _3客服数据 _4邀请码好友添加开关
	*/
	public native void signupEx(@StdString  String regCode, @StdString  String account, @ByVal FnCbErrLongLongStrByte cb);

	/**
	* \brief 同时设置昵称和密码(signup后调用)
	* @param [in] name 用户名
	* @param [in] passwd 密码
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setNameAndPasswd(@StdString  String name, @StdString  String passwd, @ByVal FnCbError cb);
	
	/**
	* \brief 获取重置密码验证码
	* @param [in] server 服务器
	* @param [in] account 传入注册账号 如果是手机账户格式为“0086********”
	* @param [out] cb 传入接收结果回调 _1错误信息  _2超时
	*/
	public native void getResetPwCode(@StdString  String server, @StdString  String account, @ByVal FnCbErrInt cb);

	/**
	* \brief 重置密码
	* @param [in] regCode 验证码
	* @param [in] user    传入用户名，为空代表不改名
	* @param [in] pwd	 传入新密码
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void resetPasswd(@StdString  String regCode, @StdString  String user, @StdString  String pwd, @ByVal FnCbError cb);
		
	/**
	* \brief 获取密码复杂度
	* @param [in] cb 传入接收结果回调 _1错误信息
	*  _2密码规则: 
	*	高8位代表最小长度
	*	低8位，按照最低位开始，依次代表:(1代表必须，0 表示可选)
	*	1. 是否必须有数字
	*	2. 是否必须有小写字母
	*	3. 是否必须有大写字母
	*	4. 是否必须有英文字母
	*	5. 是否必须有字符(特殊字符)
	*	6. 是否允许注册(1允许，0不允许)
	*/
	public native void getPasswordRule(@ByVal FnCbErrInt cb);

	//////////////////////////////////////////////////////////////////////////
	//	登录相关接口

	/**
	*  \brief 预登录
	* @param [in] server 传入服务器地址，域名或IP均可
	* @param [out] cb 传入接收结果回调 _1错误信息  _2预登陆返回json
	* @return	int64 返回当前localID，用于取消该次执行
	*/
	public native @Cast("int64") long prelogin(@StdString  String server, @ByVal FnCbErrStr cb);
	/**
	*  \brief 登录 loginSpecial为PC专用接口，其他客户端不要使用
	* @param [in] user 传入用户名 如果是手机账户格式为“0086158********”
	* @param [in] pwd 传入密码
	* @param [in] server 传入服务器地址，域名或IP均可
    * @param [in] userType  1-7为账号密码登录 1.手机  2.qq 3.邮箱  4.豆豆号 5.身份证, 6.豆豆账号 7.自定义账号   96.手机号验证码登录 97.更换手机验证码登录 -1 二维码扫描登录专用 使用user传userid  pwd传票据进行登录，login接口改造
	* @param [in] thirdParam 第三方参数json
	* @param [out] cb 传入接收结果回调 _1错误信息  _2 用户Id  _3 帐号被锁定剩余时长   _4 登录失败返回1102错误时的验证码路径 返回100001575错误(更换设备)为手机号，成功时返回我的客服数据
	* @return	int64 返回当前localID，用于取消该次执行
	*/
	public native @Cast("int64") long login(@StdString  String user, @StdString  String pwd, @StdString  String server, @Cast("int8") byte userType,
							@ByVal FnCbErrLongLongStr cb);

	public native @Cast("int64") long loginEx(@StdString  String user, @StdString  String pwd, @StdString  String server, @Cast("int8") byte userType,
			@StdString  String thirdParam, @ByVal FnCbErrLongLongStr cb);

	public native @Cast("int64") long loginSpecial(@StdString  String user, @StdString  String pwd, @StdString  String server, @Cast("int8") byte userType,
			@ByVal FnCbErrLongLongStr cb);

	//离线转在线接口
	/**
	 * @param [in] server 传入服务器地址，域名或IP均可
	 * @param [out] cb 传入接收结果回调 _1错误信息  _2用户Id  _3 帐号被锁定剩余时长  _4 返回1102错误时的验证码路径
	 * @return	int64 返回当前localID，用于取消该次执行
	 */

	public native @Cast("int64") long offLineToLogin(@StdString  String server,@ByVal FnCbErrLongLongStr cb);
	//登录

	/**
	* \brief 自动登录（不用填密码）
	* @param [in] userid 传入用户ID
	* @param [in] server 传入服务器地址，域名或IP均可
	* @param [out] cb 传入接收结果回调 _1错误信息  _2用户Id  _3 帐号被锁定剩余时长  _4 返回1102错误时的验证码路径
	* @return	int64 返回当前localID，用于取消该次执行
	*/
	public native @Cast("int64") long autoLogin(@Cast("int64") long userid, @StdString  String server, @ByVal FnCbErrLongLongStr cb);

	/**
	* \brief 离线登录
	* @param [in] userId 用户id
	* @param [in] pwd 密码
    * @param [in] elogo 服务器标识
	* @param [out] cb 传入接收结果回调 _1错误信息 
	*/
    public native void offlineLogin(@Cast("int64") long userId, @StdString  String pwd, @StdString  String elogo, @ByVal FnCbError cb);
	/**
	 * \brief 无密码登录
	 * @param [in] userId 用户id
	 * @param [in] elogo 服务器标识
	 * @param [out] cb 传入接收结果回调 _1错误信息
	 */
	public native void offlineLoginNoPwd(@Cast("int64") long userId, @StdString  String elogo, @ByVal FnCbError cb);

	/**
	 * \brief 验证密码是否正确
	 * @param [in] userId 用户id
	 * @param [in] pwd 密码
	 * @param [in] elogo 服务器标识
	 * @param [out] cb 传入接收结果回调 _1错误信息
	 */
	public native void loginPwdVerify(@Cast("int64") long userId, @StdString  String pwd, @StdString  String elogo, @ByVal FnCbError cb);
		
	/**
	* \brief 登出
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void logout(@ByVal FnCbError cb);

	/**
	* \brief 第三方认证登出 PC专用 用于第三方应用认证退出客户端程序时候调用
	*
	*/
	public native void appAuthLogout(@ByVal FnCbError cb);

	/**
	* \brief 本地登出
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void logoutLocal(@ByVal FnCbError cb);

	/**
	* \brief 取消登录
	* @param [in] operateid 传入对应登录操作的ID
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void abortLogin(@Cast("int64") long operateid, @ByVal FnCbError cb);

	/**
	* \brief 验证登录验证码或者获取下一张验证码
	* @param [[in] account 传入登录账号
	* @param [[in] code	 传入验证码内容 code为空则获取下一张验证码
	* @param [[out] cb 传入接收结果回调 _1错误信息  _2 下一张验证图片
	*/
	public native void verifyImgCode(@StdString  String account, @StdString  String code, 
								@ByVal FnCbErrStr cb);

	/**
	* \brief 获取安全中心URL
	* @param [in] server 传入企业服务器
	* @param [out] cb 传入接收结果回调 _1错误信息  _2 url
	*/
	public native void getSecUrl(@StdString  String server, @ByVal FnCbErrStr cb);

	/**
	* \brief 修改密码
	* @param [in] oldPw 传入旧密码
	* @param [in] newPw 传入新密码
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void changePassword(@StdString  String oldPw, @StdString  String newPw, @ByVal FnCbError cb);

	/**
	* \brief 获取CLIENTKEY
	* @param [out] cb 传入接收结果回调  _1错误信息  _2 clientkey
	*/
	public native void getClientKey(@ByVal FnCbErrStr cb);

	/**
	* \brief 获取绑定手机验证码
	* @param [in] phone 手机号
	* @param [in] language 语言
	* @param [out] cb 传入接收结果回调  _1错误信息  _2超时重发时间  _3注册ID
	*/
	public native void getBindPhoneCode(@StdString  String phone, @StdString  String language, @ByVal FnCbErrIntLong cb);

	/**
	* \brief 通过获取的验证码绑定手机
	* @param [in] phone 手机号
	* @param [in] code 验证码
	* @param [in] registryID 获取验证码时返回的ID
	* @param [out] cb 传入接收结果回调  _1错误信息 0成功 100参数不正确 120账号不存在 381未指定接受者  382未指定接收者类型 
	*				383验证码已过期 384验证码不正确  385发送间隔时间太短 386发送失败  387：未发送过验证码 
	*/
	public native void bindPhone(@StdString  String phone, @StdString  String code, @Cast("int64") long registryID,  @ByVal FnCbError cb);

	/**
	* \brief 绑定邮箱
	* @param [in] mail  邮箱号
    * @param [in] lang  语言 zh_cn:中文 en_us:英文
	* @param [out] cb 传入接收结果回调  _1错误信息 0:成功，100:参数错误，120: 帐号不存在，510:帐号已被使用
	*/
    public native void bindMail(@StdString  String mail, @StdString  String lang, @ByVal FnCbError cb);

	/**
	* \brief 获取手机或邮箱验证码验证码
	* @param [in] type  1.手机  2.邮箱
	* @param [in] mailOrPhone 邮箱或手机
	* @param [in] lang 语言
	* @param [out] cb 传入接收结果回调  _1错误信息  _2超时重发时间 _3唯一注册ID
	*/
	public native void getVerifyMailOrPhoneCode(@Cast("int8") byte type, @StdString  String mailOrPhone, @StdString  String lang, @ByVal FnCbErrIntLong cb);

	/**
	* \brief 验证码邮箱或手机验证码
	* @param [in] type  1.手机  2.邮箱
	* @param [in] code 验证码
	* @param [in] registryId 唯一注册ID
	* @param [out] cb 传入接收结果回调  _1错误信息 0成功 120: 帐号不存在		381: 未指定接收者
										382: 未指定接收者类型            	383: 验证码已过期
										384: 验证码不正确 					385: 发送间隔时间太短
										386: 发送失败 						387：未发送过验证码
	*/
	public native void verifyMailOrPhoneCode(@Cast("int8") byte type, @StdString  String code, @Cast("int64") long registryId,@ByVal FnCbError cb);
	
	/**
	* \brief 获取登录信息。(同步接口)
	* @param [out] data  用户传入的内存地址，获取成功后，把信息拷贝到此内存中
	* @param [in] len 用户传入内存地址的长度
	* @param [return] 返回0代表获取失败，否则，返回获取数据的实际长度
	*/
	public native int getLoginInfo(@Cast("uint8*") BytePointer data, int len);

	/**
	* \brief 获取Oauth 授权码
	* @param [in] oauth oauth请求结构，见packet.h
	* @param [out]  cb 传入接收结果回调  _1错误信息 _2授权码
	*/
	public native void getLoginAuthCode(@ByRef oauthReq oauth, @ByVal FnCbErrStr cb);
	/**
	*根据用户ID向用户发送短信
	*/
	public native void getqVerifyCodes(@ByRef qVerifyCodes arg0, @ByVal FnCbLongStringMap cb);

	/**
	*根据新朋友的用户ID向朋友发送添加好友的短信，好友提醒
	*/
	public native void sendbuddyReminder(@ByVal LongVector userIds, @ByVal FnCbLongStringMap cb);

	/**
	*\brief    获取授权凭证
	*@param [in] appID         应用ID
	*@param [in] accountType   登陆账号类型
	*@param [in] appSecret     企业应用密钥一个凭证,如果appSecret为空，表示获取授权码，如果不为空表示获取授权凭证
	*@param [out] code  cb 传入接收结果回调  _1错误信息 _2授权凭证
	*/
	public native void getAuthAccessToken(@Cast("int64") long appID, @StdString  String accountType, @StdString  String appSecret, @ByVal FnCbErrStr cb);
	/**
	*\brief 校验accessToken是否过期
	*@param [in] appID         应用ID
	*@param [in] type		  10,校验accessToken是否过期 11刷新accessToken,获得新的accessToken
	*@param [in] accessToken   授权凭证（accessToken，上一步骤获取的）
	*@param [out] code  cb 传入接收结果回调  _1错误信息 _2新的授权凭证 type = 11时使用
	*/
	public native void checkOrRefreshAccessToken(@Cast("int64") long appID, int type, @StdString  String accessToken, @ByVal FnCbErrStr cb);
	/**
	*\brief 根据应用授权凭证获取用户信息
	*@param [in] appID         应用ID（appID）
	*@param [in] accessToken   app授权凭证
	*@param [out] code  cb 传入接收结果回调  _1错误信息 _2见packet.h
	*/
	public native void getAuthUserBean(@Cast("int64") long appID, @StdString  String accessToken, @ByVal FnCbErrAuthUserBean cb);
	/**
	* \brief   根据网址链接获取授权码，返回的授权码会拼接到网址后面返回,格式为&auth_code=授权码
	* 如:入参:http(s) ://vrv.linkdood/platform/api2/oauth/authorize?id=APPID&st=STATE&sc=SCOPE&uri=xxxxxx
	*    出参:http(s) ://vrv.linkdood/platform/api2/oauth/authorize?id=APPID&st=STATE&sc=SCOPE&uri=xxxxxx&auth_code=yyyyyy
	*@param [in] webSite       网址链接
        webSite中必须有"/platform/api2/oauth/authorize?id=","&st=","&sc=","&uri="这些字段,否则认为不是合法的网址，返回错误，code值对应err_sdk_paramInvalidat宏表示的值；
	*@param [out] code  cb 传入接收结果回调  _1错误信息 _2授权码
	*/
	public native void getWebSiteAuth(@StdString  String webSite, @ByVal FnCbErrStr cb);
	/**
	*\brief 对升级包进行签名认证
	*\Param[in] filePath 下载的升级包文件本地路径
	*\Param[in] certPath 证书路径
	*\Param[in] dsg      签名
	*@return  true 验证通过 false 验证失败
	*/
	public native @Cast("bool") boolean verifyPKSign(@Cast("const char*") BytePointer filePath, @Cast("const char*") BytePointer certPath, @StdString  String dsg);
	/**
	*\brief 获取证书过期时间
	*/
	public native @Cast("int64") long getCertOutDate();
	
	/**
	*\brief 获取证书使用者名称
	*/
	public native @StdString  String getCertOrgName(@StdString  String elogo/*=""*/);
	public native @StdString  String getCertOrgName();

    /**
    * \brief 旧版本注册用户
    * @param [in] regCode 验证码
	* @param [in] user    传入用户名，建议使用真实姓名
	* @param [in] pwd	 传入注册密码
	* @param [out] cb 传入接收结果回调  _1错误信息 _2如果是通过邀请码注册，返回邀请码创建者ID
	*/
    public native void signupOld(@StdString  String regCode, @StdString  String user, @StdString  String pwd, @ByVal FnCbErrLong cb);

	/**
	* \brief 扫码登录后台
	* @param [in] qId		二维码标识
	* @param [in] serverUrl	后台服务Url
	* @param [in] type		操作类型 1.扫描检测 2.二维码登录
	* @param [out] cb 传入接收结果回调  _1错误信息 _2错误描述
	*/
	public native void scanCodeLogin(@Cast("int64") long qId, @StdString  String serverUrl, @Cast("int8") byte type, @ByVal FnCbErrStr cb);
	/**
	*\brief 获取最后一次心跳成功时间
	*@param [out] lastHBTime最后一次心跳成功时间 13位Unix时间戳，精确到毫秒
	*/
	public native @Cast("int64") long getLastHBTime();

	/**
	* \brief 登录前操作
	* @param [in] type		操作类型
	* @param [in] func		方法名
	* @param [in] value		json参数 透传
	* @param [out] cb 传入接收结果回调  _1错误信息 _2错误描述 _3返回的json结果
	*/
	public native void beforeLogin(@Cast("int8") byte type, @StdString  String func, @StdString  String value, @ByVal FnCbErr2Str cb);


	/**
	* \brief PC端二维码扫描获取二维码信息接口 仅PC
	* @param [in] elogo 		服务器elogo
	* @param [out] cb 传入接收结果回调  _1错误信息 _2错误描述 _3返回的json结果 二维码数据信息
	*/
	public native void getPCLoginQrcode(@StdString  String elogo, @ByVal FnCbErr2Str cb);

	/**
	* \brief PC端二维码扫描获取二维码状态接口 仅PC
	* @param [in] QrCodeId 		二维码唯一id
	* @param [in] qrCodeIdEv 	二维码唯一id加密值（二维码唯一id +盐后再MD5加密）
	* @param [out] cb 传入接收结果回调  _1错误信息 _2错误描述 _3返回的json结果 票据信息-登录成功才有
	*/
	public native void getQrLoginStatus(@StdString  String QrCodeId,@StdString  String QrCodeIdEv, @ByVal FnCbErr2Str cb);


	/**
	* \brief 获取二维码状态是否已被扫描登录信息 仅移动端
	* @param [in] elogo 服务器elogo
	* @param [in] QrCodeId	 二维码唯一id，扫描二维码获取到
	* @param [out] cb 传入接收结果回调  _1状态信息 
	*/
	public native void scanPCLoginQrCode(@StdString  String elogo, @StdString  String QrCodeId, @ByVal FnCbErrStr cb);

	/**
	* \brief 确认登录取消登录二维码接口 仅移动端
	* @param [in] QrCodeId	 二维码唯一id，扫描二维码获取到
	* @param [in] confirm 确认取消
	* @param [out] cb 传入接收结果回调  _1错误信息 _2错误描述  
	*/
	public native void confirmPCLogin(@StdString  String QrCodeId, @Cast("int8") byte confirm, @ByVal FnCbErrStr cb);
	

	/**
	* \brief 校验最后一次PC扫码登录设备接口
	* @param [in] userid	 用户userid
	* @param [in] MacCode	 MAC地址 
	* @param [out] cb 传入接收结果回调  _1错误信息 _2错误描述  
	*/
	public native void checkQrLoginDevice(@Cast("int64") long userid,@StdString  String MacCode, @ByVal FnCbErrStr cb);

	/**
	* \brief PC端快速登录接口
	* @param [in] userid	 用户userid
	* @param [in] pcType  pcType  PC设备类型 1-windows，2-MAC
	* @param [out] cb 传入接收结果回调  _1错误信息_2错误描述 _3返回的json结果  用户信息数据
	*/
	public native void pcQuickLogin(@Cast("int64") long userid, @Cast("int8") byte pcType,@ByVal FnCbErr2Str cb);
	/**
	* \brief 通用接口
	* @param [in] 用户认证信息
	*            info说明：int8 logout_mode;                        //注销模式   1:注销用户密码认证，自动注销模式 2:申请注销密码认证，手动注销模式
	*					   int8 type;                               ///类型 4.用户账号注销校验（校验能不能注销）
																			5.用户注销（mode=1不需要审核，mode=2为发送申请注销请求到服务器）
	                                                                        6.查询注销状态（管理员审核客户端通过这个知道服务器的进度）
	                                                                        7.取消注销申请（所谓的取消注销就是取消管理员审核，注销是不可逆的）
	*					   std::string password;                    ///密码
	*                      std::string authenticationCode           ///type为5必须传入
	* @param [out] cb 传入接收结果回调  _1错误码:
												|#type = 4:                                                  #|   |#type = 6                         #|   |#type = 7                        #|
												|#100004500 成功，通过                                       #|   |#100004525  不存在待审核注销申请  #|   |#100004500  成功，通过           #|                                        
												|#100004520 接口异常、失败                                   #|   |#100004526  存在待审核注销申请    #|   |#100004525  不存在待审核注销申请 #|
												|#100004521 用户不存在                                       #|   
												|#100004522 密码错误                                         #|   |#type =5
												|#100004523 类型不合法                                       #|   |#100004524 注销验证码验证失败
												|#100004527 禁止注销/禁止申请注销                            #|
												|#100004528 注销(mode=1)/申请注销(mode=2)对应注销配置项不匹配#|
												|#100004530 账户被锁定                                       #|
												|#message 结果码说明                                         #|
												|#验证成功返回验证码,为authenticationCode                    #|
	<p>
	*									_2结果码说明 _3验证成功返回验证码
	*/
	public native void getLogoutCode(@ByRef UserAuthenticationInfo info, @ByVal FnCbErr2Str cb);
	/**
	* \brief 用户账号注销
	* @param [in] _1.是否是当前设备主动发起的注销请求 
	*							type = 1 当前设备主动发起
	*							type = 2 服务器推送,仅在服务器推送  OnlineState.flags = 15 号消息时使用 (回调注册接口为regPresentCb)
	*                           type现在不用了，只要调这个接口就删除本地数据
	*			_2.注销用户的验证码，type=1时 该参数不能为空，由getLogoutCode 函数获得,type=2 时 将该参数值设置为空。
	* @param [out] cb 传入接收结果回调  _1错误码
	*									0:成功
	*									100004520:接口异常
	*									100004521:用户不存在
	*									100004524:注销验证码验证失败
	*/
	public native void setLogoutAccount(int type,@StdString  String authenticationCode, @ByVal FnCbError cb);

	/**
	*\brief PC端浏览器授权认证登录认证,需要认证通过豆豆PC客户端才能将clientKey以及用户信息返回给浏览器端,auth统一认证功能,只有pc端浏览器使用
	* @param [in] appId 公共号ID客户端提供
	* @param [in] loginToken  auth统一认证token
	*@param [out] cb 进度回调 _1错误信息 0:成功，100:参数错误，11100:内部错误; 100013076: loginToken认证失败
	*/
	public native void authPcBrowserLoginTokenCheck(@Cast("int64") long appId, @StdString  String loginToken, @ByVal FnCbError cb);

	/*
	*\brief 	JssdkAuth传入参数与服务端校验，合法时存入数据库，appID唯一键重复时会更新已有数据 [12/1/2020 admin]
	* @param[in] jssdkAuth  jssdk结构体
	*			int64 appID;
	*			int64 timeStamp;
	*			std::string noncestr;
	*			std::string url;
	*			std::string signature;
	*			std::vector<std::string> jsApiList;
	*@param[out] cb 进度回调 _1错误信息 0:成功
	*/
	public native void configJssdkAuthLocal(@ByRef JssdkAuthInfo jssdkAuth, @ByVal FnCbError cb);

	/*
	*\brief 	JssdkAuth传入参数与存储在数据库中的信息进行匹配，两个小时之内的鉴权信息才能成功 [12/1/2020 admin]
	* @param[in] jssdkAuth  jssdk结构体，校验时传入下面两个参数，其余参数默认
	*	In:		jssdkAuth.url
	*				jssdkAuth.jsApiList
	*@param[out] cb 进度回调 _1错误信息 
	*										100013102:成功
	*										100:参数错误
	*										11100:内部错误
	*										100013103:令牌无效令牌过期
	*										100013104:url域名无效域名验证错误code
	*										100013105:签名验证失败验证签名，验证不通过验证签名失败
	*										100013106:jsApiList接口验证错误
	*/
	public native void checkJssdkAuthLocal(@ByRef JssdkAuthInfo jssdkAuth, @ByVal FnCbError cb);

	/**
	* \brief 第三方用户标识鉴权新增，根据idToken获取用户userId
	* @param [in] idToken 用户token，例{"id_token":"abcd"}
	* @param [out] cb 传入接收结果回调  _1错误码
	*										   0:成功
	*                                          100:未定义的type类型
	*                                          11100:调用底层接口失败
	*										   100008031:失败
	*										   100008032:系统出现异常
	*                                  _2返回user结果
	*/
	public native void thirdPartyAuthbyToken(@StdString  String idToken, @ByVal FnCbErrStr cb);
	
	
		/**
	*\brief 双因子登录请求
	* @param [in] nLoginType 登录认证类型 1后台 目前只有1
	* @param [in] nStatus  用户点击按钮状态 1同意 2拒绝
	* @param [in] nMessageID  消息ID
	* @param [in] nDeviceType  处理该请求的设备
	* @param [in] szUserName  管理员名称
	*@param [out] cb 结果回调 _1错误信息 0:成功，100:未知type，11100:内部失败 100008032:授权已失效 100008000:服务异常
	*/
	public native void SetBifactorLogin(@Cast("int8") byte nLoginType, @Cast("int8") byte nStatus, @Cast("int64") long nMessageID, @Cast("int8") byte nDeviceType, @StdString  String szUserName, @ByVal FnCbError cb);

	/**
	* \brief 客户端接口 (仅M盒二维码扫描登录)
	* @param [in] deviceflag	 1:PC 包括 windows MAC  2:移动客户端，包括安卓，IOS
	* @param [in] optflag	 操作 针对 (1--PC)：1.PC客户端向elogo查找服务请求elogo查询二维码  ，2：PC客户端从豆豆服务器获取了登陆二维码之后,向elogo查询服务器上报
	*                                                        (2--移动客户端)：1.手机客户端将本服务器的elogo上报给查询服务器
	* @param [in] param1	 根据上面入参 deviceflag-optflag，1-1 MAC地址      1-2 elogoQrId-Elogo查询二维码id    2-1 elogoQrId-Elogo查询二维码id
	* @param [in] param2	 根据上面入参 deviceflag-optflag，1-1 Ip地址            1-2 loginQrCode-登陆二维码             2-1 elogo 服务器elogo
	* @param [in] param3	 根据上面入参 deviceflag-optflag，只针对 2-1 MAC地址，checkCode,其他传空""即可
	* @param [out] cb 传入接收结果回调  _1错误信息码 (11020001参数错误  11020002生成失败) _2错误描述 _3 具体操作获取到的结果
	*/
	public native void MQrCodeQuery(@Cast("int8") byte deviceflag, @Cast("int8") byte optflag, @StdString  String param1, @StdString  String param2, @StdString  String param3,@ByVal FnCbErr2Str cb);

	/**
	* \brief 客户端接口 (仅M盒二维码扫描登录)
	* @param [in] deviceflag	 1:PC 包括 windows MAC  2:移动客户端，包括安卓，IOS
	* @param [in] optflag	 操作 针对 (1--PC)：1.PC客户端周期向中转服务器请求查询结果
	*                                                        (2--移动客户端)：1.手机客户端周期向中转服务器中期查询PC是否上报了登陆二维码
	* @param [in] elogoQrId	  elogoQrId-Elogo查询二维码id
	* @param [out] cb 传入接收结果回调  _1错误信息码 (11020001参数错误  11020002生成失败) _2错误描述 _3 具体操作获取到的结果，如果错误返回为空
	*/
	public native void getMCircleQrCode(@Cast("int8") byte deviceflag, @Cast("int8") byte optflag, @StdString  String elogoQrId, @ByVal FnCbErr2Str cb);
	/**
	* \brief 打开密码校验界面，民情通接口
	* @param [in] 用户密码
	* @param [out] cb  传入接收结果回调  _1错误码(0验证成功 100004522 密码错误 100004530 账号被锁定)
	 [3/9/2021 zhuohc]
	*/
	public native void showVerifyUserPassword(@StdString  String passwd, @ByVal FnCbError cb);

	/********************************获取用户通用token******************************************
	*返回：@param cb [out]传入接收结果回调  _1错误信息，_2 CommonTokenRsp(通用token信息)
	*/

	/********************************校验通用token(通过用户通用token获取用户ID)******************************************
	*参数：@param strCommonToken	[in]用户通用token
	*返回：@param cb	[out]传入接收结果回调  _1错误信息，_2 CommonTokenRsp(通用token信息)
	*/
}
 /*namespace service*/

// Parsed from interface/IRtcService.h

// #pragma once

//#include "../model/LoginInfo.h"
// #include "../extModel/rtcpacket.h"
// #include "../extModel/mrtcpacket.h"
// #include "../model/Msg.h"
// #include "IService.h"
//#include "../model/Packet.h"

// #include <string>

// #define VER_IRTC INTERFACE_VERSION(1,0)

	@Namespace("service") public static class IRtcService extends IService {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public IRtcService(Pointer p) { super(p); }
	

		/*****************************************注册通知回调*******************************************/
		/**
		*注册音视频事件回调
		* @param [out] _1 rtc事件 见model::channelEvent注释
		*/
		public native void regChannelEventCb(@ByVal FnCbChannelEvt cb);

		/**
		*注册声网推送房间成员
		* @param [out] _1 声网房间成员消息
		*/
		public native void regRoomMemCb(@ByVal FnCbMsg cb);

		/**
		*注册版本不同事件回调
		* @param [out] _1 rtc事件 见model::channelEvent注释
		*/
		public native void regExtraEventNotifyCb(@ByVal FnCbByteStrStr cb);

		/*****************************************请求接口*******************************************/

		/**
		* 邀请成员加入音视频会议
		* @param [in] channelRequest 邀请信息 见channelRequest 注释
		* @param [out] cb 传入接收结果回调  _1错误信息
		*/
		public native void createChannel(@ByRef channelRequest arg0, @ByVal FnCbError cb);
		/**
		*接受或拒绝音视频会议邀请
		* @param [in] rejectOrAccept 接收或拒绝请求信息 见rejectOrAccept 注释
		* @param [out] cb 传入接收结果回调  _1错误信息
		*/
		public native void acceptOrReject(@ByRef rejectOrAccept arg0, @ByVal FnCbError cb);
		/*
		* 关闭音视频会议
		* @param[out] cb 传入接收结果回调  _1错误信息
		*/
		public native void leaveChannel(@ByVal FnCbError cb);
		/*
		*请求加入音视频会议
		* @param[in] joinChl 加入会议请求信息 见joinChl 注释
		* @param[out] cb 传入接收结果回调  _1错误信息
		*/
		public native void joinChannel(@ByRef joinChl arg0, @ByVal FnCbError cb);
		/*
		*设置会议信息
		* @param[in] setConfer 设置会议信息 见setConfer 注释
		* @param[out] cb 传入接收结果回调  _1错误信息
		*/
		public native void setConferenceInfo(@ByRef setConfer arg0, @ByVal FnCbError cb);
		/*
		* 获取会议信息
		* @param[out] cb 传入接收结果回调  _1错误信息
		*/
		public native void getConferenceInfo(@ByVal FnCbErrGetConfer cb);
		/*
		* 音视频切换
		* @param[in]  type 要切换的类型 1:音频 2:视频
		* @param[out] cb 传入接收结果回调  _1错误信息
		*/
		public native void switchChannel(int type,@ByVal FnCbError cb);
		/*
		* 获取打洞服务地址 [废弃:20180919]
		* @param[out] cb 传入接收结果回调  _1错误信息 _2打洞服务器信息 见p2pServerInfo 注释
		*/
		public native void getStunServer(@ByVal FnCbErrGetAVServer cb);
		/*
		* AGORA声网相关服务接口
		* @param type 1,认证 2.呼叫 3.接听 4.重新申请subKey,5.outChat,6,updataID
		* @param channnelID channelID
		* @param chatTime 通话时间 当type = 5时需要写
		* @param uuid 声网id type = 6时填
		* @param[out] cb  _1 subkey _2 vendorKey
		*/
		public native void getAgoraFunc(@Cast("int8") byte type, @Cast("int64") long channnelID, @Cast("int64") long chatTime, @Cast("int64") long uuid, @ByVal FnCbErrintStrStr cb);
		/*
		* 获取打洞服务地址 同步接口 见getStunServer注释 [废弃:20180919]
		*/
		public native void getStunServerSync(@ByRef p2pServerInfo arg0);

		/**
		* \brief 获取打洞服务地址列表 （同步接口）
		* @param [out]  stunList 打洞信息;
		*/
		public native void getStunServerList(@ByRef P2pServerInfoVector stunList);

		/*
		* 创建四人会议
		* @param[in]  presenterID 四人会议id 
		* @param[out] cb 传入接收结果回调  _1错误信息
		*/
		public native void makePresenter(@Cast("int64") long presenterID, @ByVal FnCbError cb);

		/*
		* 通用事件call
		* @param[in] eventType 事件类型
		* @param[in] reserveJson 保留字段
		* @param[in] strInfo   信息描述
		* @param[out] cb 传入接收结果回调  _1错误信息
		*/
		public native void extraEventCall(@Cast("int8") byte eventType, @StdString  String reserveJson, @StdString  String strInfo, @ByVal FnCbError cb);
		
		/*
		* 获取通用信息
		* @param[in] command 信息类型命令
		* @param[out] cb ErrorInfo 传入接收结果回调  _1错误信息
		* @param[out] cb string 返回command要求的信息
		*/
		public native void getCommonInfo(@StdString  String command, @ByVal FnCbErrStr cb);



		/*****************************************注册多点通知回调*******************************************/
		/**
		* 注册多点事件回调
		* @param [out] _1 multi_rtc事件 见model::multiRtcEvent注释
		*/
		public native void regMultiEventCb(@ByVal FnCbMultiRtcEvent cb);


		/*****************************************请求多点接口*******************************************/

		/**
		* 获取多点服务信息
		* @param [out] multiServer 服务信息 multiServer.turnAddr存放服务地址,取不到则返回空
		*/
		public native void getMultiServerSync(@ByRef p2pServerInfo multiServer);

		/**
		* 多点请求
		* @param [in] multiRequest 呼叫信息 见multiRequest 注释
		* @param [out] cb 传入接收结果回调  _1错误信息
		*/
		public native void multiTalkRequest(@ByRef multiRequest arg0, @ByVal FnCbError cb);
		/**
		* 扩展请求
		* @param [in] type 请求类型
		* @param [in] cmdJson 请求数据
		* @param [in] extendJson 扩展数据
		* @param [out] cb 传入接收结果回调  _1错误信息
		*/
		public native void multiExtraRequest(@Cast("int8") byte type, @StdString  String cmdJson, @StdString  String extendJson, @ByVal FnCbError cb);
	
	}





// Parsed from interface/IChatService.h

// #pragma once

// #include "../model/Msg.h"
// #include "../model/Packet.h"
// #include "../extModel/packet.h"
// #include "../model/SDKTypes.h"
// #include "../model/Chat.h"
// #include "IService.h"

// #include <string>

// #define VER_IChatService INTERFACE_VERSION(1,0)

@Namespace("service") public static class IChatService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IChatService(Pointer p) { super(p); }


	/*****************************************注册通知回调*******************************************/

	/**
	* \brief 监听最近回话头像更新
	* @param [out] cb _1 传入目标ID，人或者群  _2 传入头像
	*/
	public native void regChatHeadImgUpdateCb(@ByVal FnCbLongStr cb);

	/**
	* \brief 设置监听新聊天消息的回调
	* @param [out] cb _1 消息结构的智能指针
	*/
	public native void regMsgNoticeCb(@ByVal FnCbMsg cb);

	/**
	* \brief 设置监听新透传消息的回调
	* @param [in] cb _1 消息结构的智能指针
	*/
	public native void regTransMsgNoticeCb(@ByVal FnCbMsg cb);

	/**
	* \brief 设置监听消息输入状态的回调
	* @param [out] cb _1 targetId, _2 发送时间 _3输入标识 0.开始输入 1.结束输入
	*/
	public native void regMessageInputStateCb(@ByVal FnCb2LongByte cb);
	
	/**
	* \brief 设置监听离线消息的回调
	* @param [out] cb _1 离线消息集合
	*/
	public native void regOfflineMsgCb(@ByVal FnCbOfflineMsgVector cb);

	/**
	* \brief 监听会话列表更新通知
	* @param [in] cb _1 传入列表标志
	 * 全部更新:
	*	0x01　第一个包,　　 需要清理原来的数据
	*	0x02  中间的包，　　在原来的数据后面追加
	*	0x04  最后的包，　　最近会话发送完毕
	* 部分更新:
	*   0x08  更新
	*	0x10  新增
	*	0x20  删除
	* 全部删除
	*   0x40 删除所有最近联系人
	*  _2 传入会话集合
	*/
	public native void regRecontactCb(@ByVal FnCbIntChatVector cb);
	/**
	 * \brief  消息游标推送
	 * @param [out] cb 
	 * _1 userID int64 userID;  ///<本人用户ID
	 * _2 int64 targetID;///<目标ID(单聊人ID,群聊群组ID)
	 * _3 int64 maxReadID;///<所有设备中最大的消息已读ID
	 */
	public native void regMessageCursorCb(@ByVal FnCb3Long cb);

	/**
	* \brief  敏感词推送
	* @param [out] cb
	* _1 int64 flag;  ///操作类型 0.关闭过滤 1.打开过滤 2.禁止发送 3.更新敏感词  4.客户端本地策略过滤
	*/
	public native void regBadWordUpdateCb(@ByVal FnCbLong cb);


	/*****************************************请求接口*******************************************/

	/**
	* \brief 获取会话列表(同步接口)
	*/
	public native void getChatList(@ByRef ChatSharedVector recontacts);

	/**
	* \brief 移除会话
	* @param [in] targetid 传入会话对应的ID，群或者人 0为删除全部联系人
	* @param [out] cb  传入接收结果回调
	*/
	public native void removeChat(@Cast("int64") long targetId, @ByVal FnCbError cb);

	/**
	* \brief 发送消息，返回localid
	* @param [in] msg 传入消息
	* @param [out] cb  传入接收结果回调 _1 错误信息 _2 发送时间 _3消息ID _4敏感词
	* @param [out] pro  进度回调 参照fileService
	*/
	public native @Cast("int64") long sendMessage(@ByRef Msg msg, @ByVal FnCbErrLongLongBadWord cb, @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native @Cast("int64") long sendMessage(@ByRef Msg msg, @ByVal FnCbErrLongLongBadWord cb);

	/**
	* \brief 直接发送附件消息 支持文件，图片，九宫格。发送失败时，重发消息的localId和失败消息localId要一致,断点续传的话 一个文件的加密key要一致
	*
	*		 失败文件信息存在在消息的body中，格式为:
	*		[
			{
				"localPath": "",		//此字段总是存在且有值
				"remotePath" : "",		//此字段总是存在，为空时代表上传失败
				"srcLocalPath" : "",	//上传图片时，存在此字段
				"srcRemotePath" : ""	//上传图片时，存在此字段
			}
			]
			重发时，用户可以从两个localPath中获取上次发送的文件本地路径，不需要关心remotePath字段
	*
	* @param [in] msg 附件 MsgFileEx文件, MsgImgEx图片, MsgNineBlockEx九宫格
	* @param [out] cb  传入接收结果回调 _1 错误信息 _2 发送时间 _3消息ID _4敏感词
	* @param [out] pro  进度回调 参照fileService
	*/
	public native void sendAppendixMessage(@ByRef Msg msg, @ByVal FnCbErrLongLongBadWord cb, @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void sendAppendixMessage(@ByRef Msg msg, @ByVal FnCbErrLongLongBadWord cb);

	/**
	* \brief 插入消息
	* @param [in] msg 插入的消息结构体
	* @param [out] cb  传入接收结果回调 _1 错误信息 
	*/
	public native void insertMessage(@ByRef Msg msg, @ByVal FnCbError cb);

	/**
	* \brief 透传发送消息
	* @param [in] msg 传入消息
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2 发送时间 _3敏感词
	*/
	public native void transferMessage(@ByRef Msg msg, @ByVal FnCbErroneLongBadWord cb);

	/**
	* \brief 转发消息
	* @param [in] fromTaregetId 转发的消息的当前targetId
	* @param [in] toTargetId 转发的消息的接收targetId
	* @param [in] messageId 转发的消息ID
	* @param [in] userDef 客户端自定义内容，直接覆盖
	* @param [out] cb  _1  传入接收结果回调 _1 错误信息 _2 发送时间 _3消息ID _4敏感词
	*/
	public native void forwardMessage(@Cast("int64") long fromTargetId, @Cast("int64") long toTargetId, @Cast("int64") long messageId, @Cast("int32") int securityLevel, @ByVal FnCbErrLongLongBadWord cb);
	public native void forwardMessage(@Cast("int64") long fromTargetId, @Cast("int64") long toTargetId, @Cast("int64") long messageId, @Cast("int32") int timeZone, @Cast("int32") int securityLevel, @StdString  String userDef, @ByVal FnCbErrLongLongBadWord cb);

	/**
	* \brief 删除所有消息
	* @param [in] clearChatList 是否清空联系人列表
	* @param [in] cb  结果回调 _1错误信息
	*/
	public native void deleteAllMessage(@Cast("bool") boolean clearChatList, @ByVal FnCbError cb);

	/**
	* \brief 通过msgId删除消息
	* @param [in] targetid 传入会话对应的ID，群或者人
	* @param [in] msgs 传入要删除的消息ID集合 msgs为空，清空对应targetId的所有消息
	* @param [in] cb  结果回调 _1错误信息
	*/
	public native void deleteMessageById(@Cast("int64") long targetId, @ByRef LongVector msgIds, @ByVal FnCbError cb);

	/**
	* \brief 删除时间段消息
	* @param [in] targetid 传入会话对应的ID，群或者人 targetId为0，则针对所有用户
	* @param [in] beginTime 起始时间
	* @param [in] endTime 结束时间
	* @param [in] cb  结果回调 _1错误信息
	*/
	public native void deleteMessageByTime(@Cast("int64") long targetId, @Cast("int64") long beginTime, @Cast("int64") long endTime, @ByVal FnCbError cb);

	/**
	* \brief 删除橡皮擦之前的所有消息
	* @param [in] targetid 传入会话对应的ID，群或者人 targetId为0，则针对所有用户
	* @param [in] beginTime 起始时间
	* @param [in] endTime 结束时间
	* @param [in] cb  结果回调 _1错误信息
	*/
	public native void deleteAllMessageBeforeEraser(@Cast("int64") long targetId, @Cast("int64") long endTime, @ByVal FnCbError cb);
	/**
	* \brief 设置消息已读
	* @param [in] targetid 传入会话对应的ID，群或者人
	* @param [in] msgs 需要设置的消息ID 比如设置为100, 比100小的所有消息都为已读
	*/
	public native void setMessageRead(@Cast("int64") long targetId, @Cast("int64") long msgId);

	/**
	* \brief 设置消息未读 
	* @param [in] targetId 目标ID，个人或群,如果targetID等于0表示设置的是系统消息
	* @param [in] cb  传入接收结果回调 _1 错误信息
	*/
	public native void setMessageUnRead(@Cast("int64") long targetId, @ByVal FnCbError cb);

	/**
	* \brief 获取消息
	* @param [in] targetid 传入会话对应的ID，群或者人
	* @param [in] msgid 如果是按消息Id查询传入查询消息的起始消息ID，如果是按消息时间查询传入查询消息的起始时间。返回的结果会包含这条消息。
	* @param [in] count 传入查询消息总数
	* @param [in] flag  传入上一页还是下一页 
					   偏移标志 0.消息Id由大到小偏移 1.消息Id由小到大偏移 offsetFlag 2.按msgId精准查询
					   如果msgId代表的是消息时间的话，或上0xF0,如果是消息ID的话就不用或上0xF0
	* @param [in] fromUserId 发送者ID,表示只查询某一些人发的消息，默认为空，表示查询所有人的消息，最多查询10个人的消息。
	* @param [in] msgType 消息类型,表示查询某一些类型的消息，默认为空,表示查询所有类型的消息,最多查询5种类型的消息。
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2会话放ID， _3消息集合
	*/
	public native void getMessages(@Cast("int64") long targetId, @Cast("int64") long msgId, int count, int flag, @ByRef LongVector fromUserId, @ByRef IntegerVector msgType, @ByVal FnCbErrLongMsgPtrVector cb);
	public native void getMessages(@Cast("int64") long targetId, @Cast("int64") long msgId, int count, int flag, @ByVal FnCbErrLongMsgPtrVector cb);

	/**
	* \brief 置顶会话
	* @param [in] targetid 置顶的目标ID
	* @param [in] isTop  是否置顶 
	* @param [in] cb  传入接收结果回调 _1 错误信息 
	*/
	public native void chatTop(@Cast("int64") long targetId, @Cast("bool") boolean isTop, @ByVal FnCbError cb);

	/**
	* \brief 获取图片消息
	* @param [in] targetid 个人或群ID
	* @param [in] cb  传入接收结果回调 _1 错误信息  _2消息集合
	*/
	public native void getImgMsg(@Cast("int64") long targetId, @ByVal FnCbErrMsgPtrVector cb);

	/**
	* \brief 获取URL的详细信息
	* @param [in] url  网址
	* @param [in] cb  传入接收结果回调 _1 错误信息  _2网址  _3标题  _4图片的地址  _5摘要
	*/
	public native void getUrlInfo(@StdString  String url, @StdString  String loginfoPath, @ByVal FnCbErr4Str cb);

	/**
	* \brief 设置私信秘钥
	* @param [in] targetId 目标ID，个人或群
	* @param [in] passwd  私信秘钥  为空代表清除私信密码.
	* @param [in] cb  传入接收结果回调 _1 错误信息 
	*/
	public native void setPrivateKey(@Cast("int64") long targetId, @StdString  String passwd, @ByVal FnCbError cb);

	/**
	* \brief 通过消息ID解密消息
	* @param [in] targetId 目标ID，个人或群
	* @param [in] msgIds  要解密的消息ID集合
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2 解密消息的targetId _3已解密的消息
	*/
	public native void decryptMsg(@Cast("int64") long targetId, @ByRef LongVector msgIds, @ByVal FnCbErrLongMsgPtrVector cb);

	/**
	* \brief 更新对应targetId的消息，只能更新消息体和property
	* @param [in] targetId 目标ID，个人或群
	* @param [in] msgs  要更新的消息集合
	* @param [in] cb  传入接收结果回调 _1 错误信息
	*/
	public native void updateMsg(@ByRef MsgPtrVector msgs, @ByVal FnCbError cb);
	public native void updateMsg(@ByRef Msg msg, @ByVal FnCbError cb);

	/*
	* \brief 更新对应targetId的最近联系人消息，所有字段
	* @param[in] targetId 目标ID，个人或群
	* @param[in] fieldparam   对应字段 格式"4,0"/"4,16",4--status字段，0 设置会话已读 16设置回话追一下未读
	* @param[in] cb  传入接收结果回调 _1 错误信息

	*/
	public native void updatereconMsg(@Cast("int64") long targetid, @ByVal StringVector fieldparam, @ByVal FnCbErrLongStr cb);
	/**
	* \brief 上传消息计数
	* @param [in] msg 见Packet.h
	* @param [in] cb  传入接收结果回调 _1 错误信息 
	*/
	public native void upMsgCount(@ByRef upMsgCt msg,@ByVal FnCbError c);

	/**
	* \brief 增加最近联系人
	* @param [in] recontact 最近联系人对象
	* @param [in] cb  传入接收结果回调 _1 错误信息
	*/
	public native void addRecontact(@ByVal Chat chat, @ByVal FnCbError cb);
	/**
	 *\brief 获取对象聊天时间数组
	 *@param [in] targetId 对象id
	 *@param [in] belately 是否最近 0是最近 非零是要查询的年份
	 */
	public native void getMsgDays(@Cast("int64") long targetId, @Cast("int16") int belately, @ByVal FnCbErrYMDIntVector cb);
	/**
	* \brief 根据日期获取消息
	*@param [in] targetId 对象id
	*@param [in] msgId 搜索的起始的msgId,首次搜索，传0
	*@param [in] count 一次搜索的数量，如果为0，代表搜索全部
	*@param [in] belately 是否最近 0 是最近，非零的话要设置 YMD
	*@param [in] ymd  年月日
	*/
	public native void getMsgFromDay(@Cast("int64") long targetId, @Cast("int64") long msgId, @Cast("int32") int count, @Cast("int16") int belately, @ByRef YMD ymd,@ByVal FnCbErrMsgPtrVector cb);

	/**
	* \brief 获取所有消息数目
	* @param [in] targetId  目标id, 为0代表获取所有消息数目，否则代表获取相应targetId消息数目。
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2消息数
	*/
	public native void getAllMsgCount(@Cast("int64") long targetId, @ByVal FnCbErrInt cb);

	/**
	* \brief 发送短信
	* @param [in] userIds  接收短信的目标id集合
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2失败的用户ID及失败原因
	*/
	public native void sendShortMessage(@ByVal LongVector userIds, @ByVal FnCbLongStringMap cb);

	/**
	* \brief 获取群内消息的读取状态
	* @param [in] targetId  目标targetId
	* @param [in] msgId  消息id
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2表示返回对应类型的消息的已读，未读，未推送userID列表
	*/
	public native void getGroupMsgReadState(@Cast("int64") long targetId, @Cast("int64") long msgId, @ByVal FnCbStringLongVectorMap cb);

	/**
	* \brief .获取一批消息的未读数计数器
	* @param [in] groupId  群ID
	* @param [in] infos  消息id快照id信息
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2表示返回所有消息的未读状态
	*/
	public native void getGroupMsgUnreadCounter(@Cast("int64") long groupId, @ByRef SnapshotInfoVector infos, @ByVal FnCbErrMsgUnreadCountVector cb);

	/**
	* \brief .统计消息已读、未读数量详细信息
	* @param [in] groupId  群ID
	* @param [in] info  消息id快照id信息
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2已读userID列表 _3未读userID列表
	*/
	public native void getGroupMsgUnreadInfo(@Cast("int64") long groupId, @ByRef SnapshotInfo info, @ByVal FnCbErr2LongVector cb);

	/**
	* \brief .获取群中潜水者ID集合
	* @param [in] groupId  群ID
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2表示返回所有该群中潜水者的userID集合
	*/
	public native void getGroupDivers(@Cast("int64") long groupId, @ByVal FnCbErrLongVector cb);

	/**
	* \brief .获取联系人最大已读ID
	* @param [in] targetId 联系人ID
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2最大已读ID
	*/
	public native void getContractMaxReadId(@Cast("int64") long targetId, @ByVal FnCbErrLong cb);
	
	/**
	* \brief 获取不同类型的未读消息数量 (同步接口)
	* @param [in] type  1.未读V标消息数量 2.未读\消息数量 3.未读V标\消息数量
	* @param [in] return  未读消息数量
	*/
	public native int getUnReadMsgCountByType(int type);

	/**
	* \brief 发送消息输入状态
	* @param [in] flag 0.开始输入 1.结束输入  
	* @param [in] cb  传入接收结果回调 _1 错误信息
	*/
	public native void sendMsgInputState(@Cast("int64") long targetId, @Cast("int8") byte flag, @ByVal FnCbError cb);
	/*
	*\brief 获取@我的消息 或者 我@别人的消息
	*@param[in]  req 见getReqAtMsg 注释
	*@param[in] cb 传入结果回调 _1 错误信息 _2会话放ID， _3消息集合
	*/
	public native void getAtMessage(@ByRef getReqAtMsg req, @ByVal FnCbErrLongMsgPtrVector cb);
	/*
	*\brief 批量设置已读
	*@param[in] cb 传入结果回调 _1 错误信息 
	*/
	public native void setMsgReads(@ByVal FnCbError cb);
	
	/*
	*\brief 获取敏感词,已过滤敏感词库，只去敏感词库已启用的
	*@param[in] cb 传入结果回调 _1 错误信息
	*/
	public native @ByVal st_dbBadWordVector getBadWordList();

	/*
	*\brief 获取敏感词库信息
	*@param[in] cb 传入结果回调 _1 错误信息
	*/
	public native @ByVal st_dbBWLibVector getBWLibList();

	/*
	*\brief 获取文件传输敏感词
	*@param[in] cb 传入结果回调 _1 错误信息
	*/
	public native @ByVal StringVector getFileBWList();

	/*
	*\brief 获取群议题
	*@param[in] issueId 议题id 
	*@param[out] cb 传入结果回调 _1 错误信息 _2查找结果
	*/
	public native void getIssueById(@Cast("int64") long issueId, @ByVal FnCbErrGroupIssue cb);

	/*
	*\brief 本地查找群议题
	*@param[in] groupId 群id 
	*@param[in] key 查找关键字 
	*@param[out] cb 传入结果回调 _1 错误信息 _2查找结果
	*/
	public native void searchIssueLocal(@Cast("int64") long groupId, @StdString  String key, @ByVal FnCbErrGroupIssueVector cb);

	/*
	*\brief 拉取议题内历史消息
	*@param[in] groupId 群id 
	*@param[in] beginId 开始拉取的消息号
	*@param[in] count	拉取消息数量
	*@param[in] flag	偏移标志 0.消息Id由大到小偏移 1.消息Id由小到大偏移
	*@param[in] issueId 议题id 
	*@param[out] cb 传入结果回调 _1 错误信息 _2 历史消息
	*/
	public native void getIssueMessages(@Cast("int64") long groupId, @Cast("int64") long beginId, int count, int flag, @Cast("int64") long issueId, @ByVal FnCbErrLongMsgPtrVector cb);
	/*
	*\brief 标记删除本地议题 不真正删除议题，只是在search时搜不到
	*@param[in] issues 要标记删除的议题id
	*@param[out] cb 传入结果回调 _1 错误信息 
	*/
	public native void deleteIssueLocal(@ByRef LongVector issues, @ByVal FnCbError cb);
	/*
	*\brief 设置群公告消息已读
	*@param[in] 群Id、消息Id
	*@param[out] cb 传入结果回调 _1 错误信息
	*/
	public native void setGroupAnnouncementMsgReaded(@Cast("int64") long groupId, @Cast("int64") long msgId, @ByVal FnCbError cb);
	/**
	* \brief 根据消息类型获取消息
	* @param [in] targetid 个人或群ID
	* @param [in] cb  传入接收结果回调 _1 错误信息  _2消息集合
	*/
	public native void getMsgByType(@Cast("int64") long targetId, int msgType,@ByVal FnCbErrMsgPtrVector cb);
	
	/**
	* \brief 延时消息取消/立即发送接口
	* @param [in] nMessageId 消息ID
	* @param [in] nOperateType 操作类型1 取消发送 2立即发送
	* @param [out] cb  传入接收结果回调 _1 错误信息
	*/
	public native void handleDelayMsgByType(@Cast("int64") long nMessageId, @Cast("int8") byte nOperateType, @ByVal FnCbError cb);

	/**
	* \brief 根据任务timeTask获取任务消息
	* @param [in] targetid 个人或群ID
	* @param [in] timeTask 任务时间戳
	* @param [in] cb  传入接收结果回调 _1 错误信息  _2 targetId , _3消息集合
	*/
	public native void getTaskMsg(@Cast("int64") long targetId, @StdString  String timeTask, @ByVal FnCbErrLongMsgPtrVector cb);

	public native void MakeCombineMsg(@ByRef MsgCombine msg, @StdString  String json);
	
	public native @Cast("bool") boolean ParseCombineMsg(@StdString  String cmbJson, @ByRef MsgCombine msg);

	public native @SharedPtr MsgCombine toCombineMsg(Msg baseMsg);
	public native @SharedPtr MsgNotebook toNotebookMsg(Msg baseMsg);



	/**
	* \brief 设置群置顶消息
	* @param [in] msg 置顶的消息结构体，结构体关注的内容包括
	****msg.fromId           发送者ID，置顶消息的创建者
	****msg.body             客户端封装成json，json key关键字代表不同消息类型
	****msg.msgType，        设置为万能消息64
	****msg.msgId，          先设置为0，服务器回调更新Id
	****msg.lastMsgId，      先设置为0，代码中更新
	****msg.time，           置顶消息发送时间
	****msg.msgProperties    消息属性
	****msg.format           格式
	****msg.activeType       消息事件属性
	****msg.relatedMsgId     置顶或取消置顶的原始消息ID
	****msg.toId             接收者ID，设置为群id
	****msg.limitRange       \人员列表
	****msg.relatedUsers     秘聊时相关的用户ID
	****msg.subType          消息子类型 _2 置顶 _3取消置顶
	* @param [out] cb  传入接收结果回调 _1 错误信息 _2 发送时间 _3消息ID _4敏感词
	*/
	public native @Cast("int64") long setGroupTopMsg(@ByRef Msg msg, @ByVal FnCbErrLongLongBadWord cb);

	/**
	* \brief 根据群会话Id获取群置顶消息集合
	* @param [in] targetid 传入会话对应的ID，必须是群
	* @param [in] msgid 如果是按消息Id查询传入查询消息的起始消息ID，如果是按消息时间查询传入查询消息的起始时间。返回的结果会包含这条消息。
	* @param [in] count 传入查询消息总数
	* @param [in] flag  传入上一页还是下一页
	偏移标志 0.消息Id由大到小偏移 1.消息Id由小到大偏移 offsetFlag 2.按msgId精准查询
	如果msgId代表的是消息时间的话，或上0xF0,如果是消息ID的话就不用或上0xF0
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2会话放ID， _3消息集合
	*/
	public native void getGroupTopMsgById(@Cast("int64") long targetId, @Cast("int64") long msgId, int count, int flag, @ByVal FnCbErrLongMsgPtrVector cb);

	/**
	* \brief 根据群Id和消息Id判断该消息是否已被置顶，消息Id是原始消息ID（同步接口）
	* @param [in] targetid 群会话ID
	* @param [in] relateMsgId 原始消息ID
	* ret 返回该消息是否已经置顶，true为置顶，false为没有置顶
	*/
	public native @Cast("bool") boolean isGroupTopMsgSync(@Cast("int64") long targetId, @Cast("int64") long relateMsgId);


	/**
	* \brief 创建消息提醒
	* @param [in] receiverUserId 被提醒的用户ID，为0表示自己
	* @param [in] reminderTime 提醒被激活的时间戳，秒为单位
	* @param [in] msg 原始的消息结构体
	* @param [out] cb  传入接收结果回调 _1 错误信息 0:成功，100013003:失败，100:参数错误，11100:内部错误
	*/
	public native void createReminderMsg(@Cast("int64") long receiverUserId, @Cast("int64") long reminderTime, @ByRef Msg msg, @ByVal FnCbError cb);


	/**
	* \brief 分页查询消息提醒信息
	* @param [in] pageNo 页数
	* @param [in] pageSize 行数
	* @param [out] cb  传入接收结果回调 _1 错误信息 0:成功，100:参数错误，11100:内部错误   _2 总记录数   _3总页数    _4待提醒消息列表
	*/
	public native void getReminderMsgByPage(@Cast("int32") int pageNo, @Cast("int32") int pageSize, @ByVal FnCbErrLongLongreminderMsgVector cb);

	/**
	* \brief 删除消息提醒
	* @param [in] reminderId 消息提醒id
	* @param [out] cb  传入接收结果回调 _1 错误信息 0:成功，100013003:失败，100:参数错误，11100:内部错误
	*/
	public native void deleteReminderMsg(@Cast("int64") long reminderId, @ByVal FnCbError cb);
	/**
	* \brief 删除客户端数据
	* @param [in] timeStamp 客户端设置的时间戳
	* @param [in] clearChatList 是否清空联系人列表
	* @param [in] cb  结果回调 _1错误信息
	*/
	public native void cleanClientData(@Cast("int64") long timeStamp, @Cast("bool") boolean clearChatList, @ByVal FnCbError cb);
}

 /*namespace service */

// Parsed from interface/IConfigService.h

// #pragma once

// #include <string>
// #include <vector>
// #include "../model/Packet.h"
// #include "../model/LoginInfo.h"
// #include "IService.h"

// #define VER_CONFIG INTERFACE_VERSION(1,0)

@Namespace("service") public static class IConfigService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IConfigService(Pointer p) { super(p); }


	/**
	* \brief <U>获取登陆信息
	* @return 登录信息
	*/
	public native @ByVal LoginInfoVector getLoginInfos();

	/**
	* \brief <U>设置登陆信息
	* @param [in] 设置的登录信息
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setLoginInfo(@Const @ByRef LoginInfo info);
	/**
	* \brief <U>删除某个用户的登陆信息
	* @param [in] 要删除用户的userId。
	* @return   设置结果
	*/
	public native @Cast("bool") boolean delLoginInfo(@Cast("int64") long userId);
	/**
	* \brief <U>设置日志级别
	* @param [in]  lvl 日志级别
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setLogLevel(@Cast("LogLevel") int lvl);

	/**
	* \brief <U>获取登录状态
	* @return   登录状态结果
	*			LoginStatusInfo.status  // 0：没有网络连接 1：没有登录, 但是网络联通 2：正在登录 3：断线重连状态 4：正常状态
	*			LoginStatusInfo.lastLoginCode:
	*										0 登录正常返回
	*										-1 网络错误
	*										113 帐号已经登录 
	*										117 账号被锁
	*										1102 重试次数太多,需要输入验证码
	*										1303  需要修改密码才能登陆
	*										11100 无法回避的内部错误,服务无法找到
	*										100001575 手机已更换设备
	*										100001576 第三方登录认证失败
	*										100002503 客户端为维护状态，不允许登录
	*										100008001 服务器返回该code值，客户端清除该账号的所有数据
	*										-16777171 客户端和sdk的登录状态不一致，sdk为未登录
	*										-16777214 预登录错误，服务器维护中，正在更新
	*										-16777179 预登录错误，需要强制升级
	*										-16777124 证书过期
	*										-16777207 证书验证失败
	*										-16777140 调试白名单校验失败
	*										-16777213 被取消执行
	*										-16777208 数据库升级失败
	*										-16777142 更新用户目录失败
	*										-16777215 打开本地数据库失败
	*										-16777165 域名解析失败				
	*/
	public native @ByVal LoginStatusInfo getLoginStatus();

	/**
	* \brief <U>互联功能配置 
	* @param [in]  flag  0.不使用互联  1.使用互联  默认使用互联
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setInterConnect(int flag);

	
	/**
	* \brief <U>设置ＮＯＴＩＦＹ状态
	* @param [in]  flag  0.关闭  1.打开
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setNotifyStatus(int flag);

	/**
	* \brief <G>设置证书,初始化客户端之前设置
	* @param [in]  path  证书路径
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setCertificatePath(@StdString  String path);

	/**
	* \brief <G>获取网络代理
	* @return   返回网络代理信息
	*/
	public native @ByVal NetProxy getNetProxy();
	/**
	* \brief <G>设置网络代理
	* @param [in] param 需设置的网络代理信息
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setNetProxy(@ByRef NetProxy param);




	/**
	* \brief <G> 判断是否新消息类型 从内存查找
	* @param [in] MsgType 消息类型
	* @param [in] subMsgType 子消息类型
	* @return   设置结果 true-已有消息    false-新消息类型 
	*/
	public native @Cast("bool") boolean JudgeNewMsgMEM(@Cast("int32") int MsgType, @Cast("int32") int subMsgType);

	/**
	* \brief <G>设置是否插电。客户端设置，在ＳＤＫ里面使用
	* @param [in] isPlug 是否插电
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setPlugPower(@Cast("bool") boolean isPlug);

	/**
	* \brief <G>设置网络状态。客户端设置，在ＳＤＫ里面使用
	* @param [in] state  0.断网，１.在线WIFI或者有线,2.在线２Ｇ，３.在线３Ｇ，４.在线４Ｇ
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setNetStatus(int state);

	/**
	* \brief <G>获取sdk版本号
	* @return   sdk版本号
	*/
	public native @StdString  String getSdkVersion();

	/**
	* \brief <G>设置应用信息
	* @param [in] version 版本号
	* @param [in] deviceType 设备类型
	* @param [in] deviceInfo 设备信息
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setAppVersion(@StdString  String version, int deviceType, @StdString  String deviceInfo, @StdString  String netType/*=""*/, @StdString  String mac/*=""*/, @StdString  String mark/*=""*/);
	public native @Cast("bool") boolean setAppVersion(@StdString  String version, int deviceType, @StdString  String deviceInfo);


	/**
	* \brief <G>设置客户端文字编码
	* @param [in] code  编码 0.uft-8   1.gbk  默认utf-8
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setTextCoding(int code);

	/**
	* \brief <G>设置应用名称
	* @param [in] name 应用名 安卓为包名 IOS为应用ID
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setAppName(@StdString  String name);
	/**
	* \brief <G>设置为调试模式 调试模式需要拥有白名单帐号才能登录
	* @param [in] option 1 调试模式 0 非调试模式
	*/
	public native @Cast("bool") boolean setDevelopmentMode(int option);
	/**
	* \brief <G>设置语言环境
	* @param [in] language 语言
	* @return   设置结果
	*/
	public native @Cast("bool") boolean setLanguage(@StdString  String language);
	/**
	* \brief <G>设置鸡毛信语言环境
	* @param [in] language 语言
	*/
	public native void setLanguageType(@StdString  String language);

	/**
	* \brief <G>获取根路径
	* @return   根路径
	*/
	public native @StdString  String rootPath();
    
    /**
     * \brief <U>设置资源根路径，包括图片，文件，音频，视频路径都受影响
     * 比如设置为/home/sharp/ , 图片路径就会成为/home/sharp/{userid}/image
     * userid为当前登录的用户ID
     */
    public native @Cast("bool") boolean setRootPath(@StdString  String rootPath);

	/**
	* \brief <G>获取头像路径
	* @return   头像路径
	*/
	public native @StdString  String headImgPath();
	/**
	* \brief <U>设置用户资源目录
	* @return   图片信息的保存路径
	*/
	public native @Cast("bool") boolean setUserRcPath(@StdString  String userPath);
	public native @StdString  String getUserRcPath();
	/**
	* \brief <U>获取该用户聊天中图片信息的保存路径 
	* @return   图片信息的保存路径 
	*/
	public native @StdString  String userImgPath();

	/**
	* \brief <U>获取该用户聊天中音频信息的保存路径
	* @return   音频信息的保存路径
	*/
	public native @StdString  String userAudioPath();

	/**
	* \brief <U>获取该用户聊天中视频信息的保存路径
	* @return   视频信息的保存路径
	*/
	public native @StdString  String userVideoPath();

	/**
	* \brief <U>获取该用户聊天中cache
	* @return   用户聊天中cache
	*/
	public native @StdString  String userCachePath();

	/**
	* \brief <U>获取该用户聊天中文件信息的保存路径
	* @return   文件信息的保存路径
	*/
	public native @StdString  String userFilePath();

	/**
	* \brief <U>获取该用户表情中文件的保存路径
	* @return   文件信息的保存路径
	*/
	public native @StdString  String userEmotionPath();

	/**
	* \brief <G>设置消息解析方式
	* @param [in]  isParser  true 解析生成json, false由用户自己处理json
	*/
	public native @Cast("bool") boolean setMsgParserMode(@Cast("bool") boolean isParser);
	/**
	* \brief <G>获取消息解析方式
	* @return 是否由sdk解析
	*/
	public native @Cast("bool") boolean getMsgParserMode();

	/**
	* \brief <U>获取预登录附加数据
	* @return   附加数据json串
	*/
	public native @StdString  String getLoginExData(@StdString  String serverName);

	/**
	* \brief <U>屏幕状态 安卓,IOS专用
	*/
	public native @Cast("bool") boolean setScreenStatus(@Cast("bool") boolean isLight);

	/**
	* \brief <U>获取多服务器信息
	*/
	public native @Cast("bool") boolean getSubServerInfo(@ByRef SubServerInfoVector infos);

	/**
	* \brief <U>设置多服务器信息
	*/
	public native @Cast("bool") boolean setSubServerInfo(@ByRef SubServerInfoVector infos);

	/**
	* \brief <U>重新推送数据
	*/
	public native @Cast("bool") boolean reNotifyData();

	/**
	* \brief <U>设置漫游
	*/
	public native @Cast("bool") boolean setIsRoming(@Cast("int32") int isRoming);
	/**
	* \brief <U>获取漫游设置
	*/
	public native @Cast("bool") boolean getIsRoming();

	/**
	* \brief <G>  获取上一次预登录数据
	*/
	public native @ByVal PreLogincfg getLastPreLoginData(@Cast("int64") long userId);
	public native @StdString  String getLastPreLogin(@StdString  String server);

	/**
	* \brief <U>设置登录票据
	*/
	public native @Cast("bool") boolean setTicket(@Cast("int64") long userId, @StdString  String ticket);
	/**
	* \brief <G>设置密钥是否加密
	0为不加密， 1为加密
	*/
	public native @Cast("bool") boolean setPwIsCrypt(@Cast("bool") boolean bCrypt);
	/**
	* \brief <U>设置是否https方式登录
		0 否， 1是
	*/
	public native @Cast("bool") boolean setHttpsLogin(@Cast("int8") byte isHttps);
	/**
	* \brief <U>设置是否开启多通道
	0 否， 1是
	*/
	public native @Cast("bool") boolean setMultichannel(@Cast("int8") byte isMultichannel);
    /**
    * \brief <U>获取预登陆信息
    * json格式字段:preloginIP,port,netId
    */
    public native @StdString  String getPreloginInfoEx();

	/**
	* \brief <U>设置是否开启离线登录
	* 0 不允许  1 允许
	*/
	public native @Cast("bool") boolean setOffloginSwitch(@Cast("int8") byte isAllowOfflogin);
	/**
	* \brief <U>查询是否可以离线登录
	* false 不允许  true 允许
	*/
	public native @Cast("bool") boolean getOffloginStatus();
	/**
	* \brief <G>设置mac地址(用于初始化后更改mac地址)
	* false 不允许  true 允许
	*/
	public native void setMac(@StdString  String mac);
	/**
	* \brief 设置是否开启端到端加密
	* @param [in]  bool isOpenSecPlugin
	*/
	public native @Cast("bool") boolean setIsOpenSecPlugin(@Cast("bool") boolean isOpenSecPlugin);
	/**
	* \brief 获取是否开启端到端加密
	* @return 是否开启端到端加密
	*/
	public native @Cast("bool") boolean getIsOpenSecPlugin();
	/**
	* \brief 设置log输出级别
	* level 0 不输出log，1、不输出debug 2 输出所有log
	*/
	public native void setLogOutLevel(int level);
	/**
	* \brief 设置隐藏好友开关状态(默认为1，手势密码解锁后需要设置为0)
	* flag 0.显示隐藏好友  1.不显示隐藏好友
	*/
	public native void setHideBuddySwitch(@Cast("int8") byte flag);

	/*
	* \brief 设置云盘服务器地址
	* @param[in] string addr   eg: http://192.x.x.x:80   包含 http,  url  port
	*/
	public native void setCloudAddr(@StdString  String addr);

	/*
	* \brief 设置云盘上传最大速度  10 ~ 10000000  单位：k/s  默认值 100000000  k/s
	*/
	public native void setCloudUploadSpeed(@Cast("int64") long speed);

	/*
	* \brief 设置云盘下载最大速度 10 ~ 100000000    默认值 100000000  k/s
	*/
	public native void setCloudDownloadSpeed(@Cast("int64") long speed);
		
}

 /*namespace service*/

// Parsed from interface/IContactService.h

// #pragma once

// #include "../model/SDKTypes.h"
// #include "../model/Packet.h"
// #include "../model/Contact.h"
// #include "IService.h"

// #include <string>
// #include <vector>

// #define VER_CONTACT INTERFACE_VERSION(1,0)

@Namespace("service") public static class IContactService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IContactService(Pointer p) { super(p); }


	/*****************************************注册通知回调*******************************************/

	/**
	* \brief 监听联系人头像更新
	* @param [out]  cb _1 传入目标ID，人或者群;  _2	  传入头像;
	*/
	public native void regContactHeadImgUpdateCb(@ByVal FnCbLongStr cb);

	/**
	* \brief 监听联系人聊天背景更新
	* @param [out]  cb _1 传入目标ID，人或者群;  _2	  传入头像;
	*/
	public native void regContactBackImgUpdateCb(@ByVal FnCbLongStr cb);
	
	/**
	* \brief 设置监听在线状态更新的回调
	* @param [out] cb _1 在线状态 见packet.h
	*/
	public native void regPresentCb(@ByVal FnCbOnlineState cb);

	/**
	*  \brief 设置好友信息更新的回调
	* @param [out] cb _1 传入操作类型  1: 增加 2: 更新，3: 删除; _2  传入变更的联系人; 
	*/
	public native void regOperateBuddyCb(@ByVal FnCbIntContact cb);

	/**
	* \brief 监听好友刷新
	* @param [out] cb _1 传入操作类型 \n
	* 0x01 包含此标识，清空ＵＩ列表插入下面列表项 \n
	* 0x02　包含此标识，ＵＩ列表尾部添加下面列表项 \n
	* 0x04 包含此标识，所有好友添加完毕 \n
	* 0x08 包含此标识，从当前ＵＩ列表中更新下面列表项　不和其他标识组合 \n
	* 0x10 包含此标识，从当前ＵＩ列表中删除下面列表项　不和其他标识组合 \n
	* [in] _2	  传入变更的联系人
	*/
	public native void regBuddyListCb(@ByVal FnCbIntContactVector cb);


	/**
	* \brief 监听服务器端推送的超级用户操作
	* @param [out] cb 服务器做了哪些操作 OperType为1-9
	超级用户功能简介：
	三种用户类型：超级用户，提权用户，普通用户
	数据字典获取高级权限开关，个人好友组织中获取tagIds中是否含有1来判断是不是超级用户，getTagStrategyFromNet接口type=2获取高级权限列表
	tagIds为用户标签ID的集合，用逗号分隔，其中有1则为超级用户，否则为提权用户或普通用户
	提权用户或普通用户需要判断高级权限开关是否开启，没开启就都是普通用户，如果开启，则获取高级权限列表，如果没有则为普通用户，如果有则为提权用户
	如果是超级用户，而且打开了高级权限开关，则可以调用接口对自己的好友或组织成员进行提权，权限回收等操作，自己的好友或组织成员通过tagIds判断他是不是超级用户避免操作超级用户
	<p>
	（1）operType=1表示自己变为超级用户，收到该推送后客户端需要再次获取myself信息，重新拉取数据字典中的高级权限开关，重新拉取高级权限列表，客户端根据开关判断是否展示高级权限设置菜单，并重新计算该用户的权限
	（2）OperType=2表示自己变成普通用户，收到该推送后客户端需要再次获取myself信息，重新拉取数据字典中的高级权限开关，重新拉取高级权限列表，客户端根据开关和高级权限列表是否存在来判断自己是否为提权用户并重新计算该用户的权限
	（3）operType=3表示提权人被回收了权限（提权该用户的超级用户变成普通用户），客户端需要重新拉取高级权限列表，并重新计算权限
	（4）OperType=4表示服务器修改了超级用户的权限范围且该用户为超级用户，客户端需要重新拉取高级权限列表，并更新高级权限设置菜单的可显示授权项
	（5）OperType=5表示服务器修改了超级用户的权限范围且该用户为提权用户，客户端需要重新拉取高级权限列表，并重新计算权限
	（6）OperType=6表示该用户被某个超级用户新增为提权用户或增加了提权权限，客户端需要重新拉取高级权限列表，并重新计算权限
	（7）OperType=7表示该用户被某个超级用户修改了提权的权限，客户端需要重新拉取高级权限列表，并重新计算权限
	（8）OperType=8表示该用户被某个超级用户回收了提权的所有的权限，客户端需要重新拉取高级权限列表，并重新计算权限
	（9）OperType=9如果自己是超级用户，服务器更新了数据字典，sdk会推送type=9到客户端，客户端要重新拉取高级权限开关判断是否有变更并根据结果决定是否显示高级权限设置菜单
	*/
	public native void regOperateSuperUserCb(@ByVal FnCbLong cb);



	/*****************************************请求接口*******************************************/

	/**
	* \brief 添加联系人
	* @param [in] userid 传入联系人ID
	* @param [in] remark 传入联系人备注，可以为空
	* @param [in] info   传入验证信息
	* @param [out] cb  传入接收结果回调 _1错误信息
	*/
	public native void addContact(@Cast("int64") long userid, @StdString  String remark, @StdString  String info, 
								@ByVal FnCbError cb);

	/**
	* \brief 直接添加联系人，不需要验证
	* @param [in] userid 传入联系人ID
	* @param [in] remark 传入联系人备注，可以为空
	* @param [in] info   传入验证信息
	* @param [out] cb  传入接收结果回调 _1错误信息
	*/
	public native void addContactNoVerify(@Cast("int64") long userid, @StdString  String remark, @StdString  String info,
					@ByVal FnCbError cb);

	/**
	* \brief 获取联系人验证方式
	* @param [in] userid 传入联系人ID
	* @param [out] cb  传入接收结果回调 _1 错误信息 _2验证方式
	*/
	public native void getVerifyType(@Cast("int64") long userid, @ByVal FnCbErrVerify cb);

	/**
	* \brief 删除联系人
	* @param [in] userid 传入联系人ID
	* @param [out] cb  传入接收结果回调 _1 错误信息
	*/
	public native void removeContact(@Cast("int64") long userid, @ByVal FnCbError cb);

	/**
	* \brief 更新联系人信息（星标&V标&备注）
	* @param [in] info 传入联系人信息 见contact.h
	* @param [out] cb  传入接收结果回调 _1错误信息
	*/
	public native void updateContactInfo(@ByRef Contact info, @ByVal FnCbError cb);

	/**
	* \brief 获取联系人列表 （同步接口）
	* @param [out]  contacts 所有的联系人信息;
	*/
	public native void getContactList(@ByRef ContactSharedVector contacts);

	/**
	* \brief 获取联系人在线状态
	* @param [in] users 传入联系人集合 如果为空则查所有联系人状态
	* @param [out] cb  传入接收结果回调 _1 错误信息; _2 在线状态
	*/
	public native void getContactOnline(@ByRef LongVector users, @ByVal FnCbErrOnlineStateVector cb);

    /**
    * \brief 获取单聊在线状态 调用此接口后方可收到在线状态推送
    * @param [in] user 传入单聊对象
    * @param [out] cb  传入接收结果回调 _1 错误信息; _2 在线状态
    */
    public native void regContactOnline(@Cast("int64") long user, @ByVal FnCbErrOnlineState cb);

	/**
	* \brief 获取联系人信息 ( 同步接口 )
	* @param [in] userid 用户ID
	* @param [out] contact  联系人信息
	* @return 操作结果
	*/
	public native @Cast("bool") boolean getContactInfo(@Cast("int64") long userid, @ByRef Contact contact);

	/**
	* \brief 判断联系人与自己是否是好友关系 ( 同步接口 )
	* @param [in] userid 用户ID
	* @return true为好友  false非好友
	*/
	public native @Cast("bool") boolean contactIsBuddy(@Cast("int64") long userId);

	/**
	* \brief 获取黑名单
	* @param [out] cb 传入接收结果回调  _1错误信息 _2黑名单ID集合
	*/
	public native void getBlackList(@ByVal FnCbErrLongVector cb);

	/**
	* \brief 添加黑名单
	* @param [in] ids 要加入的黑名单对象ID集合
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void addBlackList(@ByRef LongVector ids, @ByVal FnCbError cb);

	/**
	* \brief 删除黑名单
	* @param [in] ids 要删除的黑名单对象ID集合，为空则删除所有黑名单用户
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void removeBlackList(@ByRef LongVector ids, @ByVal FnCbError cb);

	/**
	* \brief 根据条件查询拓展字段信息 根据dicKey和parentId共同查询拓展字段.
	* @param [in] dicKey 要查询的字段
	* @param [in] parentID 父组织ID 当parentId为-1时表示查询所有的拓展字段;当parentId为-2 时按dicKey查询;-3时dicKey为id,根据id查询
	* @param [out] cb 传入接收结果回调  _1错误信息 _2返回的查询信息
	*/
	public native void queryExtendedField(@StdString  String dicKey,@Cast("int64") long parentID, @ByVal FnCbErrEnterpriseVector cb);
    
    /**
    * \brief 根据条件查询拓展字段信息（同步接口）
    * @param [in] dicKey 要查询的字段
    * @param [in] parentID 父组织ID 当parentId为-1时表示查询所有的拓展字段;当parentId为-2 时按dicKey查询
    * @param [out] result 查询结果  不会更新本地数据
    */
    public native @Cast("bool") boolean queryExtendedFieldSync(@StdString  String dicKey, @Cast("int64") long parentID, @ByRef EntDictVector result);

	/**
	* \brief 上传通讯录
	* @param [in] ids 要删除的黑名单对象ID集合，为空则删除所有黑名单用户
	* @param [out] cb 传入接收结果回调  _1错误信息 2,推荐联系人
	*/
	public native void postContact(@ByRef PhoneBookContactVector pbContacts, @ByVal FnCbErrrecommendVector cb);

	/**
	* \brief 获取全部本地通讯录条目(同步方法)
	* @param [out] phoneBooks 返回的通讯录条目集合
	*/
	public native @Cast("bool") boolean getLocalPhoneBook(@ByRef localPhoneBookVector phoneBooks);
	/**
	* \brief 增加本地通讯录条目(同步方法)
	* @param [in] phoneBooks 通讯录条目集合
	*/
	public native @Cast("bool") boolean addLocalPhoneBook(@ByRef localPhoneBookVector phoneBooks);

	/**
	* \brief 删除本地通讯录条目(同步方法)
	* @param [in] phones 电话号码集合
	*/
	public native @Cast("bool") boolean deleteLocalPhoneBook(@ByRef StringVector phones);

	/**
	* \brief 清空本地通讯录(同步方法)
	*/
	public native @Cast("bool") boolean deleteAllLocPhoneBook();

	/**
	* \brief 更新本地通讯录(同步方法)
	* @param [in] phoneBooks 通讯录条目集合
	*/
	public native @Cast("bool") boolean updateLocalPhoneBook(@ByRef localPhoneBookVector phoneBooks);
	/**
	*\brief从网络获取好友信息
	*/
	public native void getBuddyInfoFromNet(@Cast("int64") long userId,@ByVal FnCbErrContact cb);

	/**
	*\brief 是否为单向增减删除好友 (同步方法)
	* @return  true 单向 false 双向
	*/
	public native @Cast("bool") boolean oneWayBuddy();

	/**
	*\brief生成邀请码
	* @param [in] param 生成邀请码的参数
	* @param [out] cb 传入接收结果回调  _1错误信息 _2邀请码
	*/
	public native void makeVerifyCode(@ByRef InviteCodeParam param, @ByVal FnCbErrStr cb);

	/**
	*\brief是否是合法的邀请码(同步接口)
	* @param [in] inviteCode 邀请码
	* @param [in] serverIP 合法返回服务器IP
	* @param [out] return 合法返回服务器IP 不合法返回空
	*/
	public native @StdString  String isInviteCode(@StdString  String inviteCode);
	
	/**
	*\brief校验本人是否有权限生成邀请码
	* @param [out] cb 传入接收结果回调  _1错误信息  0有权限 100001717没有权限
	*/
	public native void canMakeVerifyCode(@ByVal FnCbError cb);

	/**
	*\brief检查邀请码是否有效
	* @param [in] inviteCode 邀请码
	* @param [in] uc 被邀请用户
	* @param [out] cb 传入接收结果回调  _1错误信息  0有效
	*/
	public native void verifyCodeValid(@StdString  String inviteCode, @ByRef UserContact uc, @ByVal FnCbError cb);

	/**
	*\brief检查群邀请码是否有效
	* @param [in] inviteCode 邀请码
	* @param [out] cb 传入接收结果回调  _1错误信息  0成功 _2what值
	*/
	public native void GroupVerifyCodeValid(@StdString  String inviteCode, @ByVal FnCbErrStr cb);
	
	/**
	*\brief 通过邀请码获取用户ID
	* @param [in] inviteCode 邀请码
	* @param [out] cb 传入接收结果回调  _1错误信息  _2用户ID _3buddy开关
	*/
	public native void getUserIdByInviteCode(@StdString  String inviteCode, @ByVal FnCbErrLongByte cb);

	/**
	*\brief  手机控制pc退出
	* @param [in]  type  类型  1:下线
	* @param [in]  devValue 设备类型  1：pc,2：phone，3：pad，4：web
	* @param [out] cb 传入接收结果回调  _1错误信息 0表示成功 100表示参数错误 100008003表示失败
 	*/
	public native void devKickOff(@Cast("int8") byte type,@Cast("int8") byte devValue,@ByVal FnCbError cb);

	/**
	* \brief 获取用户设备在线状态
	* @param [in] users 传入用户列表集合 如果为空则查所有联系人状态
	* @param [out] cb  传入接收结果回调 _1 错误信息; _2 在线状态
	*/
	public native void getDeviceOnline(@ByRef LongVector users, @ByVal FnCbErrOnlineStateVector cb);

	/**
	* \brief 客户端首次登录账号需要激活，若开启了用户信息字段验证激活方式需要调用此接口验证信息是否正确,须在已登录后调用
	* @param [in] accountType	账号类型
	* @param [in] account		账号
	* @param [in] userField		用户验证信息JSON 格式,示例{"base_name": "value1","account_10": "value2","extend_49114af6d8d64aa7b9ff7d79ab7be137": "value3"}
	* @param [out] cb 传入接收结果回调  _1错误信息 （100008004用户不存在 100008005验证用户信息失败 0验证用户信息成功）
	*/
	public native void verifyUserInfoField(@Cast("int8") byte accountType, @StdString  String account, @StdString  String userField, @ByVal FnCbError cb);

	/**
	* \brief 获取用户设置信息
	* @param [in] userIdList	用户id列表
	* @param [out] cb 传入接收结果回调  _1错误信息 ,_2 用户的设置信息集合
	*/

	public native void getBuddySetting(@Const @ByVal LongVector userIdList, @ByVal FnCbErrPersonalMap cb);

	/**
	* \brief 设置服务器别名
	* @param [in] userId	用户id
	* @param [in] serAlias	 要设置的别名
	* @param [out] cb 传入接收结果回调  _1错误信息          	
	                                                   0 成功//100005000
					                                  100005001 参数不全
	                                                  100 参数错误，未知type
	                                                  11100 服务器内部错误
	                                                  what 结果信息
	 [3/15/2021]
	*/
	public native void setServerAlias(@Cast("int64") long userId, @StdString  String serAlias, @ByVal FnCbError cb);
	/**
	* \brief 获取用户设置服务器别名
	* @param [in] userId	用户id
	* @param [out] cb 传入接收结果回调  _1错误信息 ,_2 用户的设置服务器别名
														0 成功//100005000
	                                                  100005001 参数不全
	                                                  100 参数错误，未知type
	                                                   11100 服务器内部错误
	                                                   what 结果信息
	[3/15/2021]
	*/
	public native void getServerAlias(@Cast("int64") long userId, @ByVal FnCbErrStr cb);



	/**
	* \brief 超级用户操作，保存提权人员所有权限
	* @param [in] elevatorList  提权人员列表
	* @param [out] cb 传入接收结果回调  _1错误信息(0:成功  -1:系统异常 -2:参数异常 100:未定义的type类型 11100调用底层接口失败)  _2 保存失败的userID集合
	*/
	public native void saveElevatorAuthority(@ByRef ElevatorAuthorityVector elevatorList, @ByVal FnCbErrStr cb);


	/**
	* \brief 超级用户操作，删除提权人员所有权限
	* @param [in] sid  超级用户id
	* @param [in] uid  提权用户id
	* @param [out] cb 传入接收结果回调  _1错误信息(0:成功  -1:系统异常 -2:参数异常 100:未定义的type类型 11100调用底层接口失败) 
	*/
	public native void deleteElevator(@Cast("int64") long sid, @Cast("int64") long uid, @ByVal FnCbError cb);

	/**
	* \brief 超级用户操作，查询当前超级用户的所有提权人员以及权限
	* @param [in] num  查询页数量
	* @param [in] index  查询页序号
	* @param [in] sid  超级用户id
	* @param [out] cb 传入接收结果回调  _1错误信息(0:成功 100:未定义的type类型 11100调用底层接口失败）
                                       _2 当前页数量    _3 当前页序号    _4 总页数    _5 总条数    _6 提权人员列表
	*/
	public native void selectElevatorAuthorityAll(@Cast("int64") long num, @Cast("int64") long index, @Cast("int64") long sid, @ByVal FnCbErr4LongElevatorAuthorityVector cb);

	/**
	* \brief 超级用户操作，查询提权人员真实所有权限
	* @param [in] uid  提权人员id
	* @param [out] cb 传入接收结果回调  _1错误信息(0:成功  -1:系统异常 -2:参数异常 100:未定义的type类型 11100调用底层接口失败)  _2 权限json
	*/
	public native void queryElevatorAuthorityReal(@Cast("int64") long uid, @ByVal FnCbErrStr cb);

	/**
	* \brief 超级用户操作，分页查询操作记录信息
	* @param [in] num  查询页数量
	* @param [in] index  查询页序号
	* @param [in] sid  超级用户id
	* @param [in] uid  提权用户id
	* @param [out] cb 传入接收结果回调  _1错误信息(0:成功 100:未定义的type类型 11100调用底层接口失败）
	_2 当前页数量    _3 当前页序号    _4 总页数    _5 总条数    _6 提权人员列表
	*/
	public native void listElevatorRecord(@Cast("int64") long num, @Cast("int64") long index, @Cast("int64") long sid, @Cast("int64") long uid, @ByVal FnCbErr4LongElevatorAuthorityVector cb);

	/**
	* \brief 获取用户标签
	* @param [in] userID  用户ID
	* @param [in] tagType  标签类型
	* @param [out] cb 传入接收结果回调  _1错误信息(0:成功 -1:网络失败 100004609:获取用户策略参数不正确 100004610:用户不存在 100004611:用户策略为空 100004613:获取用户策略失败 100004614:用户标签查询不存在）
	    _2 标签类型    _3 标签json
	*/
	public native void getTagStrategyFromNet(@Cast("int64") long userID, @Cast("int8") byte tagType, @ByVal FnCbErrLongStr cb);

	/**
	* \brief 超级用户操作，查询当前超级用户的某个提权人员以及权限
	* @param [in] sid  超级用户id
	* @param [in] uid  提权用户id
	* @param [out] cb 传入接收结果回调  _1错误信息(0:成功 100:未定义的type类型 11100调用底层接口失败） _2 提权人员列表
	*/
	public native void selectElevatorAuthority(@Cast("int64") long sid, @Cast("int64") long uid, @ByVal FnCbErrElevatorAuthorityVector cb);

}

 /*namespace service*/

// Parsed from interface/IExtService.h

// #pragma once

// #include "../model/SDKTypes.h"
// #include "../model/Packet.h"
// #include "../model/Msg.h"
// #include "IService.h"
// #include "../extModel/packet.h"
// #include "../extModel/extpacket.h"

// #include <string>
// #include <vector>

// #define VER_EXT INTERFACE_VERSION(1,0)

@Namespace("service") public static class IExtService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IExtService(Pointer p) { super(p); }


	/*****************************************注册通知回调*******************************************/

    /**
     * \brief 登陆成功后会给推送所有房间,这个推送比联系人，群都要早
     * @param [out] cb
     */

	/**
	 *\brief 注册企业成员更新完成回调，收到回调代表更新完成
	 * @param [out] cb _1 暂无意义
	 */
	public native void regEntUpdateFinishCb(@ByVal FnCbInt cb);

	/**
	 * \brief 监听组织成员头像更新
	 * @param [in] cb 传入结果回掉 _1 传入目标ID，人或者群; _2 传入头像
	 */
	public native void regOrgMemHeadImgUpdateCb(@ByVal FnCbLongStr cb);

	/**
	* \brief 监听客服会话列表更新
	* @param [in] cb 传入结果回掉 _1 更新标识; _2 更新列表
	*   0x08  更新
	*	0x10  新增
	*	0x20  删除
	*/
	public native void regCustomChatListCb(@ByVal FnCbIntCustomChatVector cb);

	/**
	* \brief 监听任务颜色提醒
	* @param [in] cb 传入结果回掉 _1 颜色提醒标识
	*	1 没有任务 不显示
	*	2 自己有未回复任务 red
	*	3 别人有未回复任务 yellow
	*	4 有未完成任务 blue
	*	5 全部完成 white55K
	*/
	public native void regTaskStateCb(@ByVal FnCbInt cb);

	/*****************************************请求接口*******************************************/

	//Task
	/**
	* \brief 发送任务消息
	* @param [in] msg 任务消息
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 msgID; _3 sendTime;
	*/
	public native void sendTaskMsg(@ByRef Msg msg, @ByVal FnCbErr2Long cb);
	/**
	* \brief 置顶任务
	* @param [in] msgId 传入TaskId
	* @param [in] isTop 是否置顶  0：不置顶 1：置顶
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void topTask(@Cast("int64") long msgId,@Cast("int8") byte isTop,@ByVal FnCbError cb);
	/**
	* \brief 获取指派的任务
 	* @param [in] cb  传入接收结果回调 _1 错误号; _2 任务集;
	*/
	public native void getApTask(@ByVal FnCbErrTaskVector cb);
	/**
	* \brief 获取接收的任务
	* @param [in] cb  传入接收结果回调  _1 错误号; _2 任务集;
	*/
	public native void getRecvTask(@ByVal FnCbErrTaskVector cb);
	/**
	* \brief 获取历史任务
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 任务集;
	*/
	public native void getHistoryTask(@ByVal FnCbErrTaskVector cb);
	/**
	* \brief 获取任务上下文
	* @param [in] taskId  指定的TaskID
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 任务上下文;
	*/
	public native void getBodyTask(@Cast("int64") long taskId, @ByVal FnCbErrStr cb);
	/**
	* \brief 恢复任务
	* @param [in] taskId  需要恢复的TaskID
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void recoveryTask(@Cast("int64") long taskId, @ByVal FnCbError cb);
	/**
	* \brief 完成任务
	* @param [in] taskId  需要完成的任务 id
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void finishTask(@Cast("int64") long taskId, @ByVal FnCbError cb);
	/**
	* \brief 设置任务已读
	* @param [in] taskId  需设置已读的任务id
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void setReadTask(@Cast("int64") long taskId, @ByVal FnCbError cb);
	/**
	* \brief 获取任务回复消息
	* @param [in] type    1:根据msgID获取; 2:根据timeTask获取
	* @param [in] msgID    type = 1时赋值
	* @param [in] timeTask type = 2时赋值
 	* @param [in] count  要获取的的任务id
	* @param [in] begin  从第几条开始 如果从第一条开始就传0
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 回复消息;
	*/
	public native void getRecvMsg(@Cast("int8") byte type, @Cast("int64") long msgID, @StdString  String timeTask, int count, int begin, @ByVal FnCbErrMsgPtrVectorTaskVector cb);
	/**
	* \brief 获取任务颜色提醒
	* @param [in] cb 传入结果回掉 _1 颜色提醒标识
	*	1 没有任务 不显示
	*	2 自己有未回复任务 red
	*	3 别人有未回复任务 yellow
	*	4 有未完成任务 blue
	*	5 全部完成 white55K
	*/
	public native void getTaskState(@ByVal FnCbInt cb);

	//room
	/**
	* \brief 创建房间
	* @param [in] roomName 房间名
	* @param [in] ids  成员集合
	* @param [in] flag  是否置顶 0：不置顶 1：置顶
	* @param [in] url  头像url
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void createRoom(@StdString  String roomName, @ByRef LongVector ids, @Cast("int8") byte flag, @StdString  String url, @ByVal FnCbErrInt cb);
	/**
	* \brief 修改房间名称
	* @param [in] roomId  要修改的roomID
	* @param [in] newName   新名称
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void changRoomName(int roomId, @StdString  String newName, @ByVal FnCbError cb);
	/**
	* \brief changRoomIcon
	* @param [in] roomId 要修改的roomID
	* @param [in] icoURL 头像的URL
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void changRoomIcon(int roomId, @StdString  String icoURL, @ByVal FnCbError cb);
	/**
	* \brief 删除房间
	* @param [in] roomID  房间ID
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void deleRoom(int roomID, @ByVal FnCbError cb);
	/**
	* \brief 获取房间信息
	* @param [in] roomID  房间ID
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 获取的房间信息;
	*/
	public native void getRoom(int roomID, @ByVal FnCbErrRoomVector cb);
	/**
	* \brief 获取所有房间信息
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 获取的房间信息集合;
	*/
	public native void getAllRoom( @ByVal FnCbErrRoomVector cb);

	/**
	* \brief 获取所有房间信息(同步接口)
	*/
	public native @ByVal RoomVector getAllRoomSync();
	/**
	* \brief 房间置顶
	* @param [in] roomId  房间ID
	* @param [in] isTop  是否置顶
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void topRoom(int roomId,@Cast("int8") byte isTop,@ByVal FnCbError cb);

	/**
	* \brief 房间增加人员
	* @param [in] roomId  房间ID
	* @param [in] vt  加入的成员
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/

	public native void addRoomMember(@Cast("int64") long roomId, @ByVal LongVector vt, @ByVal FnCbError cb);

	/**
	* \brief 房间删除人员
	* @param [in] roomId  房间ID
	* @param [in] vt  删除的成员
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void delRoomMember(@Cast("int64") long roomId, @ByVal LongVector vt, @ByVal FnCbError cb);

	/**
	* \brief 获取组织机构
    * @param [in] flag 一般都传 0, 只有离线登陆的时候传 1
	* @param [in] type 
	* 0:获取登陆时刻的组织机构，如果登陆后对后台组织机构进行了修改，本次登陆拉取不到，下次登陆才可以拉取到 \n
	* 1:获取当前时刻的组织机构 =1 比 =0 速度上慢了很多，建议使用 =0\n
	* @param [in] orgID  组织ID  传 0 表示获取根组织
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 组织集合; _3 企业用户信息;
	*/
	public native void getVisibleOrgUsers(@Cast("int8") byte flag, @Cast("int8") byte type, @Cast("int64") long orgId, @ByVal FnCbErr2Byte2EntVector cb);
	//获取企业列表 同步接口
	public native void getVisibleOrgUsersSync(@Cast("int64") long orgId, @ByRef OrganizationInfoVector arg1, @ByRef EntpriseUserInfoVector arg2);

	/**
	* \brief 根据条件查询企业用户列表
	* @param [in] EnterpriseUserQueryInfo  查询信息 见Packet.h
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 total 总数; _3 totalPage 总页数; _4 用户信息集合;
	*/
	public native void queryEnterpriseUserlist(@ByRef EnterpriseUserQueryInfo enterpriseUserQueryInfo, @ByVal FnCbErr2LongEntMap cb);
	/**
	* \brief 获取企业所有用户信息
	* @param [in] vt  需要获取的用户集合
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 返回企业用户信息;
	*/
	public native void queryEntUserAll(@ByVal LongVector vt, @ByVal FnCbErrEntUserVector cb);
	/**
	* \brief 查询企业用户信息
    * @param [in] flag 一般都传 0, 只有离线登陆的时候传 1
	* @param [in] userId  用户id
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 返回企业用户信息;
	*/
	public native void queryEntUserOneById(@Cast("int8") byte flag, @Cast("int64") long userId, @ByVal FnCbErrEntUserVector cb);
	/**
	* \brief 查询企业用户信息
    * @param [in] flag 一般都传 0, 只有离线登陆的时候传 1
	* @param [in] userName  用户名
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 返回企业用户信息;
	*/
    public native void queryEntUserOneByName(@Cast("int8") byte flag, @StdString  String userName, @ByVal FnCbErrEntUserVector cb);
	/**
	* \brief 获取组织信息
    * @param [in] flag 一般都传 0, 只有离线登陆的时候传 1
	* @param [in] orgId 组织Id
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 组织信息;
	*/
	public native void getOrgInfo(@Cast("int8") byte flag, @Cast("int64") long orgId, @ByVal FnCbErrOrg cb);
	public native void getOrgInfos(@ByRef LongVector orgId, @ByVal FnCbErrOrgVector cb);
    public native void getOrgInfoSync(@Cast("int64") long orgId, @ByRef OrganizationInfo org);

    /**
     * \brief 组织机构模糊查找
     * @param [in] type 4：组织机构模糊查找 5：搜索人员接口
     */
    public native void orgAndUserSearch(@ByRef OrgAndUserSearchIn orgAndUser, @ByVal FnCbLongOrgInfoVectorOrgUserVector cb);

	//msg
	/**
	* \brief 获取对应targetId中的所有消息数目
	* @param [in] targetId  targetId
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 消息数目;
	*/
	public native void getMsgCountByTargetID(@Cast("int64") long targetId,@ByVal FnCbErrInt cb);
	/**
	* \brief 获取聊天数量前topN的群组
	* @param [in] topN   获取聊天数量前topN的群组
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 targetID集合;_3 消息数目;
	*/
	public native void getMsgTopNGroup(int topN, @ByVal FnCbErrLongVectorIntVector cb);
	/**
	* \brief 获取聊天数目前topN的单聊
	* @param [in] topN   获取聊天数目前topN的单聊
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 targetID集合;_3 消息数目;
	*/
	public native void getMsgTopNSession(int topN, @ByVal FnCbErrLongVectorIntVector cb);
	/**
	* \brief 获取\自己最多的topN个群
	* @param [in] topN    获取前topN会话的群组
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 targetID集合;_3 消息数目;
	*/
	public native void getMsgTopNAtGroup(int topN, @ByVal FnCbErrLongVectorIntVector cb);


	//收藏
	/**
	* \brief 添加记事本
	* @param [in] noteInfo  记事本信息 见Packet.h
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void addNote(@ByRef BaseNoteInfo noteInfo, @ByVal FnCbError cb);
	/**
	* \brief 获取记事本
	* @param [in] beginID  起始消息ID offsetFlag = 0 msgBeginID = 0时，代表从最大的消息Id进行查找
	* @param [in] offset  查询的数量
	* @param [in] offsetFlag  偏移标志；0.消息Id由大到小偏移 1.消息Id由小到大偏移 offsetFlag.
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 记事本集合
	*/
	public native void getNote(@Cast("int64") long beginID, @Cast("int32") int offset, @Cast("int8") byte offsetFlag, @ByVal FnCbErrNoteVector cb);
	/**
	* \brief 删除记事本
	* @param [in] noteId  需删除noteID集合
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void delNote(@ByRef LongVector noteId,@ByVal FnCbError cb);
	/**
	* \brief 修改记事本
	* \description: 修改记事本
	* @param [in] baseInfo  新的note信息
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void editNote(@ByRef BaseNoteInfo baseInfo, @ByVal FnCbError cb);
	/**
	* \brief 归档记事本
	* @param [in] noteId  要归档的note id
    *  低4位：表示是否归档 0. 不归档，1. 归档
    *  高4位：表示是否置顶 0. 不置顶，1. 置顶
	* @param [in] isArchive
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void archiveNote(@Cast("int64") long noteId,@Cast("int8") byte isArchive,@ByVal FnCbError cb);
	/**
	* \brief 置顶记事本
	* @param [in] noteId  要置顶的note id
	* @param [in] isTop  是否置顶
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void topNote(@Cast("int64") long noteId, @Cast("int8") byte isTop, @ByVal FnCbError cb);
	/**
	* \brief 搜索记事本
	* @param [in] info  搜索的信息 见Packet.h
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 搜索的记事本集合
	************************************************************************/
	public native void searchNote(@ByRef searchNoteInfo info, @ByVal FnCbErrNoteVector cb);

	////智能客服
	/**
	* \brief 判断当前用户是否为客服
	* @param [out] cb  传入接收结果回调 _1 错误号; _2 true为是，false为否  
	************************************************************************/
	public native void isCustomer(@ByVal FnCbErrBool cb);
	/**
	* \brief 获取客服正在服务的用户列表
	* @param [in] appId  公众号Id
	* @param [out] cb  传入接收结果回调 _1 错误号; _2 正在服务的用户列表
	************************************************************************/
	public native void getUserByAppIdAndCustomId(@Cast("int64") long appId, @ByVal FnCbErrUserVector cb);
	/**
	* \brief 获取客户池列表
	* @param [in] appId  公众号Id
	* @param [out] cb  传入接收结果回调 _1 错误号; _2 客户池列表
	************************************************************************/
	public native void getCustomerPoolByAppID(@Cast("int64") long appId, @ByVal FnCbErrCustomerPoolVector cb);
	/**
	* \brief 客服关闭会话
	* @param [in] appId 公众号Id csid 客服ID(EntAppinfo结构体中的CSID),  userId客户的userID
	* @param [out] cb  传入接收结果回调 _1 错误号
	************************************************************************/
	public native void closeConversation(@Cast("int64") long appId, @Cast("int64") long csid, @Cast("int64") long userId, @ByVal FnCbError cb);
	/**
	* \brief 客服接入客户
	* @param [in] csid 客服ID(EntAppinfo结构体中的CSID),  userId客户的userID
	* @param [out] cb  传入接收结果回调 _1 错误号
	************************************************************************/
	public native void accessCustom(@Cast("int64") long appID, @Cast("int64") long csid, @Cast("int64") long userId, @ByVal FnCbError cb);
	/**
	* \brief 获取最后一条消息
	* @param [in] appID csid 客服ID(EntAppinfo结构体中的CSID),  userId客户的userID
	* @param [out] cb  传入接收结果回调 _1 错误号 _2 最后一条消息
	************************************************************************/
	public native void getLastMessage(@Cast("int64") long appID, @Cast("int64") long csid, @Cast("int64") long userId, @ByVal FnCbErrCustomerLastMsg cb);
	/**
	* \brief 获取客户池大小
	* @param [in] appId 公众号Id
	* @param [out] cb  传入接收结果回调 _1 错误号 _2 客户池大小
	************************************************************************/
	public native void getCustomPoolCount( @Cast("int64") long appId, @ByVal FnCbErrLong cb);
	/**
	* \brief 修改客服信息
	* @param [in] appId: 公众号Id Cisd, 客服id(appInfo里的CSID)status: 客服接待状态 1:客服在线（可接待用户）
	                            ，2:客服离线（不可接待用户）curMaxCount: 当前最大可接待数
	* @param [out] cb  传入接收结果回调 _1 错误号 
	************************************************************************/
	public native void updateCustomerService(@Cast("int64") long appId, @Cast("int64") long csid, @Cast("int8") byte status, @Cast("int32") int curMaxCount, @ByVal FnCbError cb);
	/**
	* \brief 获取客服公众号信息列表
	* @param [out] cb  传入接收结果回调 _1 错误号 _2 公众号列表
	************************************************************************/
	public native void getAppListByUserID(@ByVal FnCbErrCustomAppInfoVector cb);
	/**
	* \brief 获取客户的消息
	* @param [in] appId 传入公众号
	* @param [in] userId 传入客户的userID
	* @param [in] msgid 如果是按消息Id查询传入查询消息的起始消息ID，如果是按消息时间查询传入查询消息的起始时间。返回的结果会包含这条消息。
	* @param [in] count 传入查询消息总数
	* @param [in] flag  传入上一页还是下一页
		偏移标志 0.消息Id由大到小偏移 1.消息Id由小到大偏移 offsetFlag 2.按msgId精准查询
		如果msgId代表的是消息时间的话，或上0xF0,如果是消息ID的话就不用或上0xF0
	* @param [in] cb  传入接收结果回调 _1 错误信息 _2会话APPId _3客户id， _4消息集合
	*/
	public native void getCustomMessages(@Cast("int64") long appId, @Cast("int64") long userId, @Cast("int64") long msgId, int count, int flag, @ByVal FnCbErrLongLongMsgPtrVector cb);
	/**
	* \brief 获取客服信息
	* @param [in] csid 传入客服ID
	* @param [out] cb  传入接收结果回调 _1 错误号 _2 客服信息
	************************************************************************/
	public native void getAppCustomerInfo(@Cast("int64") long csid, @ByVal FnCbErrAppCustomerInfo cb);
	/**
	* \brief 获取智能客服数据库最后一条消息
	* @param [in] appId 传入公众号id 为0则表示获取智能客服最后一条消息，否则获取对应公众号的一条消息
	* @param [out] cb  传入接收结果回调 _1 错误号 _2 消息
	************************************************************************/
	public native void getCustomerLastMessageByDB(@Cast("int64") long appId, @ByVal FnCbErrCustomerLastMsg cb);

	/**
	* \brief 设置客户消息已读
	* @param [in] appID userID msgID
	* @param [out] cb  传入接收结果回调 _1 错误号 _2 客服信息
	************************************************************************/
	public native void setCustomMsgReaded(@Cast("int64") long appID, @Cast("int64") long userID, @Cast("int64") long msgID, @ByVal FnCbError cb);

	/**
	* \brief 获取客服会话列表
	* @param [in] appId 传入公众号id 
	* @param [out] cb  传入接收结果回调 _1 错误号 _2 会话列表
	************************************************************************/
	public native void getCustomChatList(@Cast("int64") long appId, @ByVal FnCbErrCustomChatVector cb);
	//新版记事本
	/**
	* \brief 添加记事本
	* @param [in] note  记事本信息 见extpacket.h
	* @param [in] cb  传入接收结果回调 _1 错误号 _2 noteId
	*/
	public native void addNotebook(@ByRef Notebook note, @ByVal FnCbErrLong cb);
	/**
	* \brief 获取记事本（直接获取所有记事本，没必要分页）
	* @param [in] type  排序方式 0.id 1.创建时间 2.修改时间
	* @param [in] offsetFlag  排序方向 0.由大到小 1.由小到大
	* @param [in] cb  传入接收结果回调 _1 错误号 _2 记事本信息
	*/
	public native void getNotebook(@Cast("int8") byte type, @Cast("int8") byte offsetFlag, @StdString  String hiddenKey, @ByVal FnCbErrNotebookVector cb);
	/**
	* \brief 删除记事本
	* @param [in] notebookId  记事本id
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void delNotebook(@ByRef LongVector notebookId, @ByVal FnCbError cb);
	/**
	* \brief 删除记事本
	* @param [in] notebookId  记事本id
	* @param [in] enKey	  	 记事本密钥
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void delNotebookById(@Cast("int64") long notebookId, @StdString  String enKey, @ByVal FnCbError cb);

	/**
	* \brief 修改记事本
	* @param [in] note  记事本信息 见extpacket.h（这个方法不会修改记事本的加密状态，传了也没用）
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void editNotebook(@ByRef Notebook note, @ByVal FnCbError cb);
	/**
	* \brief 修改记事本标签
	* @param [in] notebookId 记事本id
	* @param [in] label		标签
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void editNotebookLabel(@Cast("int64") long notebookId, @StdString  String label, @ByVal FnCbError cb);
	/**
	* \brief 加密记事本
	* @param [in] noteId  记事本Id
	* @param [in] type  	 加密类型 1.字符加密 2.手势加密
	* @param [in] enKey   秘钥信息
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void encryptNotebook(@Cast("int64") long noteId, @Cast("int8") byte type, @StdString  String enKey, @ByVal FnCbError cb);
	/**
	* \brief 解密记事本
	* @param [in] noteId  记事本Id
	* @param [in] enKey   秘钥信息
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void decryptNotebook(@Cast("int64") long noteId, @StdString  String enKey, @ByVal FnCbError cb);
	/**
	* \brief 搜索记事本
	* @param [in] label  标签
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 搜索结果
	*/
	public native void searchNotebook(@StdString  String label, @ByVal FnCbErrNotebookVector cb);
	/**
	* \brief 校验记事本密码
	* @param [in] noteId  记事本Id
	* @param [in] enKey   秘钥信息
	* @param [in] cb  传入接收结果回调 _1 错误号 0.正确 -9.密码错误
	*/
	public native void checkNoteEnkey(@Cast("int64") long noteId, @StdString  String enKey, @ByVal FnCbError cb); 
	/**
	* \brief 隐藏记事本
	* @param [in] noteId	 记事本Id
	* @param [in] hiddenKey   隐藏秘钥信息
	* @param [in] type   操作类型 3.隐藏 0.显示
	* @param [in] cb  传入接收结果回调 _1 错误号 0.正确 -3.sql执行错误 -9.密码错误
	*/
	public native void hideNotebook(@Cast("int64") long noteId, @StdString  String hiddenKey, @Cast("int8") byte type, @ByVal FnCbError cb);
	/**
	* \brief 校验隐藏秘钥
	* @param [in] enKey   隐藏秘钥信息
	* @param [in] cb  传入接收结果回调 _1 错误号  _2 隐藏记事本数量
	*/
	public native void checkHiddenKey(@StdString  String hiddenKey, @ByVal FnCbErrLong cb);
	/**
	* \brief 添加记事内容
	* @param [in] entry  记事内容 见extpacket.h
	* @param [in] cb  传入接收结果回调 _1 错误号 _2记事内容id;
	*/
	public native void addNoteEntry(@ByRef NoteEntry entry, @ByVal FnCbErrLong cb);
	/**
	* \brief 获取记事内容（加密记事本则需要传入enKey）
	* @param [in] param  获取参数 见extpacket.h
	* @param [in] cb  传入接收结果回调 _1 错误号 _2 记事内容
	*/
	public native void getNoteEntry(@ByRef GetNoteEntryParam param, @ByVal FnCbErrNoteEntryVector cb);
	/**
	* \brief 删除记事内容
	* @param [in] noteEntryId  记事条目Id
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void delNoteEntry(@ByRef LongVector noteEntryId, @ByVal FnCbError cb);
	/**
	* \brief 编辑记事内容
	* @param [in] entry  记事内容信息 见extpacket.h
	* @param [in] cb  传入接收结果回调 _1 错误号;
	*/
	public native void editNoteEntry(@ByRef NoteEntry entry, @ByVal FnCbError cb);
	/**
	* \brief 搜索记事内容
	* @param [in] notebookId  记事本Id 
	* @param [in] searchText  搜索关键字 
	* @param [in] cb  传入接收结果回调 _1 错误号 _2记事内容
	*/
	public native void searchNoteEntry(@Cast("int64") long notebookId, @StdString  String searchText, @ByVal FnCbErrNoteEntryVector cb);
	/**
	* \brief 根据账号信息获取手机盾信息
	* @param [in] eventType  事件类型：查询为1 登录为2
	* @param [in] accountInfo  用户的账号信息
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 获取的用户手机盾数据信息
	***ErrorInfo:100008010：成功；100008011：手机盾开关未开启；100008012：手机账号不能为空；100008013：手机格式不正确； 100008014:账号类型不正确；100008015:事件类型不正确；100008016:该手机未绑定任何用户； 100008017：该用户未开通手机盾；100008018：获取eventData失败
	************************************************************************/
	//virtual void getUserShieldByAccount(int8 eventType, AccountType& accountInfo, SFunction<void(ErrorInfo, UserShield&)> cb) = 0;




	/**
	* \brief 设置会话开启或关闭端到端(同步接口)
	* @param [in] targetId  对方的ID，仅限单聊
	* @param [in] devType   设备类型：0表示所有设备更新，1表示更新PC，2表示更新Mobile，使用默认值0即可
	* @param [in] openFlag  开关标记：0表示关闭端到端，1表示开启端到端
	***int:0:成功；100:参数错误；11100:内部错误；100010050：入参校验失败；100010051：对方身份秘钥不存在；100010053:无法打开端到端开关，因为服务器总开关关闭；-16777134:无法打开端到端，因为本地初始化出错;
	*/
	public native int setSecSessionOnOff(@Cast("int64") long targetId, @Cast("int8") byte devType, @Cast("int8") byte openFlag);


	/**
	* \brief 获取会话开启或关闭端到端状态(同步接口)
	* @param [in] targetId  对方的ID，仅限单聊
	* @param [in] devType   设备类型：0,pc和mobile的开关是一致的，所以给0即可
	* @param [out] openFlag  开关标记：0表示端到端会话关闭状态，1表示端到端会话开启状态
	***int:0:成功；100:参数错误；11100:内部错误；-16777134:如果状态是开，因为本地初始化端到端出错，报此错误;-16777125 端到端会话开关和总开关冲突;
	*/
	public native int getSecSessionOnOff(@Cast("int64") long targetId, @Cast("int8") byte devType, @Cast("int8*") @ByRef BytePointer openFlag);

	/**
	* \brief 每次收到解密失败的错误码时调用此接口(同步接口)
	* @param [in] targetId  对方的ID，仅限单聊
	* @param [in] devType   设备类型：1表示PC，2表示Mobile；解密失败根据解密失败的设备类型给值，如果解密失败的是自己的另一台设备，则根据自己的设备类型给另外一个设备类型值
	***int:0:成功；
	*/
	public native int checkSecSession(@Cast("int64") long targetId, @Cast("int8") byte devType);

	/**
	* \brief 人员组织机构搜索
	* @param [in] keyword 关键字(通用于用户/组织名称)
	* @param [in] orgIDs  选择的部门ID集合---该参数暂时未处理,默认搜索范围是全企业组织
	* @param [in] cb  传入接收结果回调 _1 错误号; _2 保留未使用; _3 组织信息列表; _4搜索的用户信息列表;
	***ErrorInfo:0：成功；100:参数错误；11100:内部错误；
	*/
	public native void orgAndUserSearchEx(@StdString  String keyword,@Const @ByRef LongVector orgIDs, @ByVal FnCbLongOrgInfoVectorOrgUserVector cb);



	/**
	* \brief 消息检查
	* @param [in] message 消息内容
	* @param [in] cb  传入接收结果回调 _1 错误号; 检查结果
	***ErrorInfo:0：成功
	*/
	public native void meessageSecurityCheck(@StdString  String message, @ByVal FnCbErrStrLongMap cb);


	/**
	* \brief 文件检查
	* @param [in] 文件路径
	* @param [in] cb  传入接收结果回调 _1 错误号;_2 违规文件项 （多项违规 type值为按位或关系）
	*												0:没有违规项
	*												1: 文件内容违规
	*												2：文件名违规
	*												4：其他信息违规
	*								; _3 检查结果
	***ErrorInfo:0：成功
	*/
	public native void fileSecurityCheck(@StdString  String path, @ByVal FnCbErrIntStrLongMap cb);


	/**
	* \brief 设置检查规则
	* @param [in] 规则字符换
	* @param [in] 规则类型, 1:消息规则 2:文件规则 3:ckconfig.xml路径更新
	* @param [in] cb  传入接收结果回调 _1 错误号; 检查结果
	***ErrorInfo:0：成功
	*/
	public native void setFileOrMsgRule(@StdString  String rule, int type, @ByVal FnCbError cb);



}

 /*namespace service*/


// Parsed from interface/IFaceToFaceService.h

// #pragma once

// #include "../model/SDKTypes.h"
// #include "../model/User.h"
// #include <string>
// #include <vector>
// #include "IService.h"

// #define VER_FACETOFACE INTERFACE_VERSION(1,0)

@Namespace("service") public static class IFaceToFaceService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IFaceToFaceService(Pointer p) { super(p); }


	/*****************************************注册通知回调*******************************************/

	/**
	* \brief  设置监听进入房间用户的信息
	* @param [in] cb  _1 房间ID; _2 加入房间的用户信息;
	*/
	public native void regEnterBuddyRoomCb(@ByVal FnCbStrUser cb);

	/**
	* \brief 设置监听进入房间用户的信息
	* @param [in] cb _1 房间ID;_2 加入房间的用户信息;
	*/
	public native void regEnterGroupRoomCb(@ByVal FnCbStrUser cb);

	/**
	* \brief 设置监听退出房间用户的信息
	* @param [in]  cb _1 房间ID;_2 退出的用户ID;_3 是否删除房间，1为删除，否则不删除
	*/
	public native void regEixtBuddyRoomCb(@ByVal FnCbStrLongByte cb);

	/**
	* \brief 设置监听退出房间用户的信息
	* @param [in] cb _1 房间ID;_2 退出的用户ID;_3 是否删除房间，1为删除，否则不删除;
	*/
	public native void regEixtGroupRoomCb(@ByVal FnCbStrLongByte cb);

	/**
	* \brief 完成近距离加好友的推送
	* @param [in] cb  _1 房间ID;_2 房间创建者Id;_3 是否被加好友  1是  2否
	*/
	public native void regBuddyRoomCmpCb(@ByVal FnCbStrLongByte cb);

	/**
	*  \brief 完成近距离加好友或加群的推送
	* @param [in] cb _1 房间ID;_2 群Id;_3 是否被邀请进群 1是 2否
	*/
	public native void regGroupRoomCmpCb(@ByVal FnCbStrLongByte cb);


	/*****************************************请求接口*******************************************/


	/**
	* \brief 创建近距离加好友房间
	* @param [in] userId 创建者ID
	* @param [in] logitude 经度
	* @param [in] latitude 维度
	* @param [in] cb 传入接收结果回调  _1错误信息  _2服务器返回的房间密码
	*/
	public native void createBuddyRoom(@Cast("int64") long userId, double longitude, double latitude, @ByVal FnCbErrStr cb);

	/**
	* \brief 创建近距离加群房间
	* @param [in] userId 创建者ID
	* @param [in] logitude 经度
	* @param [in] latitude 维度
	* @param [in] cb 传入接收结果回调  _1错误信息  _2服务器返回的房间密码
	*/
	public native void createGroupRoom(@Cast("int64") long userId, double longitude, double latitude, @ByVal FnCbErrStr cb);

	/**
	* \brief 进入近距离加好友房间
	* @param [in] userId 用户ID
	* @param [in] logitude 经度
	* @param [in] latitude 纬度
	* @param [in] passwd  房间密码
	* @param [in] cb 传入接收结果回调  _1错误信息 _2成员信息
	*/
	public native void enterBuddyRoom(@Cast("int64") long userId, double longitude, double latitude, @StdString  String passwd, @ByVal FnCbErrUserVector cb);

	/**
	* \brief 进入近距离加群房间
	* @param [in] userId 用户ID
	* @param [in] logitude 经度
	* @param [in] latitude 纬度
	* @param [in] passwd  房间密码
	* @param [in] cb 传入接收结果回调  _1错误信息  _2成员信息
	*/
	public native void enterGroupRoom(@Cast("int64") long userId, double longitude, double latitude, @StdString  String passwd, @ByVal FnCbErrUserVector cb);

	/**
	* \brief 退出近距离加好友房间
	* @param [in] userId 用户ID
	* @param [in] roomId 房间ID
	* @param [in] cb 传入接收结果回调  _1错误信息
	*/
	public native void exitBuddyRoom(@Cast("int64") long userId, @StdString  String roomId, @ByVal FnCbError cb);

	/**
	* \brief 退出近距离加群房间
	* @param [in] userId 用户ID
	* @param [in] roomId 房间ID
	* @param [in] cb 传入接收结果回调  _1错误信息
	*/
	public native void eixtGroupRoom(@Cast("int64") long userId, @StdString  String roomId, @ByVal FnCbError cb);

	/**
	* \brief 批量向好友房间的人发送好友请求(房间创建者操作)
	* @param [in] userId 用户ID
	* @param [in] roomId 房间ID
	* @param [in] verifyInfo 验证信息
	* @param [in] userList 发送的好友请求的用户ID集合，为房间中用户的子集
	* @param [in] cb 传入接收结果回调  _1错误信息
	*/
	public native void addBuddysFromRoom(@Cast("int64") long userId, @StdString  String roomId, @StdString  String verifyInfo, @ByRef LongVector userList,
										@ByVal FnCbError cb);

	/**
	* \brief 创建一个群，批量要求群房间的人进入 (房间创建者操作)
	* @param [in] userId 用户ID
	* @param [in] roomId 房间ID
	* @param [in] groupLevel 群等级 普通群为2
	* @param [in] groupName 群名  必须传
	* @param [in] userList 发送的好友请求的用户ID集合，为房间中用户的子集
	* @param [in] cb 传入接收结果回调  _1错误信息
	*/
	public native void createGroupFromRoom(@Cast("int64") long userId, @StdString  String roomId, @Cast("int8") byte groupLevel, @StdString  String groupName, @ByRef LongVector userList,
										@ByVal FnCbError cb);
	
}

 /*namespace service*/

// Parsed from interface/IFileService.h

// #pragma once

// #include "../model/SDKTypes.h"
// #include "../model/Packet.h"
// #include "IService.h"

// #include <string>
// #include <vector>
// #include <map>

// #define VER_FILE INTERFACE_VERSION(1,0)

@Namespace("service") public static class IFileService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IFileService(Pointer p) { super(p); }


	/**
	* \brief 注册进度推送
	*@param cb _1 进度对应的文件的localId _2 进度标示 _3进度 _4文件当前传入大小/文件总大小
	*/
	public native void regProcessCb(@ByVal FnCbLongIntIntStr cb);
	/**
	* \brief 注册p2p用户状态改变推送
	*@param cb _1 用户Id _2 0x01 PC , 0x02 移动终端 _3 上线 0 ， 下线， 1
	*/
	public native void regP2pUserStatusChgCb(@ByVal FnCbLongByte2 cb);
	/**
	* \brief 注册p2p用户发送文件请求推送
	*@param cb _1 见Packet.h 中P2pSendFileReq注释
	*/
	public native void regP2pSendFileReqCb(@ByVal FnCbP2pSendFileReq cb);
	/**
	* \brief 注册p2p用户文件传输操作推送
	*@param  cb _1 接收 0,  取消 1 _2 发送标识taskID
	*/
	public native void regP2pFileTransOpCb(@ByVal FnCbByteLong cb);

	/**
	* \brief 上传头像
	* @param [in] path 传入头像本地路径
	* @param [in] cb  传入接收结果回调 _1错误信息  _2大图地址json _3缩略图地址json
	*/
	public native void uploadAvatar(@StdString  String path, @ByVal FnCbErr2Str cb);

	/**
	* \brief 上传背景图
	* @param [in] path 传入背景图本地路径
	* @param [in] cb  传入接收结果回调 _1错误信息  _2大图地址json _3缩略图地址json
	*/
	public native void uploadBackground(@StdString  String path, @ByVal FnCbErr2Str cb);

	/**
	* \brief 上传文件  ///若断点上传,key必须一致
	* @param [in] targetId 人或群的id
	* @param [in] cb  传入接收结果回调 _1错误信息 _2目标Id _3服务器返回的json
	* @param [in] pro  进度回调 _1 extra_req  _2process 
	* @return 每个文件对应的唯一localID
	*/
	public native @Cast("int64") long uploadFile(@ByRef UploadFileProperty fileProperty, @ByVal FnCbErrLongStr cb,
			@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native @Cast("int64") long uploadFile(@ByRef UploadFileProperty fileProperty, @ByVal FnCbErrLongStr cb);
    /**
    * \brief 外部上传文件(iOS专用)
    * @param [in] fileProperty 上传文件参数
    * @param [in] loginInfo 插件登录信息
    * @param [in] cb  传入接收结果回调 _1错误信息 _2目标Id _3服务器返回的json
    * @param [in] pro  进度回调 _1 extra_req  _2process
    * @return 每个文件对应的唯一localID
    */
    public native @Cast("int64") long uploadShareFile(@ByRef UploadFileProperty fileProperty, @StdString  String loginInfo, @ByVal FnCbErrLongStr cb,
            @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
    public native @Cast("int64") long uploadShareFile(@ByRef UploadFileProperty fileProperty, @StdString  String loginInfo, @ByVal FnCbErrLongStr cb);

	/**
	* \brief 更新已下载的文件的保存路径到数据库
	* @param [in] fileMsgId 文件消息的msgID
	* @param [in] path 传入需要更新的路径
	* @return  0成功 非0失败 错误码待定
	*/
	public native @Cast("int64") long updateFileLocalPath(@Cast("int64") long fileMsgId, @StdString  String newPath);

	/**
	* \brief 下载文件
	* @param [in] targetId 发送者的targetId
	* @param [in] fileMsgId 文件消息的msgID
	* @param [in] path 传入下载路径
	* @param [in] url 传入url
	* @param [in] 群文档上传 DownloadFileProperty 需要添加isGroupDoc赋值为1,docid赋值为文档docid
	* @param [in] cb  传入接收结果回调 _1错误信息  _2接收成功后文件路径 localPath _3发送者ID
	* @param [in] pro  进度回调
	* @return 每个文件对应的唯一localID
	*/
	public native @Cast("int64") long downloadFile(@ByRef DownloadFileProperty fileProperty, @ByVal FnCbErrStrLong cb, 
			@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native @Cast("int64") long downloadFile(@ByRef DownloadFileProperty fileProperty, @ByVal FnCbErrStrLong cb);

	/**
	* \brief 下载外部文件
	* @param [in] localPath 文件本地保存路径 
	* @param [in] url  flag = 0时为远程路径完整的URL路径  flag = 1时为远程路径,从消息JSON中解析出来的路径,或上0xF0，代表只判断文件有效性，不下载 remotePath
	* @param [in] cb  传入接收结果回调 _1错误信息 
	* @param [in] pro  进度回调
	* @return 每个文件对应的唯一localID
	*/
	public native @Cast("int64") long downloadExternalFile(@StdString  String localPath, @StdString  String url, @Cast("int8") byte flag, @ByVal FnCbError cb,
			@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native @Cast("int64") long downloadExternalFile(@StdString  String localPath, @StdString  String url, @Cast("int8") byte flag, @ByVal FnCbError cb);

	/**
	* \brief 上传照片
	* @param [in] targetId 人或群的id
	* @param [in] localId  localId,失败重发时必须传上次的localId
	* @param [in] thumbimg 传入缩略图
	* @param [in] srcimg 传入原图
	* @param [in] encryptkey 传入解密密码
	* @param [in] cb  传入接收结果回调 _1错误信息 _2目标ID， _3原图JSON， _4缩略图JSON
	*/
	public native void uploadImage(@Cast("int64") long targetId, @Cast("int64") long localId, @StdString  String thumbimg, @StdString  String srcimg, @StdString  String encryptkey,
								@ByVal FnCbErrLong2Str cb,
								@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void uploadImage(@Cast("int64") long targetId, @Cast("int64") long localId, @StdString  String thumbimg, @StdString  String srcimg, @StdString  String encryptkey,
								@ByVal FnCbErrLong2Str cb);

	/**
	* \brief 上传分享图片
	* @param [in] thumbimg 传入缩略图
	* @param [in] srcimg 传入原图
	* @param [in] encryptkey 传入解密密码
	* @param [in] cb  传入接收结果回调 _1错误信息， _2原图完整地址， _3缩略图完整地址
	*/
	public native void uploadShareImage(@ByRef UploadShareImageProperty imgProp,
								@ByVal FnCbErr2Str cb,
								@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void uploadShareImage(@ByRef UploadShareImageProperty imgProp,
								@ByVal FnCbErr2Str cb);

	/**
	* \brief 下载图片
	* @param [in] targetId 人或群的id 分享图片时传0
	* @param [in] url 传入图片url
	* @param [in] cb  传入接收结果回调 _1错误信息  _2本地文件路径 imgName  _3对方ID
	*/                                       
	public native void downloadImage(@Cast("int64") long targetId, @StdString  String url, @ByVal FnCbErrStrLong cb,
			@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void downloadImage(@Cast("int64") long targetId, @StdString  String url, @ByVal FnCbErrStrLong cb);

	

	/**
	* \brief 下载九宫格图片
	* @param [in] targetId 人或群的id
	* @param [in] url 传入所有图片url
	* @param [in] cb  传入接收结果回调 回调的次数和上传图片的次数一致  _1错误信息  _2对方ID _3本地文件路径 imgName _4图片索引 0-8 _5图片总数
	*/                                       
	public native void downloadNineBoxImage(@Cast("int64") long targetId, @ByRef StringVector url, @ByVal FnCbErrLongStr2Byte cb,
			@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void downloadNineBoxImage(@Cast("int64") long targetId, @ByRef StringVector url, @ByVal FnCbErrLongStr2Byte cb);
	/**
	* \brief 下载图片2 会存fileInfo库的那种
	* @param [in] dip 下载参数，见packet.h
	* @param [in] cb  传入接收结果回调 _1错误信息  _2本地文件路径 imgName  _3对方ID
	*/
	public native void downloadImage2(@ByRef DownloadImageParam dip, @ByVal FnCbErrStrLong cb,
			@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void downloadImage2(@ByRef DownloadImageParam dip, @ByVal FnCbErrStrLong cb);
	/**
	* \brief 下载九宫格图片2 会存fileInfo库的那种
	* @param [in] dip 下载参数，见packet.h
	* @param [in] cb  传入接收结果回调 回调的次数和上传图片的次数一致  _1错误信息  _2对方ID _3本地文件路径 imgName _4图片索引 0-8 _5图片总数
	*/
	public native void downloadNineBoxImage2(@ByRef DownloadImageParam dip, @ByVal FnCbErrLongStr2Byte cb,
			@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void downloadNineBoxImage2(@ByRef DownloadImageParam dip, @ByVal FnCbErrLongStr2Byte cb);

	/**
	* \brief 解密文件
	* @param [in] encryptkey 传入解密密码
	* @param [in] srcpath 传入原图路径
	* @param [in] destpath 传入解密后图片路径
	* @param [in] flag 解密出的文件属性 1、读写 2、只读
	*/
	public native @Cast("bool") boolean decryptFile(@StdString  String encryptkey, @StdString  String srcpath, @StdString  String destpath, @Cast("int8") byte flag/*=1*/);
	public native @Cast("bool") boolean decryptFile(@StdString  String encryptkey, @StdString  String srcpath, @StdString  String destpath);
	/**
	* \brief 加密文件
	* @param [in] encryptkey 传入加密密码
	* @param [in] srcpath 传入原图路径
	* @param [in] destpath 传入加密后图片路径
	*/
	public native @Cast("bool") boolean encryptFile(@StdString  String encryptkey, @StdString  String srcpath, @StdString  String destpath);

	/**
	* \brief 压缩文件
	* @param [in] filePath 文件完整路径
	* @param [in] level 压缩等级1-9,等级越高，压缩比例越大
	*/
	public native @Cast("bool") boolean compress(@StdString  String filePath, int level);
	/**
	* \brief 解压文件
	* @param [in] filePath 文件完整路径
	*/
	public native @Cast("bool") boolean uncompress(@StdString  String filePath);

	/**
	* \brief 获取文件列表
	* @param [in] targetid 传入查询对象id
	* @param [in] fileid 传入起始文件id
	* @param [in] count 传入数量
	* @param [in] flag 传入偏移标志0为向上1为向下
	* @param [in] cb  传入接收结果回调 _1错误信息  _2文件信息集合
	* 备注：移动端我的文件需求，文件类型展示的时候分为办公和其它的，客户端需要分别传6和-1
	*/
	public native void getFileList(@Cast("int64") long targetid, @Cast("int64") long fileid, int count, int flag, @ByVal FnCbErrFileVector cb);
	public native void getFileList(@ByVal GetGroupFile par, @ByVal FnCbErrFileVector cb);

	/**
	* \brief 通过文件消息ID得到文件详细信息 同步接口
	* @param [in] fileMsgIds  文件消息ID集合
	* @param [in] files 返回文件信息
	*/
	public native void getFilesInfo(@ByRef LongVector fileMsgIds, @ByRef LongFileInfoMap files);

	/**
	* \brief 判断是否有文件在传输
	* @param [in] localId  文件的local, 0代表判断是否存在任意文件在上传状态
	*/
	public native @Cast("bool") boolean isTransmitting(@Cast("int64") long localId/*=0*/);
	public native @Cast("bool") boolean isTransmitting();

	/**
	* \brief 判断个人或群中是否有文件传输
	* @param [in] targetId  个人或群Id
	*/
	public native @Cast("bool") boolean isTransmittingInTarget(@Cast("int64") long targetId);

	/**
	* \brief 取消文件上传或下载
	* @param [in] localId 文件的localId
	* @param [in] type  1.上传 2.下载 3.外部下载
	*/
	public native void cancelTransfer(@Cast("int64") long localId, int type, @ByVal FnCbError cb);

	/**
	* \brief 取消个人或群中的所有文件传输
	* @param [in] targetId人或群Id
	* @param [in] cb  _1 错误码
	*/
	public native @Cast("bool") boolean cancelTargetTransfer(@Cast("int64") long targetId);

	/**
	* \brief 取消所有文件传输
	*/
	public native void cancelAllTransfer(@ByVal FnCbError cb);
	/**
	*\brief 获取局域网可以P2P通讯的用户
	*@param [in] p2pUsers 用来接收获取的p2p用户 
	*@return 返回值 见errorExport.h p2p项
	*/
	public native int getP2pUsers(@ByRef P2pUserVector p2pUsers);
	/**
	* \brief 取消正在进行的传输或拒绝尚未开始的p2p传输
	* @param [in] cb  传入接受结果回掉 _1 错误信息 _2见packet.h
	*/
	public native void p2pTransferCancle(@Cast("int64") long taskID);
	/**
	 *\brief 获取本地文件已经下载大小
	 *\Param[in] localPath 本地文件路径
	 */
	public native @Cast("bool") boolean getAlreadyDownload(@StdString  String arg0, @ByRef downloadFileInfo arg1);

	/**
	*\brief 检查URL是否有效
	*\Param[in] url 要检查的url，如果为相对路径，下层会自己拼接为完整路径
	*/
	public native void checkUrlValid(@StdString  String url, @ByVal FnCbError cb);

	/**
	*\brief //通过文件的的服务器路径获取一个本地的唯一文件名 
	*\Param[in] url 服务器相对路径
	*/
	public native @StdString  String getNameByUrl(@StdString  String url);

    /**
    * \brief 延期文件的有效时长
    *\Param[in] fileUrls    文件的服务器路径地址
    *\Param[out] cb 传入接口结果回调，_1错误信息  _2操作结果(0.全部成功 1.部分成功 -1.链接地址错误) _3过期文件url
    */
    public native void delayFiles(@ByRef StringVector fileUrls, @ByVal FnCbErrIntStringVector cb);

    /**
    * \brief 查询文件是否过期
    *\Param[in] fileUrls    文件的服务器路径地址
    *\Param[out] cb 传入接口结果回调，_1错误信息  _2查询结果(0.全部未过期 1.部分过期 -1.链接地址错误) _3过期文件url
    */
    public native void queryFileValid(@ByRef StringVector fileUrls, @ByVal FnCbErrIntStringVector cb);
	
	/**
	* \brief 将原图压缩尺寸为大图和小图
	* 支持 bmp, png, jpg, jpeg, jpe, jfif, jif 格式
	*\Param[in] strImage:   原图的路径
	*\Param[in] smallImage: 压缩小图的路径
	*\Param[in] bigImage:   压缩大图的路径
	*@return 返回值 0：成功 1：文件不存在 2：图片格式错误 3：图片错误
	*/
	public native int reduceImage(@StdString  String strImage, @StdString  String smallImage, @StdString  String bigImage);

	/**
	* \brief 给图片添加明水印
	*\Param[in] strImage: 原图的路径
	*\Param[in] toImage:  添加明水印后的图片路径
	*\Param[in] strMark:      水印内容
	*@return 返回值 0：成功 1：文件不存在 2：图片格式错误 3：图片错误 4：水印为空
	*/
	public native int putShowMarkOnImage(@StdString  String strImage, @StdString  String toImage, @StdString  String strMark);

	/**
	* \brief 给图片添加id水印
	* 此方法生成的水印图片不能抵抗截图等攻击手段，生成的水印图片质量和原图一样
	*\Param[in] strImage: 原图的路径
	*\Param[in] toImage:  添加暗水印后的图片路径
	*\Param[in] idMark:       水印id
	*@return  返回值 0:成功 1:文件不存在 2:图片格式错误 3:图片错误
	*/
	public native int putMarkOnImageSimple(@StdString  String strImage, @StdString  String toImage, @Cast("int64") long idMark);

	/**
	* \brief 获取水印图的id水印
	*\Param[in] strImage: 水印图的路径
	*@return 返回值： >0：  水印id  -1:文件不存在  -2:图片格式错误 -3:图片错误
	*/
	public native @Cast("int64") long getMarkFromImageSimple(@StdString  String strImage);

	/**
	* \brief 给图片添加频谱水印
	* 此方法生成的水印图片可以抵抗截图，涂抹等攻击手段，但是生成的水印图片质量比原图有所降低
	*\Param[in] strImage: 原图的路径
	*\Param[in] toImage:  添加暗水印后的图片路径
	*\Param[in] strMark:      水印内容
	*@return 返回值  0:成功 1:文件不存在 2:图片格式错误 3:图片错误 4:水印为空
	*/
	public native int putMarkOnImageFFT(@StdString  String strImage, @StdString  String toImage, @StdString  String strMark);

	/**
	* \brief 获取水印图的频谱水印
	*\Param[in] strImage: 水印图路径
	*@return 返回值 0:成功 在同级目录下生成 原名+_mark.bmp水印图片 1:文件不存在 2:图片格式错误 3:图片错误
	*/
	public native int getMarkFromImageFFT(@StdString  String strImage);

	/**
	* \brief 数据迁移接口
	* 只提供压缩和解压功能，传输需要客户端自行完成，压缩后的数据是加密的
	*\Param[in] zipPath: 数据压缩文件路径
	*\Param[in] type:      功能选择 1.压缩 2.解压缩
	*\Param[in] passwd:  压缩密码，客户端传入加解密密码，为空则使用SDK默认密码
	*\Param[out] cb 传入接口结果回调，_1错误信息
	*\Param[out] pro 进度条回调 _1ext信息(1.压缩root 2.压缩rc 3.解压root 4.解压rc) _2进度 _3提示信息
	*/
	public native void migrateUserData(@StdString  String zipPath, int type, @StdString  String passwd, @ByVal FnCbError cb, @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void migrateUserData(@StdString  String zipPath, int type, @StdString  String passwd, @ByVal FnCbError cb);


	/**
	* \brief 数据迁移接口,设置选择实现部分服务器的迁移
	* 只提供压缩和解压功能，传输需要客户端自行完成，压缩后的数据是加密的
	*@param [in] dirNameVt 需要压缩的目录名列表，比如bxy_3001(userID)，解压缩时不需要内容，传空vector即可
	*\Param[in] zipPath: 数据压缩文件路径
	*\Param[in] type:      功能选择 1.压缩 2.解压缩
	*\Param[in] passwd:  压缩密码，客户端传入加解密密码，为空则使用SDK默认密码
	*\Param[out] cb 传入接口结果回调，_1错误信息
	*\Param[out] pro 进度条回调 _1ext信息(1.压缩root 2.压缩rc 3.解压root 4.解压rc) _2进度 _3提示信息
	*/
	public native void migrateUserDataNew(@ByRef StringVector dirNameVt, @StdString  String zipPath, int type, @StdString  String passwd, @ByVal FnCbError cb, @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void migrateUserDataNew(@ByRef StringVector dirNameVt, @StdString  String zipPath, int type, @StdString  String passwd, @ByVal FnCbError cb);

	/**
	* \brief 删除文件信息列表
	* @param [in] fileType 需要删除的文件类型(6文档 5图片(九宫格存储是5) 89视频 3音频)
	* @param [in] files 需要删除的文件集合
	* @param [in] cb  传入接收结果回调 错误信息
	*/
	public native void delFileInfoList(@Cast("int8") byte fileType, @StdVector delFileinfoList files, @ByVal FnCbError cb);
}

	
 /*namespace service*/

// Parsed from interface/IGroupService.h

// #pragma once

// #include "../model/Group.h"
// #include"../model/Packet.h"
// #include "../model/Contact.h"
// #include "../model/Member.h"
// #include "IService.h"

// #include <string>
// #include <vector>

// #define VER_GROUP INTERFACE_VERSION(1,0)

@Namespace("service") public static class IGroupService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IGroupService(Pointer p) { super(p); }


	/*****************************************注册通知回调*******************************************/

	/**
	* \brief 监听群头像更新
	* @param [in] _1  群ID
	* @param [in] _2	  传入头像
	*/
	public native void regGroupHeadImgUpdateCb(@ByVal FnCbLongStr cb);

	/**
	* \brief 监听群成员头像更新
	* @param [in] _1  群成员ID
	* @param [in] _2	  传入头像
	*/
	public native void regMemberHeadImgUpdateCb(@ByVal FnCbLongStr cb);

	/**
	* \brief 监听群背景更新
	* @param [in] _1    群ID
	* @param [in] _2	  传入头像
	*/
	public native void regGroupBackImgUpdateCb(@ByVal FnCbLongStr cb);

	/**
	* \brief 设置监听群信息更新的回调
	* @param [in] _1 操作类型 1.添加 2.更新，31.解散 32.移除 33.退出 35.群禁言或取消禁言
	* @param [in] _2 群信息
	*/
	public native void regGroupRefreshCb(@ByVal FnCbByteGroup cb);

	/**
	* \brief 设置监听群主更新的回调
	* @param [in] _1 群主ID
	* @param [in] _2 群主名
	* @param [in] _3 群ID
	* @param [in] _4 群名
	*/
	public native void regTransferGroupCb(@ByVal FnCbLongStrLongStr cb);
	
	/**
	* \brief 设置监听群成员信息更新的回调
	* @param [in] _1 群ID
	* @param [in] _2 群成员信息
	*/
	public native void regGrpMemInfoRefreshCb(@ByVal FnCbLongMember cb);

	/**
	* \brief  设置群成员列表更新的回调
	* @param [in] _1 操作类型  1 添加， 32 移除， 33 退出
	* @param [in] _2 群ID
	* @param [in] _3 变更的群成员集合
	*/
	public native void regGrpMemRefreshCb(@ByVal FnCbIntLongMemberVector cb);

	/**
	* \brief  设置获取群成员列表的回调
	* @param [in] _1 错误信息，不使用，只是为了和getMemberList回调函数一致
	* @param [in] _2 新增群成员
	* @param [in] _3 更新群成员信息
	* @param [in] _4 删除群成员
	*/
	public native void regGetGrpMemListCb(@ByVal FnCbErr3MemberMap cb);
	
	/**
	* \brief  监听群列表刷新
	* @param [in] _1 群列表
	*/
	public native void regGroupListCb(@ByVal FnCbGroupVector cb);


	/**
	* \brief  监听群信息或群设置更新
	* @param [in] _1 群更新或群设置信息
	* type=25 群v标用户信息更新 
	*/
	public native void regGroupInfoOrSettingCb(@ByVal FnCbGroupInfoOrSettingInfo cb);


	/*****************************************请求接口*******************************************/

	/**
	* \brief 创建群
	* @param [in] level 传入群等级 1.临时群，2.普通群
	* @param [in] name 传入群名称
	* @param [in] members   传入群成员
	* @param [in] securityLevel 传入群密级
	* @param [in] powerSwitch   传入群提权开关
	* @param [in] cb  传入接收结果回调  _1错误信息  _2群ID
	* @param [in] securityLevel  powerSwitch  群密级，提权开关,没有默认给0
	*/

	public native void createGroup(@Cast("int32") int securityLevel, @Cast("int8") byte powerSwitch,int level, @StdString  String name, @ByRef LongVector members, @ByVal FnCbErrLong cb);

	/**
	* \brief 创建群
	* @param [in] level 传入群等级 1.临时群，2.普通群
	* @param [in] name 传入群名称
	* @param [in] members   传入群成员
	* @param [in] securityLevel 传入群密级
	* @param [in] powerSwitch   传入群提权开关
	* @param [in] cb  传入接收结果回调  _1错误信息  _2群ID _3入群邀请需要验证用户集合,_4不接受入群邀请用户集合, _5直接可以进群用户集合 _6需要管理员验证的用户列表
	* @param [in] securityLevel  powerSwitch  群密级，提权开关,没有默认给0
	*/
	public native void createGroupEx(@Cast("int32") int securityLevel, @Cast("int8") byte powerSwitch,int level, @StdString  String name, @ByRef LongVector members, @ByVal FnCbErrLong4ContactVector cb);
	//virtual void createGroup(int level, const std::string &name, std::vector<int64> &members, SFunction<void(ErrorInfo, int64)> cb) = 0;

	/**
	* \brief 加群
	* @param [in] groupid 传入群id
	* @param [in] verify_info 传入验证信息
	* @param [in] cb  传入接收结果回调  _1错误信息
	*/
	public native void addGroup(@Cast("int64") long groupid, @StdString  String verify_info, @ByVal FnCbError cb);

	/**
	* \brief 解散群
	* @param [in] type 传入操作类型 1 群主解散群，2 群成员退群
	* @param [in] groupid 传入群id
	* @param [in] cb  传入接收结果回调  _1错误信息
	*/
	public native void removeGroup(int type, @Cast("int64") long groupid, @ByVal FnCbError cb);

	/**
	* \brief 转让群
	* @param [in] groupid 传入群id
	* @param [in] userid 传入新群主的id
	* @param [in] cb  传入接收结果回调  _1错误信息
	*/
	public native void transferGroup(@Cast("int64") long groupid, @Cast("int64") long userid, @ByVal FnCbError cb);

	/**
	* \brief 获取群设置
	* @param [in] groupid 传入群id
	* @param [in] cb  传入接收结果回调  _1错误信息 \n
	*    _2  验证类型: 1.不允许任何人添加, 2.需要验证信息, 3.允许任何人添加.\n
	*	 _3	 是否允许群成员邀请好友加入群: 1.允许 2.不允许.
	*    _4  企业群群主是否可以转让群 0否(默认), 1是
	*    _5  企业群管理员是否可以邀请入群  0否, 1是(默认)
	*/
	public native void getGroupSetEx(@Cast("int64") long groupid, @ByVal FnCbErr4Byte cb);
	//老接口
	public native void getGroupSet(@Cast("int64") long groupid, @ByVal FnCbErr2Byte cb);

	/**
	* \brief 设置群设置
	* @param [in] groupid 传入群id
	* @param [in] verify_type 传入验证类型 1:不允许任何人添加,2：需要验证信息,3：允许任何人添加
	* @param [in] is_allow 传入是否允许成员邀请用户 1,允许 2,不允许 isAllow
	*（说明,可选参数）：isAllowTransferOwner，isAllowAdminInvite这两个字段暂不允许客户端修改，只能后台修改。传值也无效。
	* @param [in] isAllowTransferOwner 企业群群主是否可以转让群 0否(默认), 1是
    * @param [in] isAllowAdminInvite   企业群管理员是否可以邀请入群  0否, 1是(默认)
	* @param [in] cb  传入接收结果回调  _1错误信息 
	*/
	public native void setGroupSet(@Cast("int64") long groupid, @Cast("int8") byte verify_type, @Cast("int8") byte is_allow, @Cast("int8") byte isAllowTransferOwner, @Cast("int8") byte isAllowAdminInvite,@ByVal FnCbError cb);
	//老接口
	public native void setGroupSet(@Cast("int64") long groupid, @Cast("int8") byte verify_type, @Cast("int8") byte is_allow, @ByVal FnCbError cb);

	/**
	* \brief 获取群信息 （同步接口）
	* @param [in] groupid 传入群id
	* @param [out] groupInfo 群信息
	*/
	public native void getGroupInfo(@Cast("int64") long groupid, @ByRef Group groupInfo);

	/**
	* \brief 设置群信息
	* @param [in] groupId 设置的群ID
	* @param [in] group  可设置的群信息
	* @param [in] cb  传入接收结果回调  _1错误信息 
	*/
	public native void setGroupInfo(@Cast("int64") long groupId, @ByRef GroupUpdate group, @ByVal FnCbError cb);

	/**
	* \brief 获取群列表 （同步接口）
	* @param [in] cb  传入接收结果回调  _1群信息集合;
	*/
	public native void getGroupList(@ByRef TinyGroupSharedVector groups);


	/**
	* \brief 邀请群成员
	* @param [in] groupid 传入群id
	* @param [in] members 传入成员名单
	* @param [in] cb  传入接收结果回调   _1错误信息
	*/
	public native void inviteMember(@Cast("int64") long groupid, @ByRef LongVector members, @ByVal FnCbError cb);

	/**
	* \brief 邀请群成员
	* @param [in] groupid 传入群id
	* @param [in] members 传入成员名单
	* @param [in] cb  传入接收结果回调   _1错误信息,_2入群邀请需要验证用户集合, _3不接受入群邀请用户集合, _4直接可以进群用户集合 _5需要管理员验证的用户列表
	*/
	public native void inviteMemberEx(@Cast("int64") long groupid, @ByRef LongVector members, @ByVal FnCbErr4ContactVector cb);
	//virtual void inviteMember(int64 groupid, std::vector<int64> &members, SFunction<void(ErrorInfo)> cb) = 0;

	/**
	* \brief 移除群成员
	* @param [in] groupid 传入群id
	* @param [in] userid 传入需要移除的成员id
	* @param [in] cb  传入接收结果回调   _1错误信息
	*/
	public native void removeMember(@Cast("int64") long groupid, @Cast("int64") long userid, @ByVal FnCbError cb);

	/**
	* \brief 批量移除群成员
	* @param [in] groupid 传入群id
	* @param [in] userids 传入需要移除的成员id集合
	* @param [in] cb  传入接收结果回调   _1错误信息
	*/
	public native void removeMembers(@Cast("int64") long groupid, @ByVal LongVector userids, @ByVal FnCbError cb);

	/**
	* \brief 设置群成员信息
	* @param [in] member 传入成员信息
	* @param [in] cb  传入接收结果回调
	*/
	public native void setMemberInfo(@ByRef Member member, @ByVal FnCbError cb);

	/**
	* \brief 判断用户是否在群里 (同步接口)
	* @param [in] groupid 传入群id
	* @param [in] userid 传入成员id
	* @return false代表不是群成员
	*/
	public native @Cast("bool") boolean isInGroup(@Cast("int64") long groupId, @Cast("int64") long userId);

	/**
	* \brief 获取群成员信息 (同步接口)
	* @param [in] groupid 传入群id
	* @param [in] userid 传入成员id
	* @param [out] member返回成员信息
	* @return false代表没有此信息
	*/
	public native @Cast("bool") boolean getMemberInfo(@Cast("int64") long groupid, @Cast("int64") long userid, @ByRef Member member);
	/**
	* \brief 获取群成员详细信息 (网络接口)
	* @param [in] groupid 传入群id
	* @param [in] userid 传入成员id
	* @param [out] MemberDetailInfo 返回成员信息
	* @return false代表没有此信息
	*/

	/**
	* \brief  获取群成员列表
	* @param [in] groupid 传入群id
	* @param [in] cb  传入接收结果回调   _1错误信息  _2群成员信息集合
	*/
	public native void getMemberList(@Cast("int64") long groupid, @ByVal FnCbErrMemberVector cb);

	/**
	* \brief  获取群成员列表,不检查下载头像
	* @param [in] groupid 传入群id
	* @param [in] cb  传入接收结果回调   _1错误信息  _2群成员信息集合
	*/
	public native void getMemberListNoDlHeadImg(@Cast("int64") long groupid, @ByVal FnCbErrMemberVector cb);
	
	/**
	* \brief 获取群文件列表
	* @param [in] groupid 传入群id
	* @param [in] beginid 传入起始id
	* @param [in] count 传入数量
	* @param [in] flag 传入偏移标志0为向上1为向下
	* @param [in] cb  传入接收结果回调   _1错误信息 _2文件信息集合
	*/
	public native void getGroupFileList(@Cast("int64") long groupid, @Cast("int64") long beginid, int count, @Cast("int8") byte flag, @ByVal FnCbErrFileVector cb);
	public native void getGroupFileList(@ByVal GetGroupFile par, @ByVal FnCbErrFileVector cb);

	/**
	* \brief 删除群文件
	* @param [in] files 传入群文件id
	* @param [in] groupId 传入群id
	* @param [in] cb  传入接收结果回调   _1错误信息
	*/
	public native void deleteGroupFile(@ByRef LongVector files, @Cast("int64") long groupId, @ByVal FnCbError cb);

	/**
	* \brief 获取个人群聊背景图片
	* @param [in] groupId 群ID
	* @param [in] cb  传入接收结果回调   _1错误信息   _2图片URL
	*/
	public native void getPersonalGroupImg(@Cast("int64") long groupId, @ByVal FnCbErrStr cb);

	/**
	* \brief 设置个人群聊背景图片
	* @param [in] groupId 群ID
	* @param [in] imgUrl 图片URL
	* @param [in] cb  传入接收结果回调   _1错误信息
	*/
	public native void setPersonalGroupImg(@Cast("int64") long groupId, @StdString  String imgUrl, @ByVal FnCbError cb);

	/**
	* \brief 设置群消息免打扰模式
	* @param [in] groupId 群ID
	* @param [in] mode 提醒模式 1：提示并接收消息；2：不提示，接收仅显示数目；3：屏蔽消息
	* @param [in] cb  传入接收结果回调   _1错误信息
	*/
	public native void setGroupMsgRemindType(@Cast("int64") long groupId, @Cast("int8") byte mode, @ByVal FnCbError cb);

	/**
	* \brief 获取群消息免打扰模式
	* @param [in] groupId 群ID
	* @param [in] cb  传入接收结果回调   _1错误信息 _2提醒模式 1：提示并接收消息；2：不提示，接收仅显示数目；3：屏蔽消息
	*/
	public native void getGroupMsgRemindType(@Cast("int64") long groupId, @ByVal FnCbErrByte cb);

	/**
	* \brief 设置群消息内容模式和V标
	* @param [in] groupId 群ID
	* @param [in] vSign 群V标 0为非v标群，1为v标群 -1为不设置
	* @param [in] msgContentMode 群通知消息内容模式: 1、通知详情  2、通知源，隐藏内容  3、完全隐藏   -1为不设置
	* @param [in] cb  传入接收结果回调   _1错误信息 _2提醒模式
	*/
	public native void setGroupExtraInfo(@Cast("int64") long groupId, @Cast("int8") byte vSign, @Cast("int8") byte msgContentMode, @ByVal FnCbError cb);

	/**
	* \brief 判断是否为群成员 同步接口
	* @param [in] groupId 群ID
	* @param [in] memberId 群成员id
	* @return true代表为此群成员，返回false不为群成员
	*/
	//virtual bool isGroupMember(int64 groupId, int64 memberId) = 0;

    /**
    *\brief 查询群在线人数状态
    * @param [in] groupId 群Id
    * @param [out] cb 传入接收结果回调  _1错误信息  _2在线人数  _3离线人数
    */
    public native void getGroupOnlineStatus(@Cast("int64") long groupId, @ByVal FnCbErr2Long cb);

	/**
	*\brief 设置群文件永久
	* @param [in] SetGroupFileTermParam 群文件信息
	* @param [out] cb 传入接收结果回调  _1错误信息 
	*/
	public native void setGroupFileTerm(@ByVal SetGroupFileTermParam groupFileInfo, @ByVal FnCbError cb);
	/**
	*\brief 添加群公告
	* @param [in] GroupAnnouncementInfo 群公告信息
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void addGroupAnnouncement(@ByRef GroupAnnouncementInfo info, @ByVal FnCbError cb);
	/**
	*\brief 删除单个群公告
	* @param [in] groupId 群Id, announcementId 公告id
	* @param [out] cb 传入接收结果回调  _1错误信息 
	*/
	public native void delGroupAnnouncement(@Cast("int64") long groupId, @Cast("int64") long announcementId, @ByVal FnCbError cb);
	/**
	*\brief 校验群公告是否存在
	* @param [in] groupId 群Id, announcementId 公告id
	* @param [out] cb 传入接收结果回调  _1错误信息 _2 校验结果(0 公告不存在, 1 存在)
	*/
	public native void checkGroupAnnouncementExist(@Cast("int64") long groupId, @Cast("int64") long announcementId, @ByVal FnCbErrByte cb);
	/**
	*\brief 分页获取群公告列表
	* @param [in] pageInfo 获取信息列表入参
	* @param [out] cb 传入接收结果回调  _1错误信息 _2 群公告列表
	*/
	public native void getGroupAnnouncementList(@ByRef GetGroupAnnouncementListParam pageInfo, @ByVal FnCbErrGroupAnnouncementList cb);

	/**
	* \brief 设置个人群聊提示音信息
	* @param [in] groupId 群ID
	* @param [in] toneInfo 提示音相关信息
	* @param [in] cb  传入接收结果回调   _1错误信息
	*/
	public native void setGroupBeepTone(@Cast("int64") long groupId, @StdString  String toneInfo, @ByVal FnCbError cb);

	/**
	* \brief 获取个人群聊提示音信息
	* @param [in] groupId 群ID
	* @param [in] cb  传入接收结果回调   _1错误信息   _2 提示音信息
	*/
	public native void getGroupBeepTone(@Cast("int64") long groupId, @ByVal FnCbErrStr cb);


	/**
	* \brief 设置群禁言或群成员禁言
	* @param [in] groupId 群ID
	* @param [in] targetId 被设置禁言的群成员，type为1和2时该值无效
	* @param [in] operateType 操作类型:1.解除群禁言 2.设置群禁言 3.解除用户禁言 4.设置用户禁言
	* @param [in] timeUtil 暂时无用，后期扩展定时功能使用，先传0
	* @param [in] cb  传入接收结果回调   _1错误信息 0:成功，100011022:没有权限禁言群/群成员，100011023:禁言对象不是群成员, 307:该群不存在
	*/
	public native void setGroupChatForbid(@Cast("int64") long groupId, @Cast("int64") long targetId, @Cast("int8") byte operateType, @Cast("int64") long timeUtil, @ByVal FnCbError cb);


	/*  
		  * \brief 增加群文档请求
		  * @param[in] MsgFile &msg  msgfile结构体，上传文件用的结构体
		  * @param[in] GroupDocAttribute &attribute 上传群文档属性结构体
		  * @param[in] cb  传入接收结果回调   _1错误信息   _2 成功上传文档的url /失败what _3  成功本次上传返回的文档docid/失败version _4 群文档占用空间总字节数 _5 群文档数量 _6 status 程序位置返回值  SFunction<void(int32, int32, const std::string&)> pro = SNull 和文档上传一样代表进度回调函数
		  11100:服务器异常 100:参数错误 
		  100027000: 成功
		  100027001: 失败
		  100011024: 群文件上传功能关闭
		  100011025: 没有权限
	*/
	public native void AddGroupShareFile(@ByRef MsgFile msg, @ByRef GroupDocAttribute attribute, @ByVal FnCbErrStr3LongByte cb, @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void AddGroupShareFile(@ByRef MsgFile msg, @ByRef GroupDocAttribute attribute, @ByVal FnCbErrStr3LongByte cb);

	/*
	* \brief 修改群文档请求
	* @param[in] GroupDocAttribute &attribute 修改群文档属性结构体 
	groupID 必须
	docID 必须
	fileName 修改后的名称
	status 填2
	lastModifiedBy 操作者userID, 即调用者userID
	* @param[in] cb  传入接收结果回调   _1错误信息   _2 失败描述信息 _3  本次操作返回的版本号 _4 群文档占用空间总字节数 _5 群文档数量 
	11100:服务器异常 100:参数错误
	100027000: 成功
	100027001: 失败
	100011024: 群文件上传功能关闭
	100011025: 没有权限

	*/
	public native void ModGroupShareFile(@ByRef GroupDocAttribute attribute, @ByVal FnCbErrStrLongLongInt cb);

	/*
	* \brief 删除群文档请求
	* @param[in] GroupDocAttribute &attribute 删除群文档属性结构体
	groupID 必须
	docID 必须
	status 填3
	* @param[in] cb  传入接收结果回调   _1错误信息   _2 失败描述信息 _3  本次操作返回的版本号 _4 群文档占用空间总字节数 _5 群文档数量
	11100:服务器异常 100:参数错误
	100027000: 成功
	100027001: 失败
	100011024: 群文件上传功能关闭
	100011025: 没有权限
	*/
	public native void DelGroupShareFile(@ByRef GroupDocAttribute attribute, @ByVal FnCbErrStrLongLongInt cb);

	/*查询最大version
	* @param[in] groupID  群id
	* @param[in] cb  传入接收结果回调   _1错误信息   _2 失败描述信息 _3  最大版本号
	*/
	public native void GetGroupDocMVer(@Cast("int64") long groupID, @ByVal FnCbErrStrLong cb);

	/*群文件增量查询
	struct GroupDocServQuery {
		/*群ID
		1: i64 groupID;
		/*最大返回条数
		2: i16 pageSize;
		3: i64 version;本地版本号
	}
	/*查询最大version
	* @param[in] groupID  群id
	* @param[in] pageSize  一页数量
	* @param[in] version  服务器端最大版本号
	* @param[in] cb  传入接收结果回调   _1错误信息   _2 失败描述信息 _3  最大版本号 _4 群文档占用空间总字节数 _5 群文档数量 _6 操作群文档的 记录属性GroupDocAttribute 

	 先 增量查询 然后 for循环 操作一次 im_GroupDocInfo 成功则 插入一条缓存 */
	public native void QueryGroupDocOpt(@Cast("int64") long groupID, @Cast("int32") int pageSize, @Cast("int64") long version, @ByVal FnCbErrStrLongLongIntGroupDocAttribute cb);


	/**
	* \brief  获取群文档全量数据   获取缓存数据
	* @param [in] sversion 起始version
	* @param [in]  fversion 终止version
	* @param [in] opts  传入接收结果回调   群文档操作缓存属性字符串集合   缓存操作记录获取接口,
	fversion, 起始version 终止version fversion 返回的 GroupDocAttribute操作记录的vector
	*/
	public native void GetGroupDocFileOpt(@Cast("int64") long sversion, @Cast("int64") long fversion, @ByRef StringVector opts);

	/**
	* \brief  获取群文档本地最大version
	* @param [in] 最大版本号 maxversion
	*/
	public native void GetMaxGDocVersion(@Cast("int64*") @ByRef LongPointer maxversion);

	/**
	* \brief  获取群文档全量数据
	* @param [in] groupid 传入群id
	* @param [in]  docid 传入群文档id docid传0 代表全部 其他代表单个数据
	* @param [in] cb  传入接收结果回调   _1错误信息  _2群文档属性集合
	*/
	public native void getGroupDocList(@Cast("int64") long groupid, @Cast("int64") long docid, @ByVal FnCbErrGroupDocAttributeVector cb);

	/**
	* \brief  获取群上传下载 文档全量数据
	* @param [in] groupid 传入群id
	* @param [in]  docid 传入群文档id localpath传空 代表全部 其他代表单个数据
	* @param [in] cb  传入接收结果回调   _1错误信息  _2群文档属性集合
	*/
	public native void getGDocUpDownList(@Cast("int64") long groupid, @StdString  String localpath, @ByVal FnCbErrGroupDocUpdownInfoVector cb);
}

 /*namespace service*/

// Parsed from interface/ISearchService.h

// #pragma once

// #include "../model/Packet.h"
// #include "../model/Group.h"
// #include "../model/Contact.h"
// #include "../model/Member.h"
// #include "IService.h"
// #include <string>

// #define VER_SEARCH INTERFACE_VERSION(1,0)

@Namespace("service") public static class ISearchService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ISearchService(Pointer p) { super(p); }


	/**
	* \brief 从网络进行查找
	* @param [in] key 传入关键字
	* @param [in] cb 传入接收结果回调  _1错误信息  _2搜索结果
	*/
	public native void searchFromNet(@StdString  String key, @ByVal FnCbErrSearch cb);

	/**
	* \brief 从本地数据库进行查找
	* @param [in] key 传入关键字
	* @param [in] cb 传入接收结果回调  _1错误信息  _2搜索结果
	*/
	public native void searchFromLocal(@StdString  String key, @ByVal FnCbErrSearch cb);


	/**
	* \brief 根据类型从本地数据库进行查找
	* @param [in] key 传入关键字
	* @param [in] type 传入查询类型  _1联系人  _2群  _4群内成员 _5联系人和群一起查 _6群和群成员一起查
	* @param [in] cb 传入接收结果回调  _1错误信息  _2搜索结果
	*/
	public native void searchFromLocalWithType(@StdString  String key,@Cast("int8") byte type, @ByVal FnCbErrSearch cb);

	/**
	* \brief 根据类型从本地数据库进行查找
	* @param [in] keys 传入关键字
	* @param [in] type 传入查询类型  _1联系人  _2群  _4群内成员 _5联系人和群一起查 _6群和群成员一起查
	* @param [in] cb 传入接收结果回调  _1错误信息  _2搜索结果
	*/
	public native void searchFromLocalWithMTypes(@Const @ByRef StringVector keys, @Cast("int8") byte type, @ByVal FnCbErrSearch cb);

	/**
	* \brief 从本地数据库里搜索某个群内的群成员
	* @param [in] groupId 群id
	* @param [in] key 传入关键字
	* @param [in] cb 传入接收结果回调  _1错误信息  _2搜索结果
	*/
	public native void groupSearchMember(@Cast("int64") long groupId, @StdString  String key, @ByVal FnCbErrMemberVectors cb);

	/**
	* \brief 通过用户ID获取陌生人信息
	* @param [in] userid 传入用户ID
	* @param [in] cb 传入接收结果回调  _1错误信息  _2用户信息
	*/
	public native void getUserInfo(@Cast("int64") long userid, @ByVal FnCbErrContact cb);

	/**
	* \brief 通过用户ID网络获取好友信息
	* @param [in] userid 传入用户ID
	* @param [in] cb 传入接收结果回调  _1错误信息  _2用户信息
	*/
	public native void getUserInfoEx(@Cast("int64") long userid, @ByVal FnCbErrContact cb);

	/**
	* \brief 通过用户ID网络获取好友信息，不下载头像
	* @param [in] userid 传入用户ID
	* @param [in] cb 传入接收结果回调  _1错误信息  _2用户信息
	*/
	public native void getUserInfoWithoutDlHeadImg(@Cast("int64") long userid, @ByVal FnCbErrContact cb);
	
	/**
	* \brief 通过用户ID获取详细信息(同步接口)
	* @param [in] userid 传入用户ID
	* @param [in] info 具体信息
	*/
	public native void getUserInfoSync(@Cast("int64") long userid, @ByRef Contact info);

	/**
	* \brief 根据客户端使用场景获取相应用户资料
	* @param [in] targetId 传入需要获取的ID
	* @param [in] userSence 用户场景 1：好友中点击 2：陌生人中点击 3：组织架构中点击
	* @param [in] info 具体信息
	*/
	public native void getUserInfoByScene(@Cast("int64") long targetId, @Cast("int8") byte userSence, @ByVal FnCbErrContact cb);

	/**
	* \brief 通过群ID获取详细信息
	* @param [in] groupId 传入群ID
	* @param [in] cb 传入接收结果回调  _1错误信息  _2群信息
	*/
	public native void getGroupInfo(@Cast("int64") long groupId, @ByVal FnCbErrGroup cb);

	/**
	* \brief 全局查找消息
	* @param [in] key	   传入查找关键字
	* @param [in] msgProperty  传入查找的附加属性
	* @param [in] cb     传入接收结果回调  _1错误信息  _2消息搜索结果集合
	*/
	public native void searchMessage(@StdString  String key, @ByRef MsgSearchProperty msgProperty,
			@ByVal FnCbErrMsgSearch cb);

	/**
	* \brief 查找相应targetID的详细消息
	* @param [in] key	   传入查找关键字
	* @param [in] msgDetailProperty  传入查找的附加属性
	* @param [in] cb     传入接收结果回调  _1错误信息  _2消息搜索结果集合
	*/
	public native void searchDetailMessage(@StdString  String key, @ByRef MsgDetailSearchProperty msgDetailProperty,
			@ByVal FnCbErrMsgDetail cb);

	/**
	* \brief 获取外部节点信息
	* @param [out] cb     传入接收结果回调  _1错误信息  _2消息搜索结果集合
	*/
	public native void getOutEntNodeInfo(@ByVal FnCbErrGetNodeInfoVector cb);
}

 /*namespace service*/

// Parsed from interface/ISysMsgService.h

// #pragma once

// #include "../model/Packet.h"
// #include "../model/Contact.h"
// #include "../model/SysMsg.h"
// #include "IService.h"

// #include <string>
// #include <vector>

// #define VER_SYSMSG INTERFACE_VERSION(1,0)

@Namespace("service") public static class ISysMsgService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ISysMsgService(Pointer p) { super(p); }


	/*****************************************注册通知回调*******************************************/

	/**
	* \brief 设置监听系统消息的回调 （废弃）
	* @param [out] cb 收到系统消息回调 _1系统消息结构
	*/
	public native void regSysMsgCb(@ByVal FnCbSystem cb);

	/**
	* \brief 设置监听离线未读系统消息的回调 （废弃）
	* @param [out] cb 收到离线未读系统消息回调 _1最后一条系统消息，_2未读系统消息总数
	*/
	public native void regLastSysMsgCb(@ByVal FnCbSysInt cb);

	/*****************************************请求接口*******************************************/

	/**
	* \brief 响应加好友的请求
	* @param [in] userId 请求者的用户ID 
	* @param [in] apllicationId 请求消息的申请号
	* @param [in] operType 对此请求的操作: 1.忽略 2.同意 3.拒绝 4.拒绝并不允许再次请求
	* @param [in] remark 好友备注
	* @param [in] refuseReason 附带的拒绝信息
	* @param [out] cb  传入接收结果回调  _1错误信息
	*/
	public native void respToAddBuddy(@Cast("int64") long userId, @Cast("int64") long apllicationId, @Cast("SysOperType") int operType, @StdString  String remark, 
										@StdString  String refuseReason, @ByVal FnCbError cb);


	/**
	* \brief 管理员响应进群的请求
	* @param [in] groupId 要进入的群ID
	* @param [in] apllicationId 请求消息的msgId
	* @param [in] operType 对此请求的操作
	* @param [in] refuseReason 附带的拒绝信息
	* @param [out] cb  传入接收结果回调  _1错误信息 
	*/
	public native void adminRespToEnterGroup(@Cast("int64") long groupId, @Cast("int64") long apllicationId, @Cast("SysOperType") int operType, @StdString  String refuseReason,
			@ByVal FnCbError cb);


	/**
	* \brief 管理员响应进群的请求
	* @param [in] groupId 要进入的群ID
	* @param [in] apllicationId 请求消息的msgId
	* @param [in] operType 对此请求的操作
	* @param [in] refuseReason 附带的拒绝信息
    * @param [out] cb  传入接收结果回调  _1错误信息 ,_2入群邀请需要验证用户集合,_3不接受入群邀请用户集合, _4直接可以进群用户集合 _5需要管理员验证的用户列表
	*/
	public native void adminRespToEnterGroupEx(@Cast("int64") long groupId, @Cast("int64") long apllicationId, @Cast("SysOperType") int operType, @StdString  String refuseReason,
			@ByVal FnCbErr4ContactVector cb);
	//virtual void adminRespToEnterGroup(int64 groupId, int64 apllicationId, SysOperType operType, const std::string &refuseReason,
	//	SFunction<void(ErrorInfo)> cb) = 0;

	/**
	* \brief 用户被邀请进群的响应
	* @param [in] groupId 要进入的群ID
	* @param [in] apllicationId 请求消息的msgId
	* @param [in] operType 对此请求的操作
	* @param [in] refuseReason 附带的拒绝信息
	* @param [out] cb  传入接收结果回调  _1错误信息 
	*/
		public native void userRespToEnterGroup(@Cast("int64") long groupId, @Cast("int64") long apllicationId, @Cast("SysOperType") int operType, @StdString  String refuseReason,
					@ByVal FnCbError cb);

	/**
	* \brief 用户被邀请进群的响应
	* @param [in] groupId 要进入的群ID
	* @param [in] apllicationId 请求消息的msgId
	* @param [in] operType 对此请求的操作
	* @param [in] refuseReason 附带的拒绝信息
	* @param [out] cb  传入接收结果回调  _1错误信息 ,_2入群邀请需要验证用户集合,_3不接受入群邀请用户集合, _4直接可以进群用户集合 _5需要管理员验证的用户列表
	*/
	public native void userRespToEnterGroupEx(@Cast("int64") long groupId, @Cast("int64") long apllicationId, @Cast("SysOperType") int operType, @StdString  String refuseReason,
			@ByVal FnCbErr4ContactVector cb);
//	virtual void userRespToEnterGroup(int64 groupId, int64 apllicationId, SysOperType operType, const std::string &refuseReason,
//		SFunction<void(ErrorInfo)> cb) = 0;

	/**
	* \brief 用户被邀请进群的响应
	* @param [in] groupId 要进入的群ID
	* @param [in] apllicationId 请求消息的msgId
	* @param [in] reqUserId 邀请者ID
	* @param [in] operType 对此请求的操作
	* @param [in] refuseReason 附带的拒绝信息
	* @param [out] cb  传入接收结果回调  _1错误信息 
	*/
	public native void userRespToEnterGroupforHL(@Cast("int64") long groupId, @Cast("int64") long apllicationId, @Cast("int64") long reqUserId, @Cast("SysOperType") int operType,
			@StdString  String refuseReason, @ByVal FnCbError cb);


	/**
	* \brief 用户被邀请进群的响应
	* @param [in] groupId 要进入的群ID
	* @param [in] apllicationId 请求消息的msgId
	* @param [in] reqUserId 邀请者ID
	* @param [in] operType 对此请求的操作
	* @param [in] refuseReason 附带的拒绝信息
	* @param [out] cb  传入接收结果回调  _1错误信息 ,_2入群邀请需要验证用户集合,_3不接受入群邀请用户集合, _4直接可以进群用户集合 _5需要管理员验证的用户列表
	*/
	public native void userRespToEnterGroupforHLEx(@Cast("int64") long groupId, @Cast("int64") long apllicationId, @Cast("int64") long reqUserId, @Cast("SysOperType") int operType,
			@StdString  String refuseReason, @ByVal FnCbErr4ContactVector cb);
	//virtual void userRespToEnterGroupforHL(int64 groupId, int64 apllicationId, int64 reqUserId, SysOperType operType,
	//	const std::string &refuseReason, SFunction<void(ErrorInfo)> cb) = 0;


	/**
	* \brief 设置消息已读 （废弃）
	* @param [in] type 传入操作类型1 好友请求验证框已读|2 好友请求返回框已读| 3 设置群验证请求消息已读|4 设置群验证响应消息已读                      
	* @param [in] msgs 传入消息id集合
	* @param [out] cb  传入接收结果回调  _1错误信息
	*/
	public native void setMessagRead(int type, @ByRef LongVector msgs, @ByVal FnCbError cb);

	/**
	* \brief 获取系统消息消息 （废弃）
	* @param [in] type  传入响应消息类型 0 全部 1 加好友请求 2 加好友响应 3 加群请求 4 加群
	* @param [in] count 传入数量
	* @param [in] time  查找的起始时间 
	* @param [in] flag   传入偏移标志 0 以传入的time起始，向下偏移，拉取小于time的消息 如果time = 0，代表从最新收到的系统消息开始拉取
	                                1 以传入的time起始，向上偏移，拉取大于time的消息. 
	* @param [out] cb  传入接收结果回调  _1错误信息  _2系统消息集合
	*/
	public native void getMessages(int type,int count,@Cast("int64") long time,int flag, @ByVal FnCbErrSysVector cb);	

	/**
	* \brief 删除全部系统消息 （废弃）
	* @param [out] cb  传入接收结果回调  _1错误信息
	*/
	public native void deleteAllMessage(@ByVal FnCbError cb);

	/**
	* \brief 通过类型删除系统消息 （废弃）
	* @param [in] type  消息类型  传入操作类型1 好友请求验证框已读|2 好友请求返回框已读| 3 设置群验证请求消息已读|4 设置群验证响应消息已读 
	* @param [in] msgIds 消息ID集合
	* @param [out] cb  传入接收结果回调  _1错误信息
	*/
	public native void deleteMessageByType(int type, @ByVal LongVector msgIds, @ByVal FnCbError cb);
}

 /*namespace service*/

// Parsed from interface/IUserService.h

// #pragma once

// #include <string>
// #include "../model/Account.h"
// #include "../model/Packet.h"
// #include "../model/Emoticon.h"
// #include "IService.h"

// #define VER_USER INTERFACE_VERSION(1,0)

@Namespace("service") public static class IUserService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IUserService(Pointer p) { super(p); }


	/*****************************************注册通知回调*******************************************/

	/**
	* \brief 朋友圈消息推送
	* @param [out] cb 注册的推送回调 _1 类型 1:朋友圈消息未读数量 _2 接收内容json串
	*/
	public native void regCircleOfFriendNotifyCb(@ByVal FnCbIntStr cb);


	/**
	* \brief 消息json推送
	* @param [out] cb 注册的推送回调 _1 类型 105:设置管理员或取消管理员 _2 接收内容json串
	*/
	public native void regNotifyMessageJsonCb(@ByVal FnCbIntStr cb);
	/**
	* \brief 监听用户头像更新
	* @param [out] cb 注册的推送回调 _1 头像有更新的UserID，联系人或者群   _2 更新的头像文件
	*/
	public native void regUserHeadImgUpdateCb(@ByVal FnCbLongStr cb);

	/**
	* \brief 设置监听用户信息更新的回调，服务器推送
	* @param [out] cb 注册的推送回调 _1 用户信息
	*/
	public native void regOperateUserCb(@ByVal FnCbAccount cb);

	/**
	* \brief 监听自己用户信息修改，登录更新后会主动推送
	* @param [out] cb 注册的推送回调 _1 用户信息
	*/
	public native void regGetMyselfCb(@ByVal FnCbAccount cb);
	
	/**
	* \brief 监听登录后，数据更新完成推送,收到推送代表更新完成
	 * @param [out] cb _1 1.代表主逻辑数据更新完成推送(目前只有此类型)
	*/
	public native void regUpdateFinished(@ByVal FnCbInt cb);
	
	/**
	* \brief 设置监听待办事项增加后的回调，服务器推送
	* @param [out] cb 待办事项增加后的推送回调, _1 备用，暂时没有使用
	*/
	public native void regAppShow(@ByVal FnCbInt cb);

	/**
	* \brief 设置监听  用户标签和动态菜单的回调，服务器推送或者sdk从数据库获取最终推送给客户端
	* @param [out] cb 用户标签和动态菜单的推送回调, _1 用户标签json字符串，_2动态菜单ClientMenu  结构体的vecotr
	*/
	public native void regGetUTagCMenu(@ByVal FnCbErrStrClientVector cb);

	/**
	* \brief 设置监听  app免打扰配置回调，服务器推送或者sdk从数据库获取最终推送给客户端
	* @param [out] cb app免打扰配置推送回调, app配置
	*/
	/*****************************************请求接口*******************************************/


	/**
	* \brief 获取账户信息，同步接口
	* @param [out] info 用户信息
	*/
	public native void getAccountInfo(@ByRef Account info);


	/**
	* \brief 更新用户信息
	* @param [in] user 传入用户信息
	* @param [out] cb  更新信息结果回调  _1错误信息
	*/
	public native void updateAccountInfo(@ByRef Account user, @ByVal FnCbError cb);

	
	/**
	* \brief 设置账号设置项
	* @param [in] flag 传入设置项属性
	* @param [in] type 传入设置项类型
	* @param [out] cb  账号设置结果回调 _1 错误信息
	*
	*  type = 1: 设置是否显示在线信息 flag: 0显示 1不显示 默认0
	*  type = 3: 设置豆豆号查找 flag: 0允许 1不允许 默认0
	*  type = 4: 设置手机号查找 flag: 0允许 1不允许 默认0
	*  type = 5: 设置邮箱号查找 flag: 0允许 1不允许 默认0
	*  type = 6: 设置分享更新   flag: 0提示更新 1不提示更新 默认0
	*  type = 7: 新消息通知是否提醒 flag: 0提醒 1不提醒 默认0
	*  type = 12: 多服务新消息通知是否提醒 flag: 0不始终提示 1始终提示 默认0
	*  type = 13: 多服务设置V标好友始终提醒 flag: 0不始终提示 1始终提示 默认0
	*  type = 14: 多服务设置设置\相关人始终提醒 flag: 0不始终提示 1始终提示 默认0
	*  type = 20: 设置新朋友查找 flag: 0允许 1不允许 默认0
	*  type = 22: 设置昵称查找 flag: 0允许 1不允许 默认0
	*/
	public native void setSetting(@Cast("int8") byte flag, int type, @ByVal FnCbError cb);


	/**
	* \brief 获取账号设置项
	* @param [in] type 传入获取的设置项类型
	* type为1，则返回值为value_i64第一位 如果type=0,返回所有字段，每个字段所占的位于type相对应\n
	* @param [out] cb 传入接收结果回调  _1错误信息  _2用户设置
	*/
	public native void getSetting(int type, @ByVal FnCbErrUserSetting cb);


	/**
	* \brief 通过密码获取隐藏对象(好友或群)
	* @param [in] passwd 之前设置过的密码
	* @param [out] cb 传入接收结果回调  _1错误信息  _2返回对象ID合集  _3 true代表存在此密码，false代表不存在
	*/
	public native void getHiddenTarget(@StdString  String passwd, @ByVal FnCbErrLongVectorBoolean cb);

	/**
	* \brief 设置隐藏对象(好友或群)
	* @param [in] passwd 设置的密码
	* @param [in] hiddenIDs 设置的隐藏对象ID集合
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setHiddenTarget(@StdString  String passwd, @ByRef LongVector hiddenIDs, @ByVal FnCbError cb);

	/**
	* \brief 删除隐藏对象(好友或群)
	* @param [in] passwd 密码
	* @param [in] hiddenIDs 要删除的对象ID集合
	* @param [out] cb 传入接收结果回调  _1错误信息 
	*/
	public native void delHiddenTarget(@StdString  String passwd, @ByRef LongVector hiddenIDs, @ByVal FnCbError cb);


	/**
	* \brief 更改隐藏密码
	* @param [in] oldPwd 旧密码
	* @param [in] newPwd 新密码
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void changeHiddenPasswd(@StdString  String oldPwd, @StdString  String newPwd, @ByVal FnCbError cb);

	/**
	* \brief 获取全局勿扰模式（旧版），仅支持单个时间段勿扰模式获取，新老版本兼容，共用ap接口
	* @param [out] cb 传入接收结果回调  _1错误信息 _2起始时间  _3结束时间  _4是否打开
	*/
	public native void getGlobalNoDisturbMode(@ByVal FnCbErr2IntBoolean cb);

	/**
	* \brief 设置全局勿扰模式（旧版），仅支持单个时间段勿扰模式设置，新老版本兼容，共用ap接口
	* @param [in] startTime  起始时间
	* @param [in] endTime 结束时间
	* @param [in] isOpen 是否打开
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setGolbalNoDisturbMode(@Cast("int32") int startTime, @Cast("int32") int endTime, @Cast("bool") boolean isOpen, @ByVal FnCbError cb);


	/**
	* \brief 获取全局勿扰模式(新版)，支持多个时间段勿扰模式获取，新老版本兼容，共用ap接口
	* @param [out] cb 传入接收结果回调  _1错误信息 _2勿扰模式list（包含起始时间，结束时间，是否打开，name）
	*/
	public native void getGlobalNoDisturbListMode(@ByVal FnCbErrglobalNoDisturbModeInfoVector cb);

	/**
	* \brief 设置全局勿扰模式，可设置多个时间段模式（新版），支持多个时间段勿扰模式设置，新老版本兼容，共用ap接口
	* @param [in] item[index].startTime  起始时间
	* @param [in] item[index].endTime 结束时间
	* @param [in] item[index].isOpen 是否打开
	* @param [in] item[index].name 名称
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setGolbalNoDisturbListMode(@ByRef globalNoDisturbModeInfoVector items, @ByVal FnCbError cb);

	/**
	* \brief 获取针对目标用户的勿扰模式
	* @param [in] targetId  用户ID
	* @param [out] cb 传入接收结果回调  _1错误信息  _2用户ID  _3设置的值:  1为接收提醒 2表示不提醒仅显示数字 3:为免打扰
	*/
	public native void getUserNoDisturbMode(@Cast("int64") long targetId, @ByVal FnCbErrLongByte cb);

	/**
	* \brief 设置针对目标用户的勿扰模式
	* @param [in] targetId  用户ID
	* @param [in] value 设置的值:  1为接收提醒 2表示不提醒仅显示数字 3:为免打扰, 默认1
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setUserNoDisturbMode(@Cast("int64") long targetId, @Cast("int8") byte value, @ByVal FnCbError cb);

	/**
	* \brief 获取针对目标消息的通知模式
	* @param [in] targetId  用户ID
	* @param [out] cb 传入接收结果回调  _1错误信息  _2用户ID _3设置的值:  1.通知详情 2.通知源，隐藏内容 3.完全隐藏 
	*/
	public native void getMsgNotifyMode(@Cast("int64") long targetId, @ByVal FnCbErrLongByte cb);

	/**
	* \brief 设置针对目标消息的通知模式
	* @param [in] targetId  用户ID
	* @param [in] value 设置的值:  1.通知详情 2.通知源，隐藏内容 3.完全隐藏  默认开启模式1
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setMsgNotifyMode(@Cast("int64") long targetId, @Cast("int8") byte value, @ByVal FnCbError cb);

	/**
	* \brief 获取服务器时间
	* @param [in] cb 传入接收结果回调  _1错误信息   _2服务器时间，单位毫秒
	*/
	public native void getServerTime(@ByVal FnCbErrLong cb);
    /**
    * \brief 获取服务器时间(同步接口)
    * @param [out] _1服务器时间，单位毫秒
    */
    public native @Cast("bool") boolean getServerTimeSync(@Cast("int64*") @ByRef LongPointer serverTime);
	/**
	* \brief 增加本地配置，以键值对方式保存
	* @param [in] items  配置信息集合
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void addLocalSetting(@ByRef LocalSettingVector items, @ByVal FnCbError cb);
	/**
	* \brief 增加本地配置，以键值对方式保存(同步接口)
	* @param [in] items  配置信息集合
	*/
	public native @Cast("bool") boolean addLocalSettingSync(@ByRef LocalSettingVector items);

	/**
	* \brief 获取本地配置
	* @param [in] keys 获取的配置信息的键集合
	* @param [out] cb 传入接收结果回调  _1错误信息  _2获取的配置信息键值对集合
	*/
	public native void getLocalSetting(@ByRef StringVector keys, @ByVal FnCbErrLocalVector cb);
	/**
	* \brief 获取本地配置(同步接口)
	* @param [in] keys 获取的配置信息的键集合
	* @param [out] result 返回的配置信息键值对集合
	*/
	public native @Cast("bool") boolean getLocalSettingSync(@ByRef StringVector keys, @ByRef LocalSettingVector result);

	/**
	* \brief 更新本地配置
	* @param [in] newItems 插入的新的配置信息集合
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void updateLocalSetting(@ByRef LocalSettingVector newItems, @ByVal FnCbError cb);
	/**
	* \brief 更新本地配置(同步接口)
	* @param [in] newItems 插入的新的配置信息集合
	*/
	public native @Cast("bool") boolean updateLocalSettingSync(@ByRef LocalSettingVector newItems);

	/**
	* \brief 设置本地配置
	* @param [in] newItems 插入或更新新的配置信息集合
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setLocalSetting(@ByRef LocalSettingVector newItems, @ByVal FnCbError cb);
	/**
	* \brief 设置本地配置(同步接口)
	* @param [in] newItems 插入或更新新的配置信息集合
	*/
	public native @Cast("bool") boolean setLocalSettingSync(@ByRef LocalSettingVector newItems);

	/**
	* \brief 删除本地配置
	* @param [in] keys 删除的配置信息的键集合
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void deleteLocalSetting(@ByRef StringVector keys, @ByVal FnCbError cb);
	/**
	* \brief 删除本地配置(同步接口)
	* @param [in] keys 删除的配置信息的键集合
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native @Cast("bool") boolean deleteLocalSettingSync(@ByRef StringVector keys);


	/**
	* \brief 设置个人设置项\n
    * @param [in] items 个人设置项集合
	*		type: 1 生日，２ 电话，３ 邮件 \n
	* 　　　　　　value:  1：所有人可见 2：仅好友可见 3：仅自己可见，默认1\n
	*		type: 4 好友验证方式 \n
	* 　　　　　　value:   1：需要验证信息, 2:不允许任何人添加, 3:允许任何人添加，默认1\n
	*		type: 5 V标好友消息提示模式\n
	*			value: 1:表示始终有声音提醒，2：表示始终无声音提醒 3:不始终提醒，默认1\n
	*		type: 6 \相关人消息提醒模式\n
	*			value: 1:表示始终有声音提醒，2：表示始终无声音提醒 3:不始终提醒，默认1\n
	*		type: 7 全局通知消息内容展现模式\n
	*           value: 1:通知详情，2：通知源，隐藏内容 3:完全隐藏，默认2\n
	*		type: 24 语音视频消息提醒开关\n
	*           value：1：开启，2：关闭，默认2\n
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setPersonalData(@ByVal PersonalDataVector items, @ByVal FnCbError cb);

	/**
	* \brief 获取个人设置项
	* @param [out] cb 传入接收结果回调  _1错误信息  _2个人设置项集合
	*/
	public native void getPersonalData(@ByRef FloatVector types, @ByVal FnCbErrDataVector cb);

	/**
	* \brief 通过应用ID获取应用信息
	* @param [in] appId 应用程序ID
	* @param [out] cb 传入接收结果回调  _1错误信息  _2应用信息
	*/
	public native void getAppInfo(@Cast("int64") long appId, @ByVal FnCbErrEntApp cb);
	/**
	* \brief 查询应用市场应用信息新增群应用功能
	* @param [in] qData 传入应用市场分页查询条件
	* @param [out] cb 传入接收结果回调  _1错误信息  _2查询到的结果，应用信息列表
	*/
	public native void queryMarketApplication(@ByRef QueryMarketApplication qData, @ByVal FnCbErrAppPage cb);

	/**
	* \brief 查询应用轨迹位置信息
	* @param [in] appID 查询轨迹的appID
	   @param [in] posMessage 轨迹消息posMessage
	* @param [out] cb 传入接收结果回调  _1错误信息 
	*/
	public native void sendTrackInfo(@Cast("int64") long appID,@StdString  String posMessage,@ByVal FnCbError cb);

	/**
	* \brief 删除添加应用
	* @param [in] type 传入的查询类型： 2.添加应用  4.删除应用
	* @param [in] appID 操作的appID
	* @param [out] cb 传入接收结果回调  _1错误信息 
	*/
	public native void addOrDeleteApplication(@Cast("int8") byte type, @Cast("int64") long appID, @ByVal FnCbError cb);

	/**
	* \brief 客户端(工作台)群主/管理员忽略/添加群应用接口
	* @param [in] struct IgnoreMarketAppBean {
	*								int64 relationId;  操作关联ID 
	*								int64 vestAppId;    应用号ID 
	*								int64 relationIdType;   关联ID类型;1.用户 2.群 
	*								int64 operatorId;       操作者ID 
	*								int8 operatorType;     操作类型1添加 2忽略 
	*                                       }
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void IgnoreMarketApp(@ByVal IgnoreMarketAppBean AppBean, @ByVal FnCbError cb);

	/**
	* \brief 获取已安装的应用
	* @param [in] deviceType: 2.IOS 3.Android
	* @param [out] cb 传入接收结果回调  _1错误信息 _2应用信息列表
	*/
	public native void getInstalledApplication(@Cast("int32") int deviceType, @ByVal FnCbErrAppVector cb);
	/**
	* \brief 通过标签查询表情包
	* @param [in] label 表情包标签
	* @param [out] cb  传入接收结果回调  _1错误信息 _2查询表情包结果集合
	*/
	public native void QueryEmoticonPackageByLabel(@StdString  String label, @ByVal FnCbErrEmoPackVector cb);
	/**
	* \brief 单个表情查询、根据表情包标识查询表情，查询用户自定义表情
	* @param [in] type  1, 单个查询表情 md5Code表示单个表情的md5, 6,根据表情包标识查询所有表情 md5Code表示表情包的md5, 7,查询用户所有自定义表情 这里md5Code不传值
	* @param [in] md5   md5值
	* @param [out] cb 传入接收结果回调  _1错误信息 _2查询的表情结果信息
	*/
	public native void queryEmoticon(@Cast("int8") byte type, @StdString  String md5, @ByVal FnCbErrEmoVector cb);
	/**
	* \brief 查询单个表情包
	* @param [in] md5   md5值
	* @param [out] cb 传入接收结果回调  _1错误信息 _2查询表情包结果
	*/
	public native void singleQueryEmoticonPackage(@StdString  String md5, @ByVal FnCbErrEmoPack cb);
	/**
	* \brief 分页查询表情包
	* @param [in] pageNum   页码
	* @param [in] pageSize   页长
	* @param [out] cb 传入接收结果回调  _1错误信息 _2返回的分页查询信息
	*/
	public native void pageQueryEmoticon(@Cast("int32") int pageNum, @Cast("int32") int pageSize, @ByVal FnCbErrPageQueryEmo cb);

	/**
	*\brief 查选单个表情包内的单个表情
	*@param [in] packageCode 表情包md5 
	*@param [in] emotCode  表情md5
    * @param [out] cb 传入接收结果回调  _1错误信息 _2查询表情结果
	*/
	public native void queryEmotionInPackage(@StdString  String packageCode, @StdString  String emotCode, @ByVal FnCbErrSgEmoticonResult arg2);

	/**
	*\brief 表情包一期接口，删除表情包本地存储，卸载使用
	*@param [in] packageCode 表情包md5
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void deleteEmoticonPackageLocal(@StdString  String arg0, @ByVal FnCbError cb);

	/**
	*\brief 表情包一期接口，设置表情包已读
	*@param [in] packageCode 表情包md5
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setEmoticonPackageRead(@StdString  String arg0, @ByVal FnCbError cb);

	/**
	*\brief 表情包一期接口，将用户需要的表情包加载到本地，表情包信息需要从网络获取
	*@param [in] vecPackCode 需要加载到本地的表情包md5的集合
	*@param [in] bIsRead false表示未读，true表示已读
	* @param [out] cb 传入接收结果回调  _1错误信息 _2成功的表情包列表 _3失败的表情包列表
	*/
	public native void addEmoticonPackageNetToDb(@ByRef StringVector arg0, @Cast("bool") boolean bIsRead, @ByVal FnCbErr2StrVector cb);

	/**
	*\brief 表情包一期接口，将用户需要的表情包加载到本地，表情包信息从本地获取
	*@param [in] vecPackage 需要加载到本地的表情包的集合
	* @param [out] cb 传入接收结果回调  _1错误信息 _2成功的表情包列表 _3失败的表情包列表
	*/
	public native void addEmoticonPackageLocalToDb(@ByRef EmoticonPackageVector arg0, @ByVal FnCbErr2StrVector cb);



	/**
	* \brief 获取所有已下载的自定义表情，仅支持本服务器查看，因为自定义表情排序无法修改其他服务器的orderNum
	* \out   表情列表
	* @return 是否正常返回
	*/
	public native @Cast("bool") boolean getAllEmoticonLocal(@ByRef EmoticonVector vecEmoticon);
	/**
	*\brief 表情包一期接口，获取所有已下载的表情包,如果服务器允许多服务器查看，其他在线服务器的表情包也在里面
	* \out   表情包列表
	* @return 是否正常返回
	*/
	public native @Cast("bool") boolean getAllEmoticonPackageLocal(@ByRef EmoticonPackageVector vecEmoticonPack);

	/**
	* \brief 增删自定义表情
	* @param [in] type   类型  4 自定义表情的收藏操作通知到服务器， 5自定义表情的取消收藏操作通知到服务器
	* @param [in] emot   表情   
	* @param [out] cb 传入接收结果回调  _1错误信息 _2resultCode（
	*0:操作成功
	*100026500:表情包参数错误
	*100026501:表情包添加数据库错误
	*100026502:表情包删除数据库错误
	*100026503:表情包时间戳错误
	*100026504:批量表情超过最大数量
	*100026505:表情包需要拉取
	*100026506:表情已存在）
	*_3表情包结果列表 _4自定义表情结果列表
	*       如果出现resultCode为100026505或者_3表情包结果列表有值或者_4自定义表情结果列表有值说明服务器跟客户端没有完全同步，需要调用获取服务器的接口继续同步更新
	*/
	public native void addOrDeleteCustomEmoticon(@Cast("int8") byte type, @ByRef Emoticon emot, @ByVal FnCbErrInt2Vector cb);

	/**
	* \brief 下载或卸载表情包
	* @param [in] type   类型  4 下载安装表情包通知服务器， 5卸载表情包通知服务器
	* @param [in] emot   表情包   
	* @param [out] cb 传入接收结果回调  _1错误信息 _2resultCode（
	*0:操作成功
	*100026500:表情包参数错误
	*100026501:表情包添加数据库错误
	*100026502:表情包删除数据库错误
	*100026503:表情包时间戳错误
	*100026504:批量表情超过最大数量
	*100026505:表情包需要拉取
	*100026506:表情已存在）
	*_3表情包结果列表 _4自定义表情结果列表
	*       如果出现resultCode为100026505或者_3表情包结果列表有值或者_4自定义表情结果列表有值说明服务器跟客户端没有完全同步，需要调用获取服务器的接口继续同步更新
	*/
	public native void installOrUninstallEmoticonPackage(@Cast("int8") byte type, @ByRef EmoticonPackage emot, @ByVal FnCbErrInt2Vector cb);

	/**
	* \brief 表情包二期接口，根据userid和本地表情时间戳,获取表情包的增量信息进行同步
	* @param [out] cb 传入接收结果回调  _1错误信息 _2resultCode（
	*0:操作成功
	*100026500:表情包参数错误
	*100026501:表情包添加数据库错误
	*100026502:表情包删除数据库错误
	*100026503:表情包时间戳错误
	*100026504:批量表情超过最大数量
	*100026505:表情包需要拉取
	*100026506:表情已存在）
	*_3表情包结果列表 _4自定义表情结果列表
	*       如果出现resultCode为100026505或者_3表情包结果列表有值或者_4自定义表情结果列表有值说明服务器跟客户端没有完全同步，需要调用获取服务器的接口继续同步更新
	*/
	public native void syncEmoticonFromNet(@ByVal FnCbErrInt2Vector cb);


	/**
	* \brief 表情包二期接口，排序自定义表情
	*@param [in] vecEmoticon 需要重新排序的本地的自定义表情的集合
	* @param [out] cb 传入接收结果回调  _1错误信息 _2resultCode（
	*0:操作成功
	*100026500:表情包参数错误
	*100026501:表情包添加数据库错误
	*100026502:表情包删除数据库错误
	*100026503:表情包时间戳错误
	*100026504:批量表情超过最大数量
	*100026505:表情包需要拉取
	*100026506:表情已存在）
	*_4表情包结果列表 _5自定义表情结果列表
	*       如果出现resultCode为100026505或者_3表情包结果列表有值或者_4自定义表情结果列表有值说明服务器跟客户端没有完全同步，需要调用获取服务器的接口继续同步更新
	*/
	public native void sortCustomEmoticon(@ByRef EmoticonVector arg0, @ByVal FnCbErrInt2Vector cb);


	/**
	* \brief 表情包二期接口，批量导入自定义表情
	*@param [in] vecEmoticon 需要批量导入的本地的表情的集合
	* @param [out] cb 传入接收结果回调  _1错误信息 _2resultCode（
	*0:操作成功
	*100026500:表情包参数错误
	*100026501:表情包添加数据库错误
	*100026502:表情包删除数据库错误
	*100026503:表情包时间戳错误
	*100026504:批量表情超过最大数量
	*100026505:表情包需要拉取
	*100026506:表情已存在）
	*_4表情包结果列表 _5自定义表情结果列表
	*       如果出现resultCode为100026505或者_3表情包结果列表有值或者_4自定义表情结果列表有值说明服务器跟客户端没有完全同步，需要调用获取服务器的接口继续同步更新
	*/
	public native void addCustomEmoticons(@ByRef EmoticonVector arg0, @ByVal FnCbErrInt2Vector cb);


	/**
	* \brief 本地数据导入导出
	* @param [in] req   导入导出数据的路径等参数信息
	* @param [out] cb 传入接收结果回调  _1错误信息 
	* @param [out] pro _1  进度标示 _2进度 _3 已经导入文件数量/导入文件总数量
	*/
	public native void transLocalData(@ByRef transferLocalData req, @ByVal FnCbError cb, @ByVal FnCb2IntStr pro);
	/**
	* \brief 设置自定义提示音
	* @param [in] userId   用户ID id为0代表设置自己
	* @param [in] voiceName   声音文件
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setUserDefineVoice(@Cast("int64") long userId, @StdString  String voiceName, @ByVal FnCbError cb);
	/**
	* \brief 获取用户自定义提示音
	* @param [in] userId   用户ID id为0代表获取用户自己
	* @param [out] cb 传入接收结果回调  _1错误信息 _2声音文件
	*/
	public native void getUserDefineVoice(@Cast("int64") long userId, @ByVal FnCbErrStr cb);
	/**
	* \brief 通过账号名获取用户ID
	* @param [in] accounts   用户accountName集合
	* @param [out] cb 传入接收结果回调  _1错误信息 _2用户ID集合，key为account value为用户ID
	*/
	public native void getIdByAccount(@ByRef StringVector accounts, @ByVal FnCbErrStrLongMap cb);
	/**
	* \brief 设置在线状态
	* @param [in] flag  1:在线,2:隐身,3:忙碌,4:离开,5:请勿打扰
	* @param [out] cb 传入接收结果回调  _1错误信息 
	*/
	public native void setOnlineState(@Cast("int8") byte flag, @ByVal FnCbError cb);

	/**************IOS专用接口 begin***************/

	/**
	* \brief IOS设置Token
	* @param [in] appleId  需要设置的appleId
	* @param [in] token  需要设置的token
	* @param [in] isDev  是否是开发版
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
    public native void setToken(@StdString  String appleId, @StdString  String token, @StdString  String cloudToken, @Cast("bool") boolean isDev, @ByVal FnCbError cb);

	/**
	* \brief 设置后台在线状态
	* @param [in] vb1  设置云后台在线(true 在线, false 不在线)
	* @param [in] vb2  设置应用在线(true在线)
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setOnlineStatus(@Cast("bool") boolean vb1,@Cast("bool") boolean vb2, @ByVal FnCbError cb);

	/**
	* \brief 设置当前人的会话对象ID（中电科）
	* @param [in] targetId  对象的id 聊天对象，用户ID　或　群ID
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setSessionPeerId(@Cast("int64") long targetId, @ByVal FnCbError cb);
	/**
	* \brief  批量设置token 
		    传入参数：
	*@param [in]  
				 appID: "XiaoMi"  不能为空，必填，小米可填写"XiaoMi"
				 token:token值  
				 deviceType:"0"苹果 "1"华为 "2"小米 "3"中电科EMM  "4"小米
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setTokens(@StdString  String appId,@StdString  String token,@StdString  String deviceType, @ByVal FnCbError cb);
	/**
	* \brief ios设置是否推送
	* @param [in] isPush 是否推送
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setPushSwitch(@Cast("bool") boolean isPush, @ByVal FnCbError cb);

	/**
	* \brief  ios设置客户端消息未读数量
	* @param [in] count 未读数量
	* @param [in] appleId  应用id，不同的应用所对应的证书是不一样的.
	* @param [in] token  ios token
	* @param [in] entUnread  设置企业未读数 key：企业ID， value:消息未读数
	* @param [out] cb 传入接收结果回调  _1错误信息
	*/
	public native void setUnReadCount(int count, @StdString  String appleId, @StdString  String token, @ByRef StringIntMap entUnread, @ByVal FnCbError cb);

	/**
	* \brief  获取用户应用安装天数
	* @param [out] cb 传入接收结果回调  _1错误信息 _2使用天数
	*/
	public native void getInstallDays(@ByVal FnCbErrInt cb);
	
	/**
	*\brief 根据用户id分页获取企业号或应用号
	* @param [in] req 分页获取条件（页码，每页大小）
	*@param [out] cb 传入接收结果回调 _1错误信息 _2总数量 _3总页数 _4 获取结果集合
	*/
	public native void getEntAppInfo(@ByRef reqEntAppInfo req,@ByVal FnCbLongLongEntAppInfo cb);

	/**
	*\brief 朋友圈接口
	*\Param[in] reqJson 请求json
	*\Param[in] loginfoPath 登录信息保存路径
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2响应json
	*/
	public native void circleOfFriend(@StdString  String reqJson, @StdString  String loginfoPath, @ByVal FnCbErrStr cb);

	/**
	* \brief 根据用户账号批量获取userID
	*\Param[in] accounts 帐号名称集合 手机号前加0086
	*\Param[in] type   1.电话号码 3.email 4.userID 6.accountName
	*\Param[in] status 状态  1.启用， 2.禁用, 5.锁定, 6.冻结
	*\Param[in] SDKID 服务器ID  vrv服务器传0
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2批量获取结果(key:type+"-"+contactInfo+"-"+SDKID, value:UserID)
	*/
	public native void queryUserIDByAccount(@ByRef StringVector accounts, @Cast("int8") byte type, @Cast("int8") byte status, @Cast("int64") long SDKID, @ByVal FnCbErrStrLongMap cb);

	/**
	* \brief 新增更新或者删除在线扩展信息，如客户端的ip，mac地址等，内容是客户端自己设定，通过DDIO获取
	*\Param[in] type 4,新增或更新， 5 删除
	*\Param[in] str
	*\Param[out] cb 传入接口结果回调，_1错误信息
	*/
	public native void operOnlineExt(@Cast("int8") byte type, @StdString  String str, @ByVal FnCbError cb);
	/**
	* \brief 查询在线扩展信息，不需要入参，返回所有设备设置的在线拓展信息
	*\Param[out] cb 传入接口结果回调，_1错误信息 _2批量查询结果，key是devicetype，value是jsonExt
	*/
	public native void queryOnlineExt(@ByVal FnCbErrMapStrStr cb);

    /**
    * \brief 透传JSON格式请求
    *\Param[in] reqJson  请求Json串
    *\Param[in] type    服务类型  1:调用声网服务 2:原生朋友圈 3:原生云盘 4:豆豆邮件
    *\Param[out] cb 传入接口结果回调，_1错误信息  _2返回的json
    */
    public native void queryJson(@StdString  String reqJson, @Cast("int8") byte type, @ByVal FnCbErrStr cb);

	/**
	* \brief 意见反馈
	*\Param[in] feedBackParam 反馈信息
	*\Param[out] cb 传入接口结果回调，_1错误信息
	*/
	public native void feedBack(@ByRef IssueFeedBack feedBackParam, @ByVal FnCbError cb);

    /**
    * \brief 获取工作台轮播图
    *\Param[in] cliType 客户端类型   1：Android 2：iOS
    *\Param[out] cb 传入接口结果回调，_1错误信息 _2轮播图结果
    */
    public native void getWorkBenchBanners(@Cast("int32") int cliType, @ByVal FnCbErrWorkbenchBannerVector cb);

    /**
    * \brief 获取帮助系统信息
    *\Param[in] cliType 客户端类型   1：PC 2:Android 3:iOS
    *\Param[in] parentId 父帮助ID    获取初始信息传0
    *\Param[out] cb 传入接口结果回调，_1错误信息 _2帮助信息结果
    */
    public native void getHelpSystemInfo(@Cast("int32") int cliType, @Cast("int64") long parentId, @ByVal FnCbErrHelpSysInfoVector cb);

    /**
    * \brief 设置用户扩展信息
    *\Param[in] account 帐号名称 手机号前加0086
    *\Param[in] type   1.电话号码 3.email 4.userID 6.accountName
    *\Param[in] status 状态  1.启用， 2.禁用, 5.锁定, 6.冻结
    *\Param[in] SDKID 服务器ID  vrv服务器传0
    *\Param[in] mark 标识
    *\Param[out] cb 传入接收结果回调 _1错误信息 
    */
    public native void updateExtendInfo(@StdString  String account, @Cast("int8") byte type, @Cast("int8") byte status, @Cast("int64") long SDKID, @StdString  String mark, @ByVal FnCbError cb);

	/**
	* \brief 判断目标用户是否在用户设置名单中(黑名单, 或者白名单)      
    *\Param[in] queryType   1.黑名单 2.白名单
    *\Param[in] entId       当queryType==2的时候设置， 表示企业ID
    *\Param[in] targetId    目标ID,如果查询自己是否在别人黑名单中,targetId传自己ID,entId传对方ID
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2查询结果 1.在名单中, 2.不在名单中
	*/
	public native void queryUserIsExistList(@Cast("int8") byte queryType, @Cast("int64") long entId, @Cast("int64") long targetId, @ByVal FnCbErrByte cb);
	
	/**
	* \brief 授权登录接口
	*\Param[in] operType	操作类型 1.校验二维码 2.允许授权 3.获取授权码
	*****以下参数根据operType具有不同意义*****
	*\Param[in] cliType		1.账户类型(1,手机 3,邮箱...) 3.客户端类型(2,Android 3,iOS)
	*\Param[in] appId		应用Id，operType=2时不用传
	*\Param[in] param		1.2.二维码uuId 3.应用包名
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2授权结果
	*/
	public native void getOauthCode(@Cast("int8") byte operType, @Cast("int8") byte cliType, @Cast("int64") long appId, @StdString  String param, @ByVal FnCbErrOAuth cb);

	/**
	* \brief 创建工作台应用房间
	*\Param[in] info   房间信息
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2房间id
	*/
	public native void createAppRoom(@ByVal AppRoomInfo info, @ByVal FnCbErrLong cb);

	/**
	* \brief 工作台房间信息更新
	*\Param[in] id   房间id
	*\Param[in] name   房间名称
	*\Param[out] cb 传入接收结果回调 _1错误信息
	*/
	public native void updateAppRoomInfo(@Cast("int64") long id, @StdString  String name, @StdString  String icon, @ByVal FnCbError cb);

	/**
	* \brief 工作台应用房间成员更新
	*\Param[in] id   房间id
	*\Param[in] type   更新类型 1.添加成员 2.删除成员 （删除后房间成员为空，会自动删除房间)
	*\Param[out] cb 传入接收结果回调 _1错误信息
	*/
	public native void updateAppRoomMem(@Cast("int64") long id, int type, @ByVal LongVector memIds, @ByVal FnCbError cb);

	/**
	* \brief 设置工作台排序信息
	*\Param[in] orderInfo   全量的排序信息
	*\Param[out] cb 传入接收结果回调 _1错误信息
	*/
	public native void setAppOrder(@ByVal AppOrderVector orderInfo, @ByVal FnCbError cb);

	/**
	* \brief 获取工作台已安装应用排好序(没有设置过排序信息, 则时未排序的bool标识)
	*\Param[in] deviceType: 1.pc 2.IOS 3.Android
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2是否排序 _3应用列表
	*/
	public native void getInstalledApplicationSorted(@Cast("int32") int deviceType, @ByVal FnCbErrBoolMarketAppGroupVector cb);

	/**
	* \brief 添加本地应用
	*\Param[in] info   应用信息
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2应用id
	*/
	public native void addLocalApp(@ByVal LocalAppInfo info, @ByVal FnCbErrLong cb);
	/**
	* \brief 删除本地应用
	*\Param[in] appId   应用id
	*\Param[out] cb 传入接收结果回调 _1错误信息
	*/
	public native void deleteLocalApp(@Cast("int64") long appId, @ByVal FnCbError cb);

	/**
	* \brief 获取本地应用列表
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2应用列表
	*/
	public native void getLocalAppList( @ByVal FnCbErrLocalAppInfoVector cb);

	/**
	* \brief 获取登录设备记录
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2应用列表
	*/
	public native void getDeviceLoginRecord(@ByVal FnCbErrDeviceLoginRecordVector cb);

	/**
	* \brief 获取工作密集列表
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2应用列表
	*/
	public native void getSecurityList(@ByVal FnCbErrSecurityVector cb);

	/**
	* \brief 删除登录设备记录
	*@param [in] macAddrs 用户登录设备mac地址列表
	*\Param[out] cb 传入接收结果回调 _1错误信息 
	*/
	public native void deleteDeviceLoginRecord(@ByVal StringVector macAddrs, @ByVal FnCbError cb);
	/**
	*\brief 获取应用市场应用分类集合
	*\Param[in] filterCondition 过滤条件，暂时没有过滤条件
	*\Param[out]  _1 int64 应用分类id _2 string 应用分类名称
	*/
	//virtual void getMarketAppSort(std::map<std::string, std::string> &filterCondition, SFunction<void(ErrorInfo, std::vector<smallMarketAppType>&)> cb) = 0;
	/**************IOS专用接口 end***************/

	/**************安卓专用接口 begin***************/
    /**
    *\brief 安卓事件通知
    *\Param[out]  cb 传入接收结果回调 _1错误信息
    */
	public native void wakeUp(@ByVal FnCbError cb);
	/**************安卓专用接口 end***************/
	/**
	* \brief 拉取待办事项列表
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2待办事项列表
	*/
	public native void getAgencyList(@ByVal FnCbErragencymsgVector cb);

	/**
	* \brief 根据用户ID集合查询用户的设备信息,豆豆版本
	*\Param[in] userIDVt 用户的userID集合
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2返回的设备信息和豆豆版本信息列表
	*/
	public native void getLoginClientRecord(@Const @ByVal LongVector userIDVt, @ByVal FnCbErrLongLoginClientRecordVectorMap cb);

	/**
	*\brief 获取客户端应用浏览器的应用服务开关总值
	* @param [in] appId appId应用Id
	*@param [out] cb 传入接收结果回调 _1错误信息 _2开关总值
	*/
	public native void getSmallAppHelpFlagValue(@Cast("int64") long appId, @ByVal FnCbErrInt cb);

	/**
	*\brief 获取客户端应用浏览器的帮助获取帮助列表
	* @param [in] appId appId应用Id
	* @param [in] parentId 帮助父Id
	*@param [out] cb 传入接收结果回调 _1错误信息 _2帮助列表
	*/
	public native void getSmallAppHelpList(@Cast("int64") long appId, @Cast("int64") long parentId, @ByVal FnCbErrSmallAppHelpVector cb);

	/**
	*\brief 备份数据库
	*@param [out] cb 传入接收结果回调 _1错误信息 
	*@param [out] pro 进度回调 _1extra_req  _2process _3title
	*/
	public native void backupDB(@ByVal FnCbError cb, @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void backupDB(@ByVal FnCbError cb);
	/**
	* \brief 从网络拉取新待办事项列表
	* @param [in] userId 当前用户id
	* @param [in] type 任务状态 1待办 2已办
	* @param [in] pageNum 页码 如果-1 查询全量数
	* @param [in] pageSize 每页大小
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2待办事项列表
	*/
	public native void getAgencyListEx(@Cast("int64") long userID, @Cast("int8") byte type, int pageNum, int pageSize, @ByVal FnCbErragencyTaskMsg cb);
	/**
	* \brief 本地同步获取已完成和未完成列表数
	* @param [in] userId 当前用户id
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2已完成 _3未完成
	*/
	public native void getAgencyListCompleteCnt(@Cast("int64") long userId, @ByVal FnCbErr2Long cb);
	/**
	* \brief 拉取本地待办事项列表分页展示
	* @param [in] flag 待办已办标志，代办传0，已办传1
	* @param [in] msgId 起始消息ID，只能从新往旧查询，如果是第一页查询参数传0，如果是第一页之后的页数传入上一页最后一条消息ID减去1
	* @param [in] count 查询的条数
	*\Param[out] cb 传入接收结果回调 _1错误信息 0表示成功，100表示参数错误，其他返回码表示失败 _2待办事项列表
	*/
	public native void getAgencyListExByFlag(@Cast("int8") byte flag, @Cast("int64") long msgId, int count, @ByVal FnCbErrToDoTaskMsgVector cb);

	/**
	* \brief 工作台任务设置已读和未读
	* @param [in] userId 当前用户id
	* @param [in] flag 当前用户设置待办任务已读状态
	* @param [in] msgID 消息ID
	*\Param[out] cb 传入接收结果回调 _1错误信息
	*/
	public native void setAgencyListRead(@Cast("int64") long userId, @Cast("int8") byte flag, @Cast("int64") long msgID, @ByVal FnCbError cb);
	/**
	* \brief 获取本地筛选条件（来源和标签展示）
	* @param [in] userId 当前用户id
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2来源 _3标签
	*/
	public native void getAgencyListScreenItem(@Cast("int64") long userId, @ByVal FnCbErrLongVectorStrVector cb);
	/**
	* \brief 任务代办分页展示本地筛选结果
	* @param [in] flag 待办已办标志，代办传0，已办传1
	* @param [in] msgId 起始消息ID，只能从新往旧查询，如果是第一页查询参数传0，如果是第一页之后的页数传入上一页最后一条消息ID减去1
	* @param [in] count 查询的条数
	* @param [in] startTime 开始时间
	* @param [in] endTime 结束时间，开始时间和结束时间要么都有值，要么都是0
	* @param [in] appIds 业务来源
	* @param [in] urgeflag 催办状态,0表示不催办，1表示催办
	* @param [in] tags 标签
	*\Param[out] cb 传入接收结果回调 _1错误信息 0表示成功，100表示参数错误，其他返回码表示失败 _2待办事项列表
	*/
	public native void disAgencyListScreenResults(@Cast("int8") byte flag, @Cast("int64") long msgId, int count, @Cast("int64") long startTime, @Cast("int64") long endTime, @ByVal LongVector appIds, @Cast("int8") byte urgeflag, @ByVal StringVector tags, @ByVal FnCbErrToDoTaskMsgVector cb);
	/**
	* \brief 任务代办本地搜索分页展示结果（关键词按标题和内容搜索）
	* @param [in] flag 待办已办标志，0表示代办，1表示已办
	* @param [in] msgId 起始消息ID，只能从新往旧查询，如果是第一页查询参数传0，如果是第一页之后的页数传入上一页最后一条消息ID减去1
	* @param [in] count 查询条数
	* @param [in] keyWord 搜索关键词
	*\Param[out] cb 传入接收结果回调 _1错误信息 0表示成功，100表示参数错误，其他返回码表示失败 _2待办事项列表
	*/
	public native void searchLocalAgencyListByKey(@Cast("int8") byte flag, @Cast("int64") long msgId, int count, @StdString  String keyWord, @ByVal FnCbErrToDoTaskMsgVector cb);
	/**
	* \brief 展示历史搜索记录
	* @param [in] userId 当前用户id
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2待办事项列表
	*/
	public native void disHistoryAgencyListRecords(@Cast("int64") long userId, @ByVal FnCbErrStrVector cb);
	/**
	* \brief 清空历史搜索记录
	* @param [in] userId 当前用户id
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2待办事项列表
	*/
	public native void delHistoryAgencyListRecords(@Cast("int64") long userId, @ByVal FnCbError cb);
	/**
	* \brief 获取栏目的应用列表
	* @param [in] menuCode 选择的栏目
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2栏目对应的信息
	*	code 0:成功
	*/
	public native void getAppListByMenuCode(@ByVal AppListMenuCode menuCode, @ByVal FnCbErrAppListMenu cb);
	/**
	* \brief 获取栏目的应用列表
	* @param [in] menuCode 选择的栏目
	*\Param[out] cb 传入接收结果回调 _1错误信息 _2栏目对应的信息
	*/
	public native void getAppListByMenuSeq(@Cast("int32") int menuCode, @ByVal FnCbErrAppListMenu cb);
	/**
	* \brief 待办任务点击按钮根据用户的决策，回馈消息给应用
	* @param [in] appID 应用号
	* @param [in] body  用户决策信息
	*\Param[out] cb 传入接收结果回调 _1错误信息 0表示成功，100表示参数错误，其他返回码表示失败
	*/
	public native void pushMsgToApp(@Cast("int64") long appID, @StdString  String body, @ByVal FnCbError cb);
	
	
	
		/*
	用户设置公共号配置项(setUserToAppConfig)
	* @param[in]：userToAppConfig.appId公共号id
	              userToAppConfig.type配置类型1消息提醒（勿扰模式）
	              userToAppConfig.value 1:为接收提醒 2:表示不提醒仅显示数字 3:为免打扰
	*@param[out] cb 传入接收结果回调 _1错误信息: 0:成功
	                                             100:参数错误
	                                             11100:内部错误
	                                             100013006:失败
	*/
	public native void setUserToAppConfig(@Cast("int64") long appID, @Cast("int8") byte type, int value, @ByVal FnCbError cb);

	/*
	获取用户设置的公共号配置项列表(getUserToAppConfigList)
	* @param[in]：userToAppConfig.timestamp时间戳 （客户端给0获取本地配置表）
	              userToAppConfig.type类型 1消息提醒（勿扰模式）
	*@param[out] cb 传入接收结果回调 _1错误信息: 0:成功            _2用户配置集合
	                                             100:参数错误
	                                             11100:内部错误
	*/
	public native void getUserToAppConfigList(@Cast("int64") long timestamp, @Cast("int8") byte type, @ByVal FnCbErrstrc_UserToAppConfigVector cb);
	/**
	* \brief 获取服务器已安装的应用返回给客户端，客户端判断更新
	* @param [in] deviceType: 1.PC 2.IOS 3.Android
	* @param [out] cb 传入接收结果回调  _1错误信息 _2应用信息列表
	*/
	public native void getInstalledAppFromNet(@Cast("int32") int deviceType, @ByVal FnCbErrMarketAppInfoVector cb);
	/*
	 获取当前用户绑定的后台管理员角色信息，返回结构体
	 * @param[in]：无
	 *@param[out] cb 传入接收结果回调  _1错误信息 _2授权结果
	 民情通 [2/25/2021 zhuohc]
	*/
	public native void getAdminRoleInfo(@ByVal FnCbErrAdminRoleInfo cb);
	/*
	获取当前用户绑定的后台管理员角色信息，返回json字符串
	* @param[in]：无
	*@param[out] cb 传入接收结果回调  _1错误信息 _2授权结果({"superAdmin":false,"adminName":"","adminAccount":""})
	民情通 [3/8/2021 zhuohc]
	*/
	public native void getAdminRoleInfoJson(@ByVal FnCbErrStr cb);

}

 /*namespace service*/


// Parsed from interface/IService.h

// #pragma once

// #include "IMUnkown.h"


//此接口为所有service的父类。
@Namespace("service") public static class IService extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IService(Pointer p) { super(p); }

	public native @Cast("unsigned int") int version();
}

@Namespace("service") public static class NullService extends IService {
    static { Loader.load(); }
    /** Default native constructor. */
    public NullService() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NullService(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NullService(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NullService position(long position) {
        return (NullService)super.position(position);
    }

	public native @Cast("unsigned int") int version();

}


//通过版本号获取Service对象并向下转型的方法
// #define SERVICE_GET(type, client, IID, VERSION) std::dynamic_pointer_cast<type>(client->queryInterface(IID, VERSION))

 /*namespace service*/



// Parsed from interface/IMClient.h

// #pragma once

// #include <string>
// #include "IService.h"

// #ifdef   SERVICE_EXPORTS
// #ifdef _WIN32
// #else
// #define SERVICE_API 
// #endif
// #else
// #endif

// #define VER_IMCLIENT INTERFACE_VERSION(1,0)

@Namespace("service") @Opaque public static class IMailService extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IMailService() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IMailService(Pointer p) { super(p); }
}
@Namespace("service") @Opaque public static class IKssService extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IKssService() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IKssService(Pointer p) { super(p); }
}
@Namespace("service") @Opaque public static class IGaService extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IGaService() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IGaService(Pointer p) { super(p); }
}
//class ILoggingService;
//class IOrgService;

@Namespace("service") public static class IMClient extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IMClient(Pointer p) { super(p); }

	//IMClient(const IMClient&) = delete;
	//IMClient& operator = (const IMClient&) = delete;

	/**
	* \brief 初始化客户端
	* @param [in] dataPath 数据存储路径
	* @param [in] certPath 证书路径
	* @param [in] appName 应用名
	* @return clientId
	*/
	public native int init(@StdString  String dataPath, @StdString  String certPath, @ByRef AppInfo info);

	/**
	* \brief 反初始化客户端
	*/
	public native void uninit();

	/**
	* \brief 清除所有通知回调
	*/
	public native void clearAllNotifyCb();

	/**
	* \brief 日志打印
	* @param [in] lvl 日志等级 0:debug 1:trace 2:notice 3: warn 4: err
	* @param [in] info 日志内容，不超过1k大小
	*/
	public native void loglog(int lvl, @StdString  String info);

// #ifdef _WIN32
// #elif __linux__
// #elif __APPLE__
// #endif

// #ifdef SDK_FOR_ANDROID

	//提供给安卓的非版本控制的service的方法
	public native @Cast("bool") boolean getReponse();		//安卓获取回调的方式，需要循环调用

	public native @SharedPtr IAuthService authService();
	public native @SharedPtr IUserService userService();
	public native @SharedPtr IContactService contactService();
	public native @SharedPtr ISearchService searchService();
	public native @SharedPtr IFileService fileService();
	public native @SharedPtr IGroupService groupService();
	public native @SharedPtr IChatService chatService();
	public native @SharedPtr ISysMsgService sysMsgService();
	public native @SharedPtr IExtService extService();
	public native @SharedPtr IConfigService configService();
	public native @SharedPtr IFaceToFaceService faceToFaceService();
	public native @SharedPtr IRtcService rtcService();
	public native @SharedPtr IMailService MailService();
	public native @SharedPtr ICloudService cloudService();
	public native @SharedPtr IKssService kssService();
    public native @SharedPtr IGaService gaService();
    public native @SharedPtr IGaInterService gaInterService();
	//virtual SSharedPtr<ILoggingService> loggingService() = 0;
//	virtual SSharedPtr<IOrgService> orgService() = 0;
//	virtual SSharedPtr<IFriendCircleService> friendCircleService() = 0;

// #endif

}

@Namespace("service") public static native @SharedPtr IMClient getClient();

 /*namespace service */



// Parsed from interface/ICloudService.h

// #pragma once

// #include "../model/LoginInfo.h"
// #include "../model/Packet.h"
// #include "../model/Account.h"
// #include "IService.h"

// #include <string>

// #define VER_ICLOUD INTERFACE_VERSION(1,0)

@Namespace("service") public static class ICloudService extends IService {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ICloudService(Pointer p) { super(p); }



	/**
	* \brief 上传文件到云盘
	* @param [in] pid 文件唯一标示
	* @param [in] userId 用户ID
	* @param [in] cb _1 错误信息  _2文件夹下所有子文件和子文件夹信息
	* @param [in] pro  进度回调 _1 extra_req  _2 process  _3 文件当前传入大小/文件总大小
	*/
	public native void uploadFile(@ByRef CloudUploadFileInfo info, @ByVal FnCbErrStr cb, @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void uploadFile(@ByRef CloudUploadFileInfo info, @ByVal FnCbErrStr cb);

	/**
	* \brief 查询文件夹
	* @param [in] pid 文件唯一标示
	* @param [in] userId 用户ID
	* @param [in] cb _1 错误信息  _2文件夹下所有子文件和子文件夹信息
	*/
    public native void queryFloder(@Cast("int64") long pid, @Cast("int64") long userId, @ByVal FnCbErrVectorCloudFileInfo cb);

	/**
	* \brief 添加文件
	* @param [in] info 添加文件需要的信息
	* @param [in] cb _1 错误信息  _2添加的文件的详细信息
	*/
	public native void addFile(@ByRef CloudAddFileInfo info, @ByVal FnCbErrCloudFileInfo cb);

	/**
	* \brief 删除文件
	* @param [in] fileCodes 要删除的文件编码集合
	* @param [in] cb _1 错误信息
	*/
	public native void delFile(@ByRef StringVector fileCodes, @ByVal FnCbError cb);

	/**
	* \brief 重命名文件
	* @param [in] fileId 文件ID
	* @param [in] fileName 文件名
	* @param [in] cb _1 错误信息
	*/
	public native void renameFile(@Cast("int64") long fileId, @StdString  String fileName,  @ByVal FnCbError cb);

	/**
	* \brief 通过文件ID获取文件
	* @param [in] fileId 文件ID
	* @param [in] cb _1 错误信息 _2获取的文件信息
	*/
	public native void getFileById(@Cast("int64") long fileId, @ByVal FnCbErrCloudFileInfo cb);

	/**
	* \brief 通过文件hash码获取文件
	* @param [in] hash  hash码
	* @param [in] cb _1 错误信息 _2获取的文件信息
	*/
	public native void getFilesByHash(@StdString  String hash, @ByVal FnCbErrVectorCloudFileInfo cb);

	/**
	* \brief 通过文件hash码获取文件(同步接口)
	*/
	public native @ByVal CloudFileVector getFilesByHashSync(@StdString  String hash);
	
	/**
	* \brief 搜索文件
	* @param [in] type  搜索方式  1 搜索文本; 2用户名搜索； 3 both 是搜索指定用户的文件带有关键字的
	* @param [in] userId 用户id
	* @param [in] userName 用户名
	* @param [in] searchText 搜索的内容
	* @param [in] cb _1 错误信息 _2获取的文件信息
	*/
	public native void searchFiles(int type, @Cast("int64") long userId, @StdString  String userName, @StdString  String searchText, @ByVal FnCbErrVectorCloudFileInfo cb);

	/**
	* \brief 创建团队文件夹
	* @param [in] info 添加文件需要的信息
	* @param [in] cb _1 错误信息  _2添加的文件的详细信息
	*/
	public native void createTeam(@ByRef CloudAddFileInfo info, @ByVal FnCbErrCloudFileInfo cb);

	/**
	* \brief 添加团队成员
	* @param [in] members 成员信息
	* @param [in] cb _1 错误信息 
	*/
	public native void teamAddMember(@ByRef TeamMemberInfoVector members, @ByVal FnCbError cb);

	/**
	* \brief 移除团队成员
	* @param [in] members 成员信息
	* @param [in] cb _1 错误信息
	*/
	public native void teamRemoveMember(@ByRef TeamMemberInfoVector members, @ByVal FnCbError cb);

	/**
	* \brief 重置团队成员
	* @param [in] members 成员信息
	* @param [in] cb _1 错误信息
	*/
	public native void teamResetMember(@ByRef TeamMemberInfoVector members, @ByVal FnCbError cb);

	/**
	* \brief 获取团队文件夹
	* @param [in] userId 用户id
	* @param [in] cb _1 错误信息 _2 team信息集合
	*/
	public native void getTeams(@Cast("int64") long userId, @ByVal FnCbErrVectorCloudFileInfo cb);

	/**
	* \brief 获取团队文件夹所有成员
	* @param [in] fileId 文件ID
	* @param [in] cb _1 错误信息 _2 member信息集合
	*/
	public native void teamMembers(@Cast("int64") long fileId, @ByVal FnCbErrTeamMemberInfoVector cb);

	/**
	* \brief 获取团队成员角色
	* @param [in] isShow   角色是否在前端显示 目前始终为1
	* @param [in] cb _1 错误信息 _2 role信息集合
	*/
	public native void getRoles(@Cast("int8") byte isShow, @ByVal FnCbErrCloudRoleInfoVector cb);

	/**
	* \brief 通过角色ID获取团队成员角色
	* @param [in] roleId
	* @param [in] cb _1 错误信息 _2 role信息
	*/
	public native void getRoleById(@Cast("int64") long roleId, @ByVal FnCbErrCloudRoleInfo cb);

	/**
	* \brief 增加团队成员角色
	* @param [in] role 角色信息
	* @param [in] cb _1 错误信息
	*/
	public native void addRole(@ByRef BaseRoleInfo role, @ByVal FnCbError cb);

	/**
	* \brief 编辑团队成员角色
	* @param [in] role 角色信息
	* @param [in] cb _1 错误信息
	*/
	public native void editRole(@ByRef BaseRoleInfo role, @ByVal FnCbError cb);

	/**
	* \brief 移除团队成员角色
	* @param [in] roleId 角色ID
	* @param [in] cb _1 错误信息
	*/
	public native void removerRole(@Cast("int64") long roleId, @ByVal FnCbError cb);

	/**
	* \brief 获取许可信息
	* @param [in] roleId 角色ID
	* @param [in] fileId 文件ID
	* @param [in] userId 用户ID
	* @param [in] cb _1 错误信息
	*/
	public native void getPermission(@Cast("int64") long roleId, @Cast("int64") long fileId, @Cast("int64") long userId, @ByVal FnCbErrCloudPermission cb);

	/*
	* @param[in] userId 用户ID
	* @param[in] cb _1 错误信息
	* @param[in] cb _2 用户云盘信息
	*/
	public native void getCloudFileInfo(@Cast("int64") long userId, @ByVal FnCbErrCloudUser cb);

	/**
	* \brief 创建公共文件夹
	* @param [in] info 添加文件夹需要的信息
	* @param [in] cb _1 错误信息 _2文件详细信息
	*/
	public native void createPubDir(@ByRef CloudAddFileInfo info, @ByVal FnCbErrCloudFileInfo cb);

	/*
	* \brief 移动文件夹
	* @param[in] userId 用户id
	* @param[in] fileIds 文件Id
	* @param[in] dstFolderId 目标文件Id
	*/
	public native void moveFile(@Cast("int64") long userId, @ByRef LongVector fileIds, @Cast("int64") long dstFolderId,
			@ByVal FnCbError cb);

	/*
	* \brief 复制文件夹
	* @param[in] userId 用户id
	* @param[in] fileIds 文件Id
	* @param[in] dstFolderId 目标文件Id
	*/
	public native void copyFile(@Cast("int64") long userId, @ByRef LongVector fileIds, @Cast("int64") long dstFolderId,
			@ByVal FnCbError cb);
	/*
	* \brief 查询文件夹下面的子文件夹
	* @param[in] userId 用户id
	* @param[in] folderId 文件夹Id
	*/
	public native void querySubFolders(@Cast("int64") long userId, @Cast("int64") long folderId, @ByVal FnCbErrVectorCloudFileInfo cb);
	
	/*
	* \brief 查询文件夹
	*/
	public native void queryFolderByParam(@ByRef FolderOpenBean fob, @ByVal FnCbErrVectorCloudFileInfo cb);



////////////////////////////////////// 新云盘接口////////////////////////

	/*
	* \brief 查询文件是否存在
	*/
	/**
	* \brief 上传文件到云盘
	* @param [in] pid 文件唯一标示
	* @param [in] userId 用户ID
	* @param [in] cb _1 错误信息  _2文件夹下所有子文件和子文件夹信息
	* @param [in] pro  进度回调 _1 extra_req  _2 process  _3 文件当前传入大小/文件总大小
	*/
	public native void uploadFile(@ByRef NewCloudUploadFileInfo info, @ByVal FnCbErrStr cb, @ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void uploadFile(@ByRef NewCloudUploadFileInfo info, @ByVal FnCbErrStr cb);
	/**
	* \brief 下载文件
	* @param [in] targetId 发送者的targetId
	* @param [in] fileId
	* @param [in] localId
	* @param [in] sdkId
	* @param [in] cb  传入接收结果回调 _1错误信息  _2接收成功后文件路径 localPath _3发送者ID
	* @param [in] pro  进度回调
	* @return 每个文件对应的唯一localID
	*/
	public native void downloadFile(@ByRef CloudDownloadFileInfo info, @ByVal FnCbErrStr cb,
			@ByVal(nullValue = "SFunction<void(int32,int32,const std::string&)>(SNull)") FnCb2IntStr pro);
	public native void downloadFile(@ByRef CloudDownloadFileInfo info, @ByVal FnCbErrStr cb);
	
	/**
	* \brief 删除文件
	* @param [in] 
	* @param [in] cb _1 错误信息
	*/

	/**
	* \brief 重命名文件
	* @param [in] 
	* @param [in] 
	* @param [in] cb _1 错误信息
	*/

	/*
	* \brief 移动文件夹
	* @param[in] 
	* @param[in] 
	* @param[in] 
	*/

	/*
	* \brief 复制文件夹
	* @param[in] 
	* @param[in] 
	* @param[in] 
	*/

	/*
	* \brief 云盘回收站还原
	*/

	/*
	* \brief 云盘回收站清空
	*/

	/*
	* \brief 同步文件/文件夹 接口
	*/
	
	/*
	* \brief 拉取回收站信息
	*/

	/*
	* \brief 获取文件夹下所有的子目录和文件的详细信息

	*/

	/*
	* \brief 获取下一层文件夹的信息
	*/
	
	/*
	* \brief 个人信息获取, 容量 cap
	*/
	public native void getCloudUserInfo(@Cast("int64") long userid, @Cast("int64") long sdkid, @ByVal FnCbErrCloudUser cb);
	/*
	* \brief 创建共享目录
	*/
	/*
	* \brief 共享给别人的目录
	*/
	/*
	* \brief 别人共享给我的
	*/
	/*
	* \brief 修改共享目录权限
	*/
	/*
	* \brief 修改共享人权限
	*/
	/*
	* \brief 获取文件自身的文件信息
	*/
	/*
	* \brief 获取文件自身的共享信息
	*/
	/*
	* \brief 个人设置信息  回收站文件保留天数，上传/下载数目
	*/
	public native void setUserSetting(@ByRef CloudUserInfo userSetting, @ByVal FnCbError cb);
	/*
	* \brief 获取个人设置信息
	*/
	public native void getUserSetting(@Cast("int64") long userid, @Cast("int64") long sdkid, @ByVal FnCbErrCloudUser cb);
	/*
	* \brief 获取用户名
	*/

	/*
	* \brief 获取云盘上传/下载历史任务
	*/
	/*
	* \brief 删除云盘上传/下载历史任务
	*/
	public native void delCloudTransferHistory(@ByRef cloudTransferInfo transferInfo, @ByVal FnCbError cb);
	/*
	* \brief 清空云盘上传/下载历史任务
	* param transferType 1 上传任务， 2 下载任务
	* param transferStatue  1 删除成功， 2 删除失败， 3 都删除
	*/
	public native void clearCloudTransferHistory(@Cast("int32") int transferType, @Cast("int32") int transferStatu, @ByVal FnCbError cb);
}





// Parsed from interface/IGaInterService.h


// #pragma once

// #include "../model/SDKTypes.h"
// #include "../extModel/gaInterpacket.h"
// #include "IService.h"


// {888D0CC8-B73E-4411-9B08-008A40C023F3}
public static native @MemberGetter int VER_GAINTER();
public static final int VER_GAINTER = VER_GAINTER();

    @Namespace("service") public static class IGaInterService extends IService {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public IGaInterService(Pointer p) { super(p); }
    

        /**
        * \brief ��ȡ�ⲿ�ڵ���Ϣ
        * @param [out] cb  ������ս���ص� _1 ����� _2�ⲿ��ҵ�ڵ���Ϣ
        */
        public native void getAppNodeServers(@ByVal FnCbErrAppNodeInfoVector cb);

        /**
        * \brief ���������Ʋ���
        * @param [in] oper  ������Ʋ���
        * @param [out] cb  ������ս���ص� _1 �����
        */
        public native void addThreeCardOper(@ByRef ThreeCardOper oper, @ByVal FnCbError cb);

        /**
        * \brief ��ȡ��Ȩ��
        * @param [in] appID  Ӧ��ID��
        * @param [in] clientKey  ��ʱƱ��
        * @param [out] cb  ������ս���ص� _1 ����� _2��Ȩ��
        */
        public native void getAuthCode(@Cast("int64") long appId, @StdString  String clientKey, @ByVal FnCbErrStr cb);
    }

 /*namespace service*/


// Parsed from interface/jsonToolExport.h

// #pragma once
// #include <config.h>
// #include <string>
// #include <vector>

/** enum service:: */
public static final int

	/** 文本消息结构体 */
	json_txtMsg = 0x01,

	/**文件消息 */
	json_FileMsg = 0x01 + 1,

	/** 图片消息 */
	json_ImageMsg = 0x01 + 2,

	/** 音频消息 */
	json_AudioMsg = 0x01 + 3,

	/** 弱提示 */
	json_TipMsg = 0x01 + 4,

	/**弱提示消息属性 */
	json_TipMsgProper = 0x01 + 5,

	/** 名片消息 */
	json_CardMsg = 0x01 + 6,

	/**动态表情消息 */
	json_DynamicExpressMsg = 0x01 + 7,

	/** 视频消息 */
	json_VedioMsg = 0x01 + 8,

	/** 延迟消息 */
	json_DelayMsg = 0x01 + 9,

	/** json_MsgProperties */
	json_MsgProperties = 0x01 + 10,

	/**回执消息 */
	json_Receipt = 0x01 + 11,

	/**私信消息 */
	json_EnVChat = 0x01 + 12,

	/** MediaMsgResult */
	json_MediaMsgResult = 0x01 + 13,

	/**ExtendInfo */
	json_ExtendInfo = 0x01 + 14,

	/** MsgDetailInfo */
	json_MsgDetailInfo = 0x01 + 15,

    /**  json_APPInfo */
    json_APPInfo = 0x01 + 16,

	/** 最近联系人 */
	json_TinyRecContact = 0x01 + 17,

	/**deviceType 消息属性 */
	json_DeviceType = 0x01 + 18,

	/**位置消息 */
	json_PositionMsg = 0x01 + 19,

	/**网络消息 */
	json_WebMsg = 0x01 + 20,

	/**图文消息 */
	json_PicWithText = 0x01 + 21,

	/**组合消息 */
	json_CombineMsg = 0x01 + 22,

	/**九宫格消息 */
	json_NineBlockMsg = 0x01 + 23,

	json_MsgMasterplate = 0x01 + 24, /**模版消息 */

	json_MsgActionCard = 0x01 + 25, /**新代办消息 */

	json_MiniVedio = 0x01 + 26, /**小视频 pc只解析 */

	json_conference = 0x01 + 27,/**视频会议 */

	json_DynamicExpressMsg2 = 0x01 + 28, /**动态表情2 */

	json_orignalMsg = 0x01 + 29,//用于原文透传

	json_mailMsg = 0x01 + 30,//邮件消息

	json_redPacketMsg = 0x01 + 31,//红包消息

	json_scanAppInfo = 0x01 + 32, //二维码扫描 服务器需要的客户端App信息
	
	json_txtMsgRevoke = 0x01 + 33;

/**********************************************************************/
/** 普通文本消息  2
/** 弱提示消息    8
/** 任务消息     17
/** 撤回消息     18
/** 动态表情消息 19
/** 红包消息     88
/***************************************************************************/
/**媒体消息基类 */
@Namespace("service") @NoOffset public static class jst_MediaMsgBase extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_MediaMsgBase(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_MediaMsgBase(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_MediaMsgBase position(long position) {
        return (jst_MediaMsgBase)super.position(position);
    }

	public jst_MediaMsgBase() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**是否加密 */
	public native @Cast("int32") int isEncrypt(); public native jst_MediaMsgBase isEncrypt(int isEncrypt);
	/**加密者ID */
	public native @Cast("int64") long encryptUser(); public native jst_MediaMsgBase encryptUser(long encryptUser);
	/**加密秘钥 */
	public native @StdString  String encKey(); public native jst_MediaMsgBase encKey(String encKey);
	/**用户自定义 */
	public native @StdString  String userDef(); public native jst_MediaMsgBase userDef(String userDef);
}
@Namespace("service") public static class st_failAttchment extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public st_failAttchment() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public st_failAttchment(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public st_failAttchment(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public st_failAttchment position(long position) {
        return (st_failAttchment)super.position(position);
    }

	public native @StdString  String localPath(); public native st_failAttchment localPath(String localPath);
	public native @StdString  String fileName(); public native st_failAttchment fileName(String fileName);
	public native int fileSize(); public native st_failAttchment fileSize(int fileSize);
}
@Namespace("service") public static class jst_fileAttches extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_fileAttches() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_fileAttches(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_fileAttches(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_fileAttches position(long position) {
        return (jst_fileAttches)super.position(position);
    }

	public native @StdVector st_failAttchment attch(); public native jst_fileAttches attch(st_failAttchment attch);
}
/**文本消息 */
@Namespace("service") @NoOffset public static class jst_TextMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_TextMsg() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_TextMsg(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_TextMsg(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_TextMsg position(long position) {
        return (jst_TextMsg)super.position(position);
    }

	/**消息体内容 */
	public native @StdString  String textMsg(); public native jst_TextMsg textMsg(String textMsg);
	public native @Cast("int8") byte conferType(); public native jst_TextMsg conferType(byte conferType);
	//std::string conferType;		// int8类型错误修改 [3/18/2021 zhuohc]

	//textMsg: VideoStatus, conferType: VideoType, userDef: VrvUserDef
	//std::string secretBody;		///<密话字段

	//std::string bodyType;	///<密话增加字段 [3/18/2021 zhuohc]
	//std::string annotation;		///<
	//std::string senderId;		///<
	//std::string onwerId;		///<
	//std::string roomId;			///<
	//int8 bodyDeviceType;		///<
	//std::string version;			///<
	//std::string rtcType;			///<
}

/**REVOKE消息 */
@Namespace("service") @NoOffset public static class jst_TextMsgRevoke extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_TextMsgRevoke() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_TextMsgRevoke(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_TextMsgRevoke(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_TextMsgRevoke position(long position) {
        return (jst_TextMsgRevoke)super.position(position);
    }

	/**消息体内容 */
	public native @StdString  String textMsg(); public native jst_TextMsgRevoke textMsg(String textMsg);
	public native @Cast("int8") byte conferType(); public native jst_TextMsgRevoke conferType(byte conferType);
	public native @StdString  String textMsgRevoke(); public native jst_TextMsgRevoke textMsgRevoke(String textMsgRevoke);
}

/**web 消息 */
@Namespace("service") @NoOffset public static class jst_WebMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_WebMsg() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_WebMsg(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_WebMsg(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_WebMsg position(long position) {
        return (jst_WebMsg)super.position(position);
    }

	/**网页内容标题 */
	public native @StdString  String title(); public native jst_WebMsg title(String title);
	/**网页链接地址 */
	public native @StdString  String url(); public native jst_WebMsg url(String url);
	/**网页内容第一张图片 */
	public native @StdString  String img(); public native jst_WebMsg img(String img);
	/**网页内容摘要 */
	public native @StdString  String desc(); public native jst_WebMsg desc(String desc);
}
/**	文件信息 */
@Namespace("service") @NoOffset public static class jst_FileMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_FileMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_FileMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_FileMsg position(long position) {
        return (jst_FileMsg)super.position(position);
    }

	public jst_FileMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**文件名 */
	public native @StdString  String fileName(); public native jst_FileMsg fileName(String fileName);
	/**url */
	public native @StdString  String mediaUrl(); public native jst_FileMsg mediaUrl(String mediaUrl);
	/**本地文件路径server不需要处理，ctrl和ui上用这个字段 */
	public native @StdString  String filePath(); public native jst_FileMsg filePath(String filePath);
	/**文件类型 */
	public native @StdString  String fileTypeName(); public native jst_FileMsg fileTypeName(String fileTypeName);
	/**文件大小 */
	public native @Cast("int64") long fileSize(); public native jst_FileMsg fileSize(long fileSize);
	/**文件ID */
	public native @Cast("int64") long fileID(); public native jst_FileMsg fileID(long fileID);
	/**操作类型 文件直传使用  1.收到对方取消发送的消息 2.收到对方取消接收的消息 */
	public native @Cast("int32") int operateType(); public native jst_FileMsg operateType(int operateType);
	/**界面展示用 1.文件存在， 2.文件不存在需要重新下载 3.接收文件 4.正在上传或下载 5.重新发送,  */
	public native int fileStates(); public native jst_FileMsg fileStates(int fileStates);
	/**是否文件夹 */
	public native @Cast("int8") byte isFolder(); public native jst_FileMsg isFolder(byte isFolder);
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native jst_FileMsg isOverdue(byte isOverdue);
	/** MD5校验码 */
	public native @StdString  String md5Code(); public native jst_FileMsg md5Code(String md5Code);
}

/**	图片信息 */
@Namespace("service") @NoOffset public static class jst_ImageMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_ImageMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_ImageMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_ImageMsg position(long position) {
        return (jst_ImageMsg)super.position(position);
    }

	public jst_ImageMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**描述 */
	public native @StdString  String imageContents(); public native jst_ImageMsg imageContents(String imageContents);
	/**宽度 */
	public native @Cast("int32") int width(); public native jst_ImageMsg width(int width);
	/**高度 */
	public native @Cast("int32") int height(); public native jst_ImageMsg height(int height);
	/**文件名 */
	public native @StdString  String fileName(); public native jst_ImageMsg fileName(String fileName);
	/**大图文件路径/url */
	public native @StdString  String bigPath(); public native jst_ImageMsg bigPath(String bigPath);
	/**缩略图路径/url */
	public native @StdString  String thumbPath(); public native jst_ImageMsg thumbPath(String thumbPath);
	/**原图本地路径 */
	public native @StdString  String imagePath(); public native jst_ImageMsg imagePath(String imagePath);
	/**缩略图本地路径 */
	public native @StdString  String thumbimgPath(); public native jst_ImageMsg thumbimgPath(String thumbimgPath);
	/**九宫格消息使用 */
	public native @Cast("int64") long buddyId(); public native jst_ImageMsg buddyId(long buddyId);
	public native @StdString  String thumbbin(); public native jst_ImageMsg thumbbin(String thumbbin); //<pc端使用
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native jst_ImageMsg isOverdue(byte isOverdue);
	public native @Cast("int8") byte isOriImg(); public native jst_ImageMsg isOriImg(byte isOriImg);    //是否是原图，0、不是 1、是
	public native @Cast("int64") long size(); public native jst_ImageMsg size(long size);		//大小
	public native @StdString  String md5Code(); public native jst_ImageMsg md5Code(String md5Code);	//原图MD5值
	public native @StdString  String thumbMd5(); public native jst_ImageMsg thumbMd5(String thumbMd5);	//缩略图Md5值
}
/**九宫格消息 */

@Namespace("service") @NoOffset public static class jst_NineBlock extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_NineBlock() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_NineBlock(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_NineBlock(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_NineBlock position(long position) {
        return (jst_NineBlock)super.position(position);
    }

	public native @StdVector jst_ImageMsg nine(); public native jst_NineBlock nine(jst_ImageMsg nine);
}
/**	语音信息 */
@Namespace("service") @NoOffset public static class jst_AudioMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_AudioMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_AudioMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_AudioMsg position(long position) {
        return (jst_AudioMsg)super.position(position);
    }

	public jst_AudioMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**时长 */
	public native @Cast("int32") int mediaTime(); public native jst_AudioMsg mediaTime(int mediaTime);
	/**文件名 */
	public native @StdString  String fileName(); public native jst_AudioMsg fileName(String fileName);
	/**路径 */
	public native @StdString  String meidaUrl(); public native jst_AudioMsg meidaUrl(String meidaUrl);
	/**ui层用，标志是否需要显示小红点 0、不需要 1、需要  */
	public native int status(); public native jst_AudioMsg status(int status);
	public native @StdString  String localPath(); public native jst_AudioMsg localPath(String localPath);
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native jst_AudioMsg isOverdue(byte isOverdue);
	public native @Cast("int64") long size(); public native jst_AudioMsg size(long size);
	public native @StdString  String md5Code(); public native jst_AudioMsg md5Code(String md5Code);	// MD5值
}

/**位置消息 */
@Namespace("service") @NoOffset public static class jst_PositionMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_PositionMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_PositionMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_PositionMsg position(long position) {
        return (jst_PositionMsg)super.position(position);
    }

	public jst_PositionMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**地名 */
	public native @StdString  String area(); public native jst_PositionMsg area(String area);
	/**精度 */
	public native double latitude(); public native jst_PositionMsg latitude(double latitude);
	/**纬度 */
	public native double longitude(); public native jst_PositionMsg longitude(double longitude);
}
/**弱提示消息 */
@Namespace("service") @NoOffset public static class jst_TipMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_TipMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_TipMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_TipMsg position(long position) {
        return (jst_TipMsg)super.position(position);
    }

	public jst_TipMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**弱提示消息子类型 */
	public native @Cast("int32") int tipType(); public native jst_TipMsg tipType(int tipType);
	/**消息体内容 */
	public native @StdString  String tipMsg(); public native jst_TipMsg tipMsg(String tipMsg);
	public native @StdString  String status(); public native jst_TipMsg status(String status);//消息状态
}
@Namespace("service") @NoOffset public static class jst_miniVedio extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_miniVedio(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_miniVedio(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_miniVedio position(long position) {
        return (jst_miniVedio)super.position(position);
    }

	public jst_miniVedio() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("int64") long buddyId(); public native jst_miniVedio buddyId(long buddyId);
	public native @Cast("int8") byte brustFlag(); public native jst_miniVedio brustFlag(byte brustFlag);
	public native @StdString  String preImgPath(); public native jst_miniVedio preImgPath(String preImgPath);
	public native @StdString  String vedioFileName(); public native jst_miniVedio vedioFileName(String vedioFileName);
	public native @Cast("int64") long vedioHight(); public native jst_miniVedio vedioHight(long vedioHight);
	public native @Cast("int64") long vedioLenth(); public native jst_miniVedio vedioLenth(long vedioLenth);
	public native @Cast("int64") long vedioWideth(); public native jst_miniVedio vedioWideth(long vedioWideth);
	public native @Cast("int64") long vedioSize(); public native jst_miniVedio vedioSize(long vedioSize);
	public native @StdString  String preImglocalPath(); public native jst_miniVedio preImglocalPath(String preImglocalPath);
	public native @StdString  String videoPath(); public native jst_miniVedio videoPath(String videoPath);
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native jst_miniVedio isOverdue(byte isOverdue);
	public native @StdString  String md5Code(); public native jst_miniVedio md5Code(String md5Code);	//原图MD5值，校验用，发图片时不用传
	public native @StdString  String thumbMd5(); public native jst_miniVedio thumbMd5(String thumbMd5);	//缩略图Md5值
}
/**名片消息 */
@Namespace("service") @NoOffset public static class jst_CardMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_CardMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_CardMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_CardMsg position(long position) {
        return (jst_CardMsg)super.position(position);
    }

	public jst_CardMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**名片人id */
	public native @StdString  String id(); public native jst_CardMsg id(String id);
}
/**动态表情消息 */
@Namespace("service") @NoOffset public static class jst_DynamicExpressMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_DynamicExpressMsg() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_DynamicExpressMsg(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_DynamicExpressMsg(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_DynamicExpressMsg position(long position) {
        return (jst_DynamicExpressMsg)super.position(position);
    }

	/**发送动态表情填表情名  接收动态表情返回的路径 */
	public native @StdString  String path(); public native jst_DynamicExpressMsg path(String path);
}

/**视频消息 */
@Namespace("service") @NoOffset public static class jst_VedioMsg extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_VedioMsg() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_VedioMsg(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_VedioMsg(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_VedioMsg position(long position) {
        return (jst_VedioMsg)super.position(position);
    }

	public native @StdString  String channelID(); public native jst_VedioMsg channelID(String channelID);
	public native @StdString  String isSipChat(); public native jst_VedioMsg isSipChat(String isSipChat);
	public native @StdString  String videoType(); public native jst_VedioMsg videoType(String videoType);
	public native @StdString  String videostatus(); public native jst_VedioMsg videostatus(String videostatus);
	public native @StdString  String key(); public native jst_VedioMsg key(String key);
	public native @StdString  String version(); public native jst_VedioMsg version(String version);
    public native @StdString  String msgModel(); public native jst_VedioMsg msgModel(String msgModel);
    public native @StdString  String msgInfo(); public native jst_VedioMsg msgInfo(String msgInfo);
}

@Namespace("service") @NoOffset public static class jst_picTextBean extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_picTextBean(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_picTextBean(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_picTextBean position(long position) {
        return (jst_picTextBean)super.position(position);
    }

	public jst_picTextBean() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int32") int index(); public native jst_picTextBean index(int index);
	/**图片url */
	public native @StdString  String picUrl(); public native jst_picTextBean picUrl(String picUrl);
	/**标题 */
	public native @StdString  String title(); public native jst_picTextBean title(String title);
	/**url */
	public native @StdString  String url(); public native jst_picTextBean url(String url);
	/**描述 */
	public native @StdString  String dsc(); public native jst_picTextBean dsc(String dsc);
}
/**图文消息 */
@Namespace("service") public static class jst_picWithTextMsg extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_picWithTextMsg() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_picWithTextMsg(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_picWithTextMsg(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_picWithTextMsg position(long position) {
        return (jst_picWithTextMsg)super.position(position);
    }

	/**图文消息集合 */
	public native @ByRef JstPicTextBeanVector vtMsgs(); public native jst_picWithTextMsg vtMsgs(JstPicTextBeanVector vtMsgs);
}


@Namespace("service") @NoOffset public static class jst_ReceiptSubMsg extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_ReceiptSubMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_ReceiptSubMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_ReceiptSubMsg position(long position) {
        return (jst_ReceiptSubMsg)super.position(position);
    }

	public jst_ReceiptSubMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native int isReceipt(); public native jst_ReceiptSubMsg isReceipt(int isReceipt);
}

@Namespace("service") @NoOffset public static class jst_DelaySubMsg extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_DelaySubMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_DelaySubMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_DelaySubMsg position(long position) {
        return (jst_DelaySubMsg)super.position(position);
    }

	public jst_DelaySubMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**0：非延时，1：延时 */
	public native @Cast("int32") int isDelayMsg(); public native jst_DelaySubMsg isDelayMsg(int isDelayMsg);
	/**延时发送时间  取未来发送时间毫秒数（大于当前时间）时间戳形式长整形 */
	public native @Cast("int64") long delaySendTime(); public native jst_DelaySubMsg delaySendTime(long delaySendTime);
}
@Namespace("service") @NoOffset public static class jst_DynamicExpressMsg2 extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_DynamicExpressMsg2(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_DynamicExpressMsg2(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_DynamicExpressMsg2 position(long position) {
        return (jst_DynamicExpressMsg2)super.position(position);
    }

	public jst_DynamicExpressMsg2() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @StdString  String code(); public native jst_DynamicExpressMsg2 code(String code);
	public native @StdString  String emoji(); public native jst_DynamicExpressMsg2 emoji(String emoji);
	public native @StdString  String mdCode(); public native jst_DynamicExpressMsg2 mdCode(String mdCode);
	public native @StdString  String meaning(); public native jst_DynamicExpressMsg2 meaning(String meaning);
	public native @Cast("int8") byte DyType(); public native jst_DynamicExpressMsg2 DyType(byte DyType);
}

@Namespace("service") @NoOffset public static class jst_EnVChatSubMsg extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_EnVChatSubMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_EnVChatSubMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_EnVChatSubMsg position(long position) {
        return (jst_EnVChatSubMsg)super.position(position);
    }

	public jst_EnVChatSubMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	//int32 timeZone;			 ///<时区值
	/**是否是私信 */
	public native @Cast("int32") int isEnVChat(); public native jst_EnVChatSubMsg isEnVChat(int isEnVChat);
	//int32 deviceType;		 ///<设备类型 1PC 2手机
}

@Namespace("service") @NoOffset public static class jst_MsgProperties extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_MsgProperties(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_MsgProperties(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_MsgProperties position(long position) {
        return (jst_MsgProperties)super.position(position);
    }

	public jst_MsgProperties() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**时区值	 */
	public native @Cast("int32") int timeZone(); public native jst_MsgProperties timeZone(int timeZone);
	/**要撤销的消息id	 */
	public native @Cast("int64") long revokeMsgID(); public native jst_MsgProperties revokeMsgID(long revokeMsgID);
}

@Namespace("service") @NoOffset public static class jst_SubMsgProperties extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_SubMsgProperties(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_SubMsgProperties(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_SubMsgProperties position(long position) {
        return (jst_SubMsgProperties)super.position(position);
    }

    public jst_SubMsgProperties() { super((Pointer)null); allocate(); }
    private native void allocate();
	/**撤销消息使用 */
	public native @Cast("int64") long revokeMsgId(); public native jst_SubMsgProperties revokeMsgId(long revokeMsgId);
    /** 撤销消息使用 */
    public native @Cast("int8") byte adminRevoke(); public native jst_SubMsgProperties adminRevoke(byte adminRevoke);
	/**弱提示使用 */
	public native int operType(); public native jst_SubMsgProperties operType(int operType); /**3催办消息     4 已办 已有字段 */
	public native @StdString  String tipTime(); public native jst_SubMsgProperties tipTime(String tipTime);
	public native @StdString  String operUser(); public native jst_SubMsgProperties operUser(String operUser);
	public native @StdString  String userInfo(); public native jst_SubMsgProperties userInfo(String userInfo);
	public native @StdString  String fileInfo(); public native jst_SubMsgProperties fileInfo(String fileInfo);
	/**音視頻消息使用 */
	public native @Cast("int32") int extendmsgtype(); public native jst_SubMsgProperties extendmsgtype(int extendmsgtype); 
	public native @StdString  String session(); public native jst_SubMsgProperties session(String session);

	/**时区 */
	public native @Cast("int32") int timeZone(); public native jst_SubMsgProperties timeZone(int timeZone);

	/**设备类型 */
	public native int deviceType(); public native jst_SubMsgProperties deviceType(int deviceType);

	/**task消息使用 */
	/**任务时间 */
	public native @StdString  String timeTask(); public native jst_SubMsgProperties timeTask(String timeTask);
	/**是否完成 */
	public native @StdString  String isFinish(); public native jst_SubMsgProperties isFinish(String isFinish);
	/**任务标记 */
	public native @StdString  String isTask(); public native jst_SubMsgProperties isTask(String isTask);
	/**任务消息用 */
	public native @StdString  String isRead(); public native jst_SubMsgProperties isRead(String isRead);
	/**指令消息使用 */
	/**是否是指令消息 */
	public native @Cast("bool") boolean iscmd(); public native jst_SubMsgProperties iscmd(boolean iscmd);

	/**是否延迟消息 */
	public native @StdString  String isDelay(); public native jst_SubMsgProperties isDelay(String isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native jst_SubMsgProperties delayTime(long delayTime);
	/**是否阅后回执 */
	public native @StdString  String isReceipt(); public native jst_SubMsgProperties isReceipt(String isReceipt);
	/**是否潜水者消息 */
	public native @StdString  String isDivers(); public native jst_SubMsgProperties isDivers(String isDivers);
	/** 消息是抖一抖或阅后回执，且此消息体最后是英文小于号<结尾的 加该标志位 */
	public native @StdString  String isReceiptAll(); public native jst_SubMsgProperties isReceiptAll(String isReceiptAll);
	/**是否阅后即焚 */
	public native @StdString  String isBurn(); public native jst_SubMsgProperties isBurn(String isBurn);
	/**区分清除消息的范围（scope取值today，all） */
	public native @StdString  String scope(); public native jst_SubMsgProperties scope(String scope);
	/**是否是私信   0不是 1是 */
	public native int isPrivateMsg(); public native jst_SubMsgProperties isPrivateMsg(int isPrivateMsg);

	/**字体大小 文本消息用 */
	public native int textSize(); public native jst_SubMsgProperties textSize(int textSize);
	public native int isdeal(); public native jst_SubMsgProperties isdeal(int isdeal);

	public native int isOri(); public native jst_SubMsgProperties isOri(int isOri);
	public native @Cast("int8") byte bwdtype(); public native jst_SubMsgProperties bwdtype(byte bwdtype);/**文本消息用 敏感词类型 */
	public native @ByRef StringVector bwds(); public native jst_SubMsgProperties bwds(StringVector bwds);/**文本消息用 敏感词列表 */
	/**追一下消息的相关的用户ID */
	public native @ByRef LongVector pursuitUsers(); public native jst_SubMsgProperties pursuitUsers(LongVector pursuitUsers);
	/**鸡毛信 */
	public native int isFeather(); public native jst_SubMsgProperties isFeather(int isFeather);
	/**鸡毛信语言 */
	public native @StdString  String languageType(); public native jst_SubMsgProperties languageType(String languageType);
	/**红包消息用 */
	public native @StdString  String typeSendHongBao(); public native jst_SubMsgProperties typeSendHongBao(String typeSendHongBao);//<发送者邮箱
	/**邮件主题 */
	public native @StdString  String myHongBaoId(); public native jst_SubMsgProperties myHongBaoId(String myHongBaoId);

	public native @Cast("int64") long purmsgId(); public native jst_SubMsgProperties purmsgId(long purmsgId);
	public native @Cast("int64") long validity(); public native jst_SubMsgProperties validity(long validity); /**附件消息有效期 */
	public native @Cast("int8") byte issueOperType(); public native jst_SubMsgProperties issueOperType(byte issueOperType);		/** 议题操作 1.回复 2.创建 3.删除  */
	public native @Cast("int64") long issueId(); public native jst_SubMsgProperties issueId(long issueId);		/**议题Id */
	public native @Cast("int64") long issueCreater(); public native jst_SubMsgProperties issueCreater(long issueCreater);	/**议题创建者 */
	public native @StdString  String issueName(); public native jst_SubMsgProperties issueName(String issueName);/**议题名称 */
	public native @Cast("int64") long realTargetId(); public native jst_SubMsgProperties realTargetId(long realTargetId);  //真实的消息接收者
	public native @Cast("int32") int realMsgType(); public native jst_SubMsgProperties realMsgType(int realMsgType);   //66号消息的真实消息类型
	public native @StdString  String portraitUrl(); public native jst_SubMsgProperties portraitUrl(String portraitUrl);  //客服的头像Url
	public native @StdString  String nickname(); public native jst_SubMsgProperties nickname(String nickname);   //客服的昵称
	public native @StdString  String noteTitle(); public native jst_SubMsgProperties noteTitle(String noteTitle);	//记事本标题
	public native @Cast("int64") long notebookId(); public native jst_SubMsgProperties notebookId(long notebookId);	//记事本Id
	public native @Cast("int8") byte gifPlayed(); public native jst_SubMsgProperties gifPlayed(byte gifPlayed);		//文本消息gif播放标示
	/** 发送密码不加密  0.加密  1.不加密 */
	public native @Cast("int8") byte sendPwNoEnc(); public native jst_SubMsgProperties sendPwNoEnc(byte sendPwNoEnc);
	public native @Cast("int64") long msgCode(); public native jst_SubMsgProperties msgCode(long msgCode);       /**端到端消息带的错误码 */
	public native @Cast("int8") byte isContainSensitiveKeyword(); public native jst_SubMsgProperties isContainSensitiveKeyword(byte isContainSensitiveKeyword); //是否包含敏感词 0 不包含，1包含
	public native int forwardConfig(); public native jst_SubMsgProperties forwardConfig(int forwardConfig); /**是否可以转发 1 禁止，2 可以 默认2可以转发 */
	public native @Cast("int64") long taskID(); public native jst_SubMsgProperties taskID(long taskID); /**消息任务ID */

	//表情包使用9个
	public native @StdString  String mdCode(); public native jst_SubMsgProperties mdCode(String mdCode);
	public native @StdString  String name(); public native jst_SubMsgProperties name(String name);
	public native @StdString  String bigURL(); public native jst_SubMsgProperties bigURL(String bigURL);
	public native @StdString  String littleURL(); public native jst_SubMsgProperties littleURL(String littleURL);
	public native @StdString  String sha256(); public native jst_SubMsgProperties sha256(String sha256);
	public native @Cast("int8") byte checkResult(); public native jst_SubMsgProperties checkResult(byte checkResult);
	public native @StdString  String elogo(); public native jst_SubMsgProperties elogo(String elogo);
	public native @StdString  String bigPath(); public native jst_SubMsgProperties bigPath(String bigPath);
	public native @StdString  String littlePath(); public native jst_SubMsgProperties littlePath(String littlePath);

}


//上传媒体消息返回结构体
@Namespace("service") @NoOffset public static class jst_MediaMsgResult extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_MediaMsgResult(Pointer p) { super(p); }

	public jst_MediaMsgResult(int isthb, int isHead) { super((Pointer)null); allocate(isthb, isHead); }
	private native void allocate(int isthb, int isHead);

	/**入参  */
	public native int isthumb(); public native jst_MediaMsgResult isthumb(int isthumb);
	/**入参 */
	public native int isHeadJson(); public native jst_MediaMsgResult isHeadJson(int isHeadJson);

	public native int code(); public native jst_MediaMsgResult code(int code);
	public native @Cast("int64") long targetId(); public native jst_MediaMsgResult targetId(long targetId);
	public native @Cast("int64") long fileSize(); public native jst_MediaMsgResult fileSize(long fileSize);
	public native @Cast("int64") long fileid(); public native jst_MediaMsgResult fileid(long fileid);
	public native @Cast("int64") long createdAt(); public native jst_MediaMsgResult createdAt(long createdAt);
	public native int validity(); public native jst_MediaMsgResult validity(int validity);
	public native @StdString  String fileName(); public native jst_MediaMsgResult fileName(String fileName);
	public native @StdString  String url(); public native jst_MediaMsgResult url(String url);
	public native @StdString  String thumbUrl(); public native jst_MediaMsgResult thumbUrl(String thumbUrl);
}

//扩展信息
@Namespace("service") @NoOffset public static class jst_ExtendInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_ExtendInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_ExtendInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_ExtendInfo position(long position) {
        return (jst_ExtendInfo)super.position(position);
    }

	public jst_ExtendInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**性别 */
	public native @Cast("int32") int sex(); public native jst_ExtendInfo sex(int sex);
	/**组织名 */
	public native @StdString  String orgName(); public native jst_ExtendInfo orgName(String orgName);
	/**手机号 */
	public native @StdString  String phoneNum(); public native jst_ExtendInfo phoneNum(String phoneNum);
	/**父组织结点名称 */
	public native @StdString  String pOrgName(); public native jst_ExtendInfo pOrgName(String pOrgName);
	/**邮政编码 */
	public native @StdString  String postCode(); public native jst_ExtendInfo postCode(String postCode);
	/**地址 */
	public native @StdString  @Name("address") String _address(); public native jst_ExtendInfo _address(String _address);
	/**传真 */
	public native @StdString  String fax(); public native jst_ExtendInfo fax(String fax);
	/**职位 */
	public native @StdString  String duty(); public native jst_ExtendInfo duty(String duty);
	/**电子邮件 */
	public native @StdString  String enmail(); public native jst_ExtendInfo enmail(String enmail);
	/**手机号 */
	public native @StdString  String enmobile(); public native jst_ExtendInfo enmobile(String enmobile);
	/**在企业组织中的名称 */
	public native @StdString  String enname(); public native jst_ExtendInfo enname(String enname);
}

//消息详细搜素具体消息的内容//只解析
@Namespace("service") @NoOffset public static class jst_MsgDetailInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_MsgDetailInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_MsgDetailInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_MsgDetailInfo position(long position) {
        return (jst_MsgDetailInfo)super.position(position);
    }
//发送时间
	public jst_MsgDetailInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long sendTime(); public native jst_MsgDetailInfo sendTime(long sendTime);
	//发送者ID
	public native @Cast("int64") long sendUserId(); public native jst_MsgDetailInfo sendUserId(long sendUserId);
	//消息ID
	public native @Cast("int64") long msgId(); public native jst_MsgDetailInfo msgId(long msgId);
	//发送内容
	public native @StdString  String context(); public native jst_MsgDetailInfo context(String context);
}

//企业应用信息//只解析
@Namespace("service") @NoOffset public static class jst_AppInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_AppInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_AppInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_AppInfo position(long position) {
        return (jst_AppInfo)super.position(position);
    }

	public jst_AppInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**openID是否编码，0:不编码，1:编码 */
	public native @Cast("int8") byte openIDEncoded(); public native jst_AppInfo openIDEncoded(byte openIDEncoded);
	/**应用ＩＤ */
	public native @Cast("int64") long appID(); public native jst_AppInfo appID(long appID);
	/**企业ＩＤ */
	public native @Cast("int64") long entID(); public native jst_AppInfo entID(long entID);
	/**应用标识 */
	public native @StdString  String appSign(); public native jst_AppInfo appSign(String appSign);
	/**应用名称 */
	public native @StdString  String appName(); public native jst_AppInfo appName(String appName);
	/**英文名 */
	public native @StdString  String appEnName(); public native jst_AppInfo appEnName(String appEnName);
	/**应用图标 */
	public native @StdString  String appIcon(); public native jst_AppInfo appIcon(String appIcon);
	/**主页地址 */
	public native @StdString  String homeUrl(); public native jst_AppInfo homeUrl(String homeUrl);
	/**企业名称 */
	public native @StdString  String entName(); public native jst_AppInfo entName(String entName);
	/**应用密钥 */
	public native @StdString  String appSecret(); public native jst_AppInfo appSecret(String appSecret);
	/**应用令牌 */
	public native @StdString  String appToken(); public native jst_AppInfo appToken(String appToken);
	/**应用菜单 */
	public native @StdString  String appMenus(); public native jst_AppInfo appMenus(String appMenus);
	/**应用子账号 */
	public native @StdString  String subAccount(); public native jst_AppInfo subAccount(String subAccount);
	/**客户端配置key */
	public native @ByRef StringVector configKey(); public native jst_AppInfo configKey(StringVector configKey);
	/**客户端配置value */
	public native @ByRef StringVector configVal(); public native jst_AppInfo configVal(StringVector configVal);
}


//扫描二维码登录需要的客户端基本信息
@Namespace("service") @NoOffset public static class jst_ScanAppInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_ScanAppInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_ScanAppInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_ScanAppInfo position(long position) {
        return (jst_ScanAppInfo)super.position(position);
    }

	public jst_ScanAppInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int8") byte pcType(); public native jst_ScanAppInfo pcType(byte pcType); //PC客户端类型 1-windows 2--MAC
	public native @Cast("int16") int flag(); public native jst_ScanAppInfo flag(int flag);      //客户端状态 0 离线 1在线 2隐身 3 忙碌 4离开 5请勿打扰 6想聊天
	public native @Cast("int64") long loginport(); public native jst_ScanAppInfo loginport(long loginport);  //登录的端口号
	public native @StdString  String loginIp(); public native jst_ScanAppInfo loginIp(String loginIp); //登录的IP地址
	public native @StdString  String appVersion(); public native jst_ScanAppInfo appVersion(String appVersion);		//应用版本号，如"1.5.0"  *必须设置
	public native @StdString  String deviceInfo(); public native jst_ScanAppInfo deviceInfo(String deviceInfo);		//设备信息 如"pc-windows"  *必须设置
	public native @StdString  String mac(); public native jst_ScanAppInfo mac(String mac);			//mac地址  windows,mac,linux平台会自动获取，其它平台需手动设置
}


@Namespace("service") public static class jst_TinyRecContact extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public jst_TinyRecContact() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_TinyRecContact(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_TinyRecContact(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public jst_TinyRecContact position(long position) {
        return (jst_TinyRecContact)super.position(position);
    }

	public native @StdString  String lastMsg(); public native jst_TinyRecContact lastMsg(String lastMsg);
}

@Namespace("service") @NoOffset public static class jst_MsgMasterplate extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_MsgMasterplate(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_MsgMasterplate(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_MsgMasterplate position(long position) {
        return (jst_MsgMasterplate)super.position(position);
    }

	public jst_MsgMasterplate() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @StdString  String body(); public native jst_MsgMasterplate body(String body);
	public native @StdString  String content(); public native jst_MsgMasterplate content(String content);
	public native @Cast("int64") long createTime(); public native jst_MsgMasterplate createTime(long createTime);
	public native @StdString  String detailUrl(); public native jst_MsgMasterplate detailUrl(String detailUrl);
	public native @StdString  String title(); public native jst_MsgMasterplate title(String title);
	public native @StdString  String toUsers(); public native jst_MsgMasterplate toUsers(String toUsers);
	public native @StdString  String status(); public native jst_MsgMasterplate status(String status);
	public native @StdString  String statColor(); public native jst_MsgMasterplate statColor(String statColor);
	public native @StdString  String titleColor(); public native jst_MsgMasterplate titleColor(String titleColor);
	public native @StdString  String typeM(); public native jst_MsgMasterplate typeM(String typeM);
	public native @StdString  String titleBGColor(); public native jst_MsgMasterplate titleBGColor(String titleBGColor);
	public native @StdString  String fields(); public native jst_MsgMasterplate fields(String fields);
	public native @StdString  String creator(); public native jst_MsgMasterplate creator(String creator);
	public native @StdString  String mToken(); public native jst_MsgMasterplate mToken(String mToken);
	public native @StdString  String bId(); public native jst_MsgMasterplate bId(String bId);
	public native @StdString  String buttons(); public native jst_MsgMasterplate buttons(String buttons);
	public native @StdString  String eventData(); public native jst_MsgMasterplate eventData(String eventData);
	public native @StdString  String isShowSession(); public native jst_MsgMasterplate isShowSession(String isShowSession);
}


@Namespace("service") @NoOffset public static class jst_MsgActionCard extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_MsgActionCard(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_MsgActionCard(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_MsgActionCard position(long position) {
        return (jst_MsgActionCard)super.position(position);
    }

	public jst_MsgActionCard() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @StdString  String title(); public native jst_MsgActionCard title(String title); // 标题
	public native @StdString  String content(); public native jst_MsgActionCard content(String content); // 内容说明
	public native @StdString  String bID(); public native jst_MsgActionCard bID(String bID); //  业务方自己的唯一主键
	public native @StdString  String fileds(); public native jst_MsgActionCard fileds(String fileds); // 补充的内容, markdown形式展示
	public native @StdString  String button(); public native jst_MsgActionCard button(String button); // 业务动作，确定；其他业务可以扩展多个动作
	public native @StdString  String detailUrl(); public native jst_MsgActionCard detailUrl(String detailUrl); //  消息正文的链接URL
	public native @StdString  String picUrl(); public native jst_MsgActionCard picUrl(String picUrl); // 消息中的图片
	public native @StdString  String userList(); public native jst_MsgActionCard userList(String userList); // 参与人员, 多个人员逗号分隔
	public native int isShowSession(); public native jst_MsgActionCard isShowSession(int isShowSession); //客户端根据该字段判断展示位置(1展示会话不展示工作台; 2不展示会话, 展示工作台; 3展示会话和工作台; 4不展示会话和工作台)
	public native @StdString  String tag(); public native jst_MsgActionCard tag(String tag); // 消息标签，最多支持4个中文字符，12个英文字符, 最多支持6个


}

@Namespace("service") @NoOffset public static class jst_MsgMail extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_MsgMail(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_MsgMail(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_MsgMail position(long position) {
        return (jst_MsgMail)super.position(position);
    }

	public jst_MsgMail() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**发送者 */
	public native @StdString  String senderName(); public native jst_MsgMail senderName(String senderName);
	public native @StdString  String senderAddress(); public native jst_MsgMail senderAddress(String senderAddress);//<发送者邮箱
	/**邮件主题 */
	public native @StdString  String subject(); public native jst_MsgMail subject(String subject);
	/**邮件内容 */
	public native @StdString  String content(); public native jst_MsgMail content(String content);
	/**接收者 */
	public native @ByRef StringVector receivers(); public native jst_MsgMail receivers(StringVector receivers);
}
@Namespace("service") @NoOffset public static class jst_MsgRedPacket extends jst_MediaMsgBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public jst_MsgRedPacket(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public jst_MsgRedPacket(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public jst_MsgRedPacket position(long position) {
        return (jst_MsgRedPacket)super.position(position);
    }

	public jst_MsgRedPacket() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**附带消息 */
	public native @StdString  String body(); public native jst_MsgRedPacket body(String body);
}


// Parsed from interface/jsonTransTool.h

/*
* json_api_for_pc.h
*
*  Created on: 2016年04月07日
*      Author: corning
*/

// #ifndef JSON_JSONTRANSTOOL_H_
// #define JSON_JSONTRANSTOOL_H_

// #include <config.h>
// #include <string>
// #include "../model/Msg.h"
// #ifdef   SERVICE_EXPORTS
// #ifdef _WIN32
// #else
// #define SERVICE_API 
// #endif
// #else
// #endif
	/**
	* \brief 解析消息json
	* @param [in] type  消息类型  
	* @see jsonToolExport.h
	* @param [in] strIn 消息json串
	* @param [out] pOut  解析结果
	* @see jsonToolExport.h
	*/
@Namespace("service") public static native @Cast("bool") boolean logic_jsonTransToStruct(@Cast("uint16") int type, @StdString  String strIn, Pointer pOut);
/**
* \brief 构造消息json
* @param [in] type  消息类型
* @see jsonToolExport.h
* @param [out] pOut  解析结果
* @see jsonToolExport.h
* @param [in] strIn 消息json串
*/

@Namespace("service") public static native @Cast("bool") boolean logic_structTransToJson(@Cast("uint16") int type, Pointer pIn, @StdString  String strOut);


@Namespace("service") public static native @SharedPtr MsgDivers toMsgDivers(Msg baseMsg);

@Namespace("service") public static native @SharedPtr @ByVal MsgText toMsgText(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgSys toMsgSys(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgVoice toMsgVoice(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgVedio toMsgVedio(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgAudio toMsgAudio(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgPosition toMsgPosition(Msg baseMsg);

@Namespace("service") public static native @SharedPtr @ByVal MsgImg toMsgImg(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgFile toMsgFile(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgCard toMsgCard(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgTip toMsgTip(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgWeb toMsgWeb(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgRevoke toMsgRevoke(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgDynExpression toMsgDynExpression(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgPicWithText toMsgPicWithText(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgTask toMsgTask(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgDynExpression2 toMsgDynExpression2(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgMasterplate toMsgMasterplate(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgActionCard toMsgActionCard(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgMiniVedio toMsgMsgMiniVedio(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgNineBlock toMsgNineBlock(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgConference toMsgConference(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgMail toMsgMail(Msg baseMsg);

@Namespace("service") public static native @SharedPtr @ByVal MsgRedPacket toMsgRedPacket(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgUniversal toMsgUniversal(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgAppShare toMsgAppShare(Msg baseMsg);

@Namespace("service") public static native @SharedPtr MsgE2E toMsgE2E(Msg baseMsg);



// #endif /* JSON_JSONTRANSTOOL_H_ */


// Parsed from extModel/packet.h

// #pragma once

/*****************************************************
    NotifyChannel��ʹ�õĽṹ���ڴ��ļ��ж���
        ��������Service���õ��Ľṹ��
    <p>
    ����������õ��Ľṹ��ֱ��� avpacket.h�� �ж���
    ��ӽṹ���ڲ����Ӧpacket�����  ���ļ���Ҫ�����޸�
******************************************************/

// #include "../model/SDKTypes.h"
// #include <string>
// #include <vector>
// #include "../model/Optional.h"
// #include <map>

// #ifdef _WIN32
// #else
//
// #endif
    @Namespace("model") public static class YMD extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public YMD() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public YMD(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public YMD(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public YMD position(long position) {
            return (YMD)super.position(position);
        }
    
        public native @Cast("int32") int year(); public native YMD year(int year);                 // 0 ����ʹ��
        public native @Cast("int8") byte month(); public native YMD month(byte month);                 // ��1��ʼ
        public native @Cast("int8") byte day(); public native YMD day(byte day);                   // ��1��ʼ
    }

    @Namespace("model") public static class AccountType extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AccountType() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AccountType(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AccountType(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AccountType position(long position) {
            return (AccountType)super.position(position);
        }
    
        public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef AccountType rhs);
        public native @Cast("int8") byte type(); public native AccountType type(byte type);                  // �˺����� 1���绰, 3������, 4��userID, 5:���֤, 6��������, 7:�Զ����ʺ�(��������)
        public native @StdString  String accounts(); public native AccountType accounts(String accounts);       // �˺�
        public native @StdString  String mark(); public native AccountType mark(String mark);           // ��ʶ
    }
    @Namespace("model") @NoOffset public static class AVEvent extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AVEvent(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AVEvent(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public AVEvent position(long position) {
            return (AVEvent)super.position(position);
        }
    
        public AVEvent() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @Cast("int64") long userId(); public native AVEvent userId(long userId);
        /**1������  2����Ƶ */
        public native @Cast("int8") byte avType(); public native AVEvent avType(byte avType);

        public native @Cast("int8") byte type(); public native AVEvent type(byte type);//�¼����� 1,��Ƶ���� 2,�Ҷ���Ϣ 3,���󱻾� 4,æ 5,��ʱ 6,ȡ�� 7,���� 8,�Ͽ�
        /**����� Ψһ */
        public native @StdString  String channelId(); public native AVEvent channelId(String channelId);
        /**��Ƶ�ػ����� 1:���� 2:���� */
        public native @Cast("int8") byte videoType(); public native AVEvent videoType(byte videoType);
        /**�ļ��� */
        public native @StdString  String fileName(); public native AVEvent fileName(String fileName);
        public native @Cast("int64") long fileSize(); public native AVEvent fileSize(long fileSize);//<�ļ���С
    }

    @Namespace("model") @NoOffset public static class channelEvent extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public channelEvent(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public channelEvent(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public channelEvent position(long position) {
            return (channelEvent)super.position(position);
        }
    
        public channelEvent() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @Cast("int64") long userId(); public native channelEvent userId(long userId);
        public native @Cast("int64") long targetId(); public native channelEvent targetId(long targetId);
        public native @Cast("bool") boolean isGroup(); public native channelEvent isGroup(boolean isGroup);
        /** �¼����� 1,���� 2,�Ҷ� 3,���󱻾� 4,�Է�æ 5,��ʱ 6,ȡ��7,���ӳɹ�,8,���ӶϿ�,9,�������ѽ���,10,P2P���,11,�յ�accept ��Ϣ ������Ҫ����createAnswer 12,�յ�responce ��������Ҫ����setRemoteDescrption */
        public native @Cast("int8") byte type(); public native channelEvent type(byte type);
        /** ����� Ψһ */
        public native @Cast("int64") long channelId(); public native channelEvent channelId(long channelId);
		/**SessionId */
		public native @Cast("int64") long sessionId(); public native channelEvent sessionId(long sessionId);
        /** 1����Ƶ 2����Ƶ��3,����UI���� 4,����UI��Ƶ */
        public native @Cast("int8") byte videoType(); public native channelEvent videoType(byte videoType);
        /** P2Pʱ������ļ��� */
        public native @StdString  String fileName(); public native channelEvent fileName(String fileName);
        /**�յ�acceptʱ ��sdp�����ϲ� */
        public native @StdString  String sdp(); public native channelEvent sdp(String sdp);
        /** ����������rtc  ///< rtc = 0 ���� =1 */
        public native @Cast("int8") byte version(); public native channelEvent version(byte version);
        /**���з����������û��б� */
        public native @ByRef LongVector members(); public native channelEvent members(LongVector members);
		/**��չJson */
		public native @StdString  String extendJson(); public native channelEvent extendJson(String extendJson);
    }



	/** ��֯��Ϣ */
	@Namespace("model") @NoOffset public static class OrganizationInfo extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public OrganizationInfo(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public OrganizationInfo(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public OrganizationInfo position(long position) {
	        return (OrganizationInfo)super.position(position);
	    }
	
		public OrganizationInfo() { super((Pointer)null); allocate(); }
		private native void allocate();

		public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OrganizationInfo rhs);

		/** ��֯����ID orgID. */
		public native @Cast("int64") long orgID(); public native OrganizationInfo orgID(long orgID);

		/** ��ҵID enterpriseID. */
		public native @Cast("int64") long enterpriseID(); public native OrganizationInfo enterpriseID(long enterpriseID);
		/** ��֯�������� orgName. */
		public native @StdString  String orgName(); public native OrganizationInfo orgName(String orgName);
		/** ��֯�������� orgCode. */
		public native @StdString  String orgCode(); public native OrganizationInfo orgCode(String orgCode);
		/** �Ƿ�Ҷ�ڵ� leaf. */
		public native @Cast("int8") byte leaf(); public native OrganizationInfo leaf(byte leaf);
		/** ���ڵ� parentOrgID. */
		public native @Cast("int64") long parentOrgID(); public native OrganizationInfo parentOrgID(long parentOrgID);
		/** ��ע remark. */
		public native @StdString  String remark(); public native OrganizationInfo remark(String remark);
		/** ���� orderNum. */
		public native @Cast("int64") long orderNum(); public native OrganizationInfo orderNum(long orderNum);
		/** �칫��ID branchID. */
		public native @Cast("int64") long branchID(); public native OrganizationInfo branchID(long branchID);
		/** ɾ�� departID. */
		public native @StdString  String departID(); public native OrganizationInfo departID(String departID);
		/** ��֯���� departLevel. */
		public native @Cast("int8") byte departLevel(); public native OrganizationInfo departLevel(byte departLevel);
		/** �ݹ���������¼���֯�� subOrgNum. */
		public native @Cast("int64") long subOrgNum(); public native OrganizationInfo subOrgNum(long subOrgNum);
		/** �ݹ���������¼���Ա�� subUserNum. */
		public native @Cast("int64") long subUserNum(); public native OrganizationInfo subUserNum(long subUserNum);
		/** �Ƿ�����, 1�Ա����Ź��� 2�����в��Ź�����3�Բ��ֲ��Ź��� isHidden. */
		public native @Cast("int8") byte isHidden(); public native OrganizationInfo isHidden(byte isHidden);
		/** ʡ��ID provinceID. */
		public native @Cast("int64") long provinceID(); public native OrganizationInfo provinceID(long provinceID);
		/** ʡ������ provinceName. */
		public native @StdString  String provinceName(); public native OrganizationInfo provinceName(String provinceName);
		/** ��ID cityID. */
		public native @Cast("int64") long cityID(); public native OrganizationInfo cityID(long cityID);
		/** ������ cityName. */
		public native @StdString  String cityName(); public native OrganizationInfo cityName(String cityName);
		/** ��ID areaID. */
		public native @Cast("int64") long areaID(); public native OrganizationInfo areaID(long areaID);
		/** ������ areaName. */
		public native @StdString  String areaName(); public native OrganizationInfo areaName(String areaName);
		/** ƴ�� orgNamePinyin. */
		public native @StdString  String orgNamePinyin(); public native OrganizationInfo orgNamePinyin(String orgNamePinyin);
	}

	@Namespace("model") @NoOffset public static class multiRtcEvent extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public multiRtcEvent(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public multiRtcEvent(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public multiRtcEvent position(long position) {
	        return (multiRtcEvent)super.position(position);
	    }
	
		public multiRtcEvent() { super((Pointer)null); allocate(); }
		private native void allocate();
		/** �¼�������ID */
		public native @Cast("int64") long userId(); public native multiRtcEvent userId(long userId);
		/** �¼�����(1���� 2���� 3���� 4�Ҷ� 5���� 6��ʱ) */
		public native @Cast("int8") byte type(); public native multiRtcEvent type(byte type);
		/** �¼�ע�� */
		public native @StdString  String annotation(); public native multiRtcEvent annotation(String annotation);
		/** ȺID */
		public native @Cast("int64") long groupId(); public native multiRtcEvent groupId(long groupId);
		/** ��������ID */
		public native @Cast("int64") long onwerId(); public native multiRtcEvent onwerId(long onwerId);
		/** ����ID */
		public native @StdString  String roomId(); public native multiRtcEvent roomId(String roomId);
		/** �������� */
		public native @StdString  String roomName(); public native multiRtcEvent roomName(String roomName);
		/** ������Ա(����/����/��ʱ��Ա). */
		public native @ByRef LongVector selects(); public native multiRtcEvent selects(LongVector selects);
		/** ȫ����Ա */
		public native @ByRef LongVector members(); public native multiRtcEvent members(LongVector members);
		/** ��չJson */
		public native @StdString  String extendJson(); public native multiRtcEvent extendJson(String extendJson);
	}

    @Namespace("model") @NoOffset public static class tclEvent extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public tclEvent(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public tclEvent(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public tclEvent position(long position) {
            return (tclEvent)super.position(position);
        }
    
        public tclEvent() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** �Է�Id */
        public native @Cast("int64") long userId(); public native tclEvent userId(long userId);
        /** �¼����� 1,���� 2,�Ҷ� 3,���󱻾� 4,�Է�æ 5,��ʱ 6,ȡ�� 7,���� 8,��Ӧ 9,���� 10,����,11,�л���Ļ���� 12,�л����� 13,�ܾ��л� */
        public native @Cast("int8") byte type(); public native tclEvent type(byte type);
        /** ����� Ψһ���ܿط�UserId�� */
        public native @Cast("int64") long channelId(); public native tclEvent channelId(long channelId);
        /** 1-��Ļ���� 2-Զ�̲��� */
        public native @Cast("int8") byte ctrlType(); public native tclEvent ctrlType(byte ctrlType);
        public native @ByRef StringVector vecIPAddr(); public native tclEvent vecIPAddr(StringVector vecIPAddr);     // �ܿط�IP��ַ�б�
    }

    @Namespace("model") @NoOffset public static class mailFolder extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public mailFolder(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public mailFolder(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public mailFolder position(long position) {
            return (mailFolder)super.position(position);
        }
    
        public mailFolder() { super((Pointer)null); allocate(); }
        private native void allocate();
        /**�ļ����� */
        public native @StdString  String folderName(); public native mailFolder folderName(String folderName);
        /**δ���ʼ���Ŀ */
        public native @Cast("int64") long unReadNum(); public native mailFolder unReadNum(long unReadNum);
        /**���ʼ���Ŀ */
        public native @Cast("int64") long totalNum(); public native mailFolder totalNum(long totalNum);
        /**�Ǳ���Ŀ */
        public native @Cast("int64") long flagNum(); public native mailFolder flagNum(long flagNum);
    }
    @Namespace("model") @NoOffset public static class mailDate extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public mailDate(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public mailDate(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public mailDate position(long position) {
            return (mailDate)super.position(position);
        }
    
        public mailDate() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native int year(); public native mailDate year(int year);
        public native int mon(); public native mailDate mon(int mon);
        public native int day(); public native mailDate day(int day);
        public native int hour(); public native mailDate hour(int hour);
        public native int min(); public native mailDate min(int min);
        public native int sec(); public native mailDate sec(int sec);
        public native int weekDay(); public native mailDate weekDay(int weekDay);
        public native @StdString  String timeZone(); public native mailDate timeZone(String timeZone);
    }
    @Namespace("model") @NoOffset public static class mailSection extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public mailSection(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public mailSection(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public mailSection position(long position) {
            return (mailSection)super.position(position);
        }
    
        public mailSection() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native int sn(); public native mailSection sn(int sn);//<���
        public native int type(); public native mailSection type(int type);//< text image
        public native int format(); public native mailSection format(int format);//< html jpeg;
        public native int tsfEncode(); public native mailSection tsfEncode(int tsfEncode); //<������뷽ʽ  base64
        public native int oriEncode(); public native mailSection oriEncode(int oriEncode); //<���ı��� utf-8
        public native @Cast("int8") byte isAttach(); public native mailSection isAttach(byte isAttach);

        public native @StdString  String sectionName(); public native mailSection sectionName(String sectionName);
        public native @StdString  String sectionPath(); public native mailSection sectionPath(String sectionPath);//������
        public native @Cast("int64") long sectionSize(); public native mailSection sectionSize(long sectionSize);
    }
    @Namespace("model") @NoOffset public static class mailHeader extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public mailHeader(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public mailHeader(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public mailHeader position(long position) {
            return (mailHeader)super.position(position);
        }
    
        public mailHeader() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @StdString  String UID(); public native mailHeader UID(String UID);
        public native @StdString  String subject(); public native mailHeader subject(String subject);
        public native @StdString  String from(); public native mailHeader from(String from);
        public native @StdString  String name(); public native mailHeader name(String name);
        public native @ByRef StringVector cc(); public native mailHeader cc(StringVector cc);
        public native @ByRef StringVector recv(); public native mailHeader recv(StringVector recv);
        public native @Cast("int64") long time(); public native mailHeader time(long time);
        public native @Cast("int8") byte status(); public native mailHeader status(byte status);
        public native @StdVector mailSection attach(); public native mailHeader attach(mailSection attach);
        public native @ByRef mailDate date(); public native mailHeader date(mailDate date);
        public native @Cast("int64") long totalSize(); public native mailHeader totalSize(long totalSize);
    }
    @Namespace("model") @NoOffset public static class mail extends mailHeader {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public mail(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public mail(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public mail position(long position) {
            return (mail)super.position(position);
        }
    
        public mail() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @StdString  String body(); public native mail body(String body);
        public native @StdString  String digst(); public native mail digst(String digst);
        public native @StdString  String charset(); public native mail charset(String charset);//���ı���
        /**������뷽ʽ */
        public native @StdString  String tsfEncodeType(); public native mail tsfEncodeType(String tsfEncodeType);
        public native @Cast("bool") boolean isNew(); public native mail isNew(boolean isNew);//����Ƿ������ʼ������Ѿ�ɾ�����ʼ� ����
        public native @StdString  String floderName(); public native mail floderName(String floderName);
    }

    @Namespace("model") @NoOffset public static class pushMessage extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public pushMessage(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public pushMessage(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public pushMessage position(long position) {
            return (pushMessage)super.position(position);
        }
    
        public pushMessage() { super((Pointer)null); allocate(); }
        private native void allocate();

        public native @Cast("int64") long previousMsgID(); public native pushMessage previousMsgID(long previousMsgID);
        /**
        * 11 ���յ�Э������
        * 12 ���յ�Э������ظ�
        * 13 ���յ�ͨ����Ϣ
        * 81 �˲������ģ������ˣ�
        * 82 �˲������ģ�ԭ�����ˣ�
        * 83 ͨ����˽��
        */
        public native @Cast("int8") byte msgType(); public native pushMessage msgType(byte msgType);
        public native @Cast("int64") long msgID(); public native pushMessage msgID(long msgID);
        public native @Cast("int64") long createUserID(); public native pushMessage createUserID(long createUserID);
        public native @Cast("int64") long fromTeamID(); public native pushMessage fromTeamID(long fromTeamID);
        public native @ByRef LongVector targetUserIDs(); public native pushMessage targetUserIDs(LongVector targetUserIDs);
        public native @StdString  String title(); public native pushMessage title(String title);
        public native @StdString  String body(); public native pushMessage body(String body);
        public native @StdString  String format(); public native pushMessage format(String format);
        public native @Cast("int64") long originalMsgID(); public native pushMessage originalMsgID(long originalMsgID);
        public native @Cast("int8") byte status(); public native pushMessage status(byte status);
        public native @Cast("int64") long createTime(); public native pushMessage createTime(long createTime);
        public native @Cast("int8") byte operType(); public native pushMessage operType(byte operType);
        public native @StdString  String maccode(); public native pushMessage maccode(String maccode);
        public native @Cast("int8") byte havVaild(); public native pushMessage havVaild(byte havVaild);
    }
	
	@Namespace("model") @NoOffset public static class GroupInfoOrSettingInfo extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public GroupInfoOrSettingInfo(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public GroupInfoOrSettingInfo(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public GroupInfoOrSettingInfo position(long position) {
	        return (GroupInfoOrSettingInfo)super.position(position);
	    }
	

		/**
		 * 25 Ⱥv���û���Ϣ���� 
		 */
		public native int type(); public native GroupInfoOrSettingInfo type(int type);
		public native @Cast("int64") long groupId(); public native GroupInfoOrSettingInfo groupId(long groupId);//type = 25 ʱʹ��
		public GroupInfoOrSettingInfo() { super((Pointer)null); allocate(); }
		private native void allocate();
	}



// Parsed from extModel/avpacket.h

// #pragma once

// #include "../extModel/packet.h"
    @Namespace("model") @NoOffset public static class AVRequest extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AVRequest(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AVRequest(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public AVRequest position(long position) {
            return (AVRequest)super.position(position);
        }
    
        public AVRequest() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @Cast("int64") long targetId(); public native AVRequest targetId(long targetId);//Ŀ��Id

// #ifdef _WIN32
// #else
        public native long local(); public native AVRequest local(long local);
        public native long remote(); public native AVRequest remote(long remote);
// #endif

        /**����� Ψһ */
        public native @StdString  String channelId(); public native AVRequest channelId(String channelId);
        /**1������  2����Ƶ */
        public native @Cast("int8") byte type(); public native AVRequest type(byte type);
        public native @Cast("bool") boolean hungUp(); public native AVRequest hungUp(boolean hungUp);/**true �Ҷ� */
        /**��Ƶ�ػ����� 1:���� 2:���� */
        public native @Cast("int8") byte videoType(); public native AVRequest videoType(byte videoType);
    }

    @Namespace("model") @NoOffset public static class AVRejectOrAccept extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AVRejectOrAccept(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AVRejectOrAccept(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public AVRejectOrAccept position(long position) {
            return (AVRejectOrAccept)super.position(position);
        }
    
        public AVRejectOrAccept() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @Cast("int64") long targetId(); public native AVRejectOrAccept targetId(long targetId);//Ŀ��Id

// #ifdef _WIN32
// #else
        public native long local(); public native AVRejectOrAccept local(long local);
        public native long remote(); public native AVRejectOrAccept remote(long remote);
// #endif

        public native @Cast("int8") byte type(); public native AVRejectOrAccept type(byte type);//1,���� 2���ܾ�
        /**����� Ψһ */
        public native @StdString  String channelId(); public native AVRejectOrAccept channelId(String channelId);
        /**��Ƶ�ػ����� 1:���� 2:���� */
        public native @Cast("int8") byte videoType(); public native AVRejectOrAccept videoType(byte videoType);
        /** P2Pʱ�������Ϊ·�� */
        public native @StdString  String path(); public native AVRejectOrAccept path(String path);

    }


// Parsed from extModel/extpacket.h

// #pragma once

// #include "../model/SDKTypes.h"
// #include <string>
// #include <vector>
// #include "../model/Optional.h"
// #include <map>

// #ifdef _WIN32
// #else
//
// #endif

    // 任务属性
    @Namespace("model") @NoOffset public static class MsgProperties extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public MsgProperties(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public MsgProperties(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public MsgProperties position(long position) {
            return (MsgProperties)super.position(position);
        }
    
        public MsgProperties() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** 时区 */
        public native @StdString  String timeZone(); public native MsgProperties timeZone(String timeZone);
        /** 任务时间 */
        public native @StdString  String timeTask(); public native MsgProperties timeTask(String timeTask);
        /** 是否完成     0：未完成 1：完成 */
        public native @StdString  String isFinish(); public native MsgProperties isFinish(String isFinish);
        /** 任务标记     0：非任务 1：任务 */
        public native @StdString  String isTask(); public native MsgProperties isTask(String isTask);
        /** 是否已读     0：未读   1：已读  2：已回复 */
        public native @StdString  String isRead(); public native MsgProperties isRead(String isRead);
    }

    // task
    @Namespace("model") @NoOffset public static class Task extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Task(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public Task(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public Task position(long position) {
            return (Task)super.position(position);
        }
    
        public Task() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** 自己发送的这个字段填0 */
        public native @Cast("int64") long fromeUserID(); public native Task fromeUserID(long fromeUserID);
        /** 发送时间 */
        public native @Cast("int64") long sendTime(); public native Task sendTime(long sendTime);
        /** 消息体 */
        public native @StdString  String body(); public native Task body(String body);
        /** 任务ID */
        public native @Cast("int64") long msgID(); public native Task msgID(long msgID);
        public native @ByRef MsgProperties msgProperties(); public native Task msgProperties(MsgProperties msgProperties);
        /** 如果是针对群全体成员，就是群ID，如果针对部分人，就是人的ID数组 */
        public native @StdString  String relatedUsers(); public native Task relatedUsers(String relatedUsers);
        /** 返回的时候用 */
        public native @ByRef LongVector vt_relatedUsers(); public native Task vt_relatedUsers(LongVector vt_relatedUsers);
        /** 过滤词类型 */
        public native @Cast("int32") int badwordType(); public native Task badwordType(int badwordType);
        /** 过滤词 */
        public native @ByRef StringVector vt_badword(); public native Task vt_badword(StringVector vt_badword);
        /** 是否置顶   0：不置顶 1：置顶 */
        public native @Cast("int8") byte top(); public native Task top(byte top);
        /** 接受者，可以为群或者人 */
        public native @Cast("int64") long targetID(); public native Task targetID(long targetID);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**房间 */
    @Namespace("model") @NoOffset public static class room extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public room(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public room(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public room position(long position) {
            return (room)super.position(position);
        }
    
        public room() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** 房间ID */
        public native int roomID(); public native room roomID(int roomID);
        /** 房间名 */
        public native @StdString  String roomName(); public native room roomName(String roomName);
        /** 房间成员 */
        public native @StdString  String roomMember(); public native room roomMember(String roomMember);
        /** 返回的时候用 */
        public native @ByRef LongVector vt_roomMember(); public native room vt_roomMember(LongVector vt_roomMember);
        /** 是否置顶   0：不置顶 1：置顶 */
        public native @Cast("int8") byte top(); public native room top(byte top);
        /** 头像 */
        public native @StdString  String portraitURL(); public native room portraitURL(String portraitURL);
    }
    /////////////////////////////////////////////////////////////////////////

    /** 企业信息 */
    @Namespace("model") @NoOffset public static class entpriseInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public entpriseInfo(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public entpriseInfo(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public entpriseInfo position(long position) {
            return (entpriseInfo)super.position(position);
        }
    
        public entpriseInfo() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** 企业ID enterpriseID. */
        public native @Cast("int64") long enterpriseID(); public native entpriseInfo enterpriseID(long enterpriseID);
        /** 企业全称 fullName. */
        public native @StdString  String fullName(); public native entpriseInfo fullName(String fullName);
        /** 企业简称 shortName. */
        public native @StdString  String shortName(); public native entpriseInfo shortName(String shortName);
        /** 企业关键字 keyWords. */
        public native @StdString  String keyWords(); public native entpriseInfo keyWords(String keyWords);
        /** 企业所属行业 sector. */
        public native @Cast("int64") long sector(); public native entpriseInfo sector(long sector);
        /** 企业所属行业的具体哪一类 sectorDetail. */
        public native @Cast("int64") long sectorDetail(); public native entpriseInfo sectorDetail(long sectorDetail);
        /** 企业类型 type. */
        public native @Cast("int8") byte type(); public native entpriseInfo type(byte type);
        /** 企业所属省份 provinceID. */
        public native @Cast("int64") long provinceID(); public native entpriseInfo provinceID(long provinceID);
        /** 企业所属市 cityID. */
        public native @Cast("int64") long cityID(); public native entpriseInfo cityID(long cityID);
        /** 企业所属地区 areaID. */
        public native @Cast("int64") long areaID(); public native entpriseInfo areaID(long areaID);
        /** 企业地址 address. */
        public native @StdString  @Name("address") String _address(); public native entpriseInfo _address(String _address);
        /** 企业邮编 postcode. */
        public native @StdString  String postcode(); public native entpriseInfo postcode(String postcode);
        /** 企业电话 phone. */
        public native @StdString  String phone(); public native entpriseInfo phone(String phone);
        /** 企业传真 fax. */
        public native @StdString  String fax(); public native entpriseInfo fax(String fax);
        /** 企业邮箱 email. */
        public native @StdString  String email(); public native entpriseInfo email(String email);
        /** 企业主业 homepage. */
        public native @StdString  String homepage(); public native entpriseInfo homepage(String homepage);
        /** 企业简介 introduction. */
        public native @StdString  String introduction(); public native entpriseInfo introduction(String introduction);
        /** 企业logURL地址 logUrl. */
        public native @StdString  String logUrl(); public native entpriseInfo logUrl(String logUrl);
        /** 企业状态：1:审核通过；2：未审核；3：审核未通过 status. */
        public native @Cast("int8") byte status(); public native entpriseInfo status(byte status);
        /** 注册时间 creationDate. */
        public native @Cast("int64") long creationDate(); public native entpriseInfo creationDate(long creationDate);
        /** 修改时间 updatedDate. */
        public native @Cast("int64") long updatedDate(); public native entpriseInfo updatedDate(long updatedDate);
    }


    /** 企业成员信息 */
    @Namespace("model") @NoOffset public static class EntpriseUserInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public EntpriseUserInfo(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public EntpriseUserInfo(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public EntpriseUserInfo position(long position) {
            return (EntpriseUserInfo)super.position(position);
        }
    
        public EntpriseUserInfo() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** 用户ID userID. */
        public native @Cast("int64") long userID(); public native EntpriseUserInfo userID(long userID);
        /** 企业ID enterpriseID. */
        public native @Cast("int64") long enterpriseID(); public native EntpriseUserInfo enterpriseID(long enterpriseID);
        /** 组织机构ID orgID. */
        public native @Cast("int64") long orgID(); public native EntpriseUserInfo orgID(long orgID);
        /** 角色ID roleID. */
        public native @Cast("int64") long roleID(); public native EntpriseUserInfo roleID(long roleID);
        /** 企业内用户名称 enName. */
        public native @StdString  String enName(); public native EntpriseUserInfo enName(String enName);
        /** 企业内用户职位 duty. */
        public native @StdString  String duty(); public native EntpriseUserInfo duty(String duty);
        /** 企业内用户email enMail. */
        public native @StdString  String enMail(); public native EntpriseUserInfo enMail(String enMail);
        /** 企业内用户手机号 enMobile. */
        public native @StdString  String enMobile(); public native EntpriseUserInfo enMobile(String enMobile);
        /** 企业账号是否被停用 1：正常 2：停用 status. */
        public native @Cast("int8") byte status(); public native EntpriseUserInfo status(byte status);
        /** 人员排序 orderNum. */
        public native @Cast("int64") long orderNum(); public native EntpriseUserInfo orderNum(long orderNum);
        /** 用户修改组织机构使用，表示用户新组织机构，在修改时给用户增加组织机构时，使用newOgrID而不是orgID newOrgID. */
        public native @Cast("int64") long newOrgID(); public native EntpriseUserInfo newOrgID(long newOrgID);
        /** 组织名 orgName. */
        public native @StdString  String orgName(); public native EntpriseUserInfo orgName(String orgName);
        /** 扩展信息 extend. */
        public native @StdString  String extend(); public native EntpriseUserInfo extend(String extend);
        /** 账号名称 accountName. */
        public native @StdString  String accountName(); public native EntpriseUserInfo accountName(String accountName);
        /** 拼音 enNamePy. */
        public native @StdString  String enNamePy(); public native EntpriseUserInfo enNamePy(String enNamePy);
        /** 业务状态 业务状态：1：初始状态，2：在高管群 */
        public native @Cast("int8") byte bizStatus(); public native EntpriseUserInfo bizStatus(byte bizStatus);
        /** 头像 */
        public native @StdString  String userHead(); public native EntpriseUserInfo userHead(String userHead);
        /**头像全路径 */
        public native @StdString  String userHeadUrl(); public native EntpriseUserInfo userHeadUrl(String userHeadUrl);
        /** 权限 */
        public native @StdString  String power(); public native EntpriseUserInfo power(String power);
		/** 工作密级 */
		public native int securityLevel(); public native EntpriseUserInfo securityLevel(int securityLevel);
		/** 用户标签id,多个用逗号分隔 */
		public native @StdString  String tagIds(); public native EntpriseUserInfo tagIds(String tagIds);
    }

    /** 团队用户查询参数 */
    @Namespace("model") @NoOffset public static class EnterpriseUserQueryInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public EnterpriseUserQueryInfo(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public EnterpriseUserQueryInfo(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public EnterpriseUserQueryInfo position(long position) {
            return (EnterpriseUserQueryInfo)super.position(position);
        }
    
        public EnterpriseUserQueryInfo() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** 用户名称 username. */
        public native @StdString  String username(); public native EnterpriseUserQueryInfo username(String username);
        /** 企业ID entID. */
        public native @Cast("int64") long entID(); public native EnterpriseUserQueryInfo entID(long entID);
        /** 组织架构ID entOrgID. */
        public native @Cast("int64") long entOrgID(); public native EnterpriseUserQueryInfo entOrgID(long entOrgID);
        /** 分页页码 pageNo. */
        public native @Cast("int32") int pageNo(); public native EnterpriseUserQueryInfo pageNo(int pageNo);
        /** 分页每页大小 pageSize. */
        public native @Cast("int32") int pageSize(); public native EnterpriseUserQueryInfo pageSize(int pageSize);
        /** 企业用户ID. */
        public native @Cast("int64") long entUserID(); public native EnterpriseUserQueryInfo entUserID(long entUserID);
        /** 业务状态，1：默认，2：在高管层. */
        public native @Cast("int8") byte bizStatus(); public native EnterpriseUserQueryInfo bizStatus(byte bizStatus);
        /** 企业用户状态. */
        public native @Cast("int8") byte status(); public native EnterpriseUserQueryInfo status(byte status);
    }

    /** note */
    @Namespace("model") @NoOffset public static class _BaseNoteinfo__isset extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public _BaseNoteinfo__isset(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public _BaseNoteinfo__isset(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public _BaseNoteinfo__isset position(long position) {
            return (_BaseNoteinfo__isset)super.position(position);
        }
    
        public _BaseNoteinfo__isset() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @Cast("bool") boolean id(); public native _BaseNoteinfo__isset id(boolean id);						    /**记事本唯一标识 */
        public native @Cast("bool") boolean lastChgTime(); public native _BaseNoteinfo__isset lastChgTime(boolean lastChgTime);					/**最后修改时间,毫秒 */
        public native @Cast("bool") boolean sendUserId(); public native _BaseNoteinfo__isset sendUserId(boolean sendUserId);					/**发送的人 */
        public native @Cast("bool") boolean targetId(); public native _BaseNoteinfo__isset targetId(boolean targetId);						/**来源 人或者群		 */
        public native @Cast("bool") boolean type(); public native _BaseNoteinfo__isset type(boolean type);
        public native @Cast("bool") boolean content(); public native _BaseNoteinfo__isset content(boolean content);						/**内容     最长4096个字符	 */
        public native @Cast("bool") boolean title(); public native _BaseNoteinfo__isset title(boolean title);							/**标题     最长128字符 */
        public native @Cast("bool") boolean key(); public native _BaseNoteinfo__isset key(boolean key);							/**关键字(标签),  检索用 最长128字符 ,可以为空 */
        public native @Cast("bool") boolean isReminder(); public native _BaseNoteinfo__isset isReminder(boolean isReminder);					/**是否是提醒 */
        public native @Cast("bool") boolean rmdTime(); public native _BaseNoteinfo__isset rmdTime(boolean rmdTime);						/**提醒时间 */
        public native @Cast("bool") boolean isArchive(); public native _BaseNoteinfo__isset isArchive(boolean isArchive);						/**是否归档 */
    }
    /**记事本 */
    @Namespace("model") @NoOffset public static class BaseNoteInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public BaseNoteInfo(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public BaseNoteInfo(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public BaseNoteInfo position(long position) {
            return (BaseNoteInfo)super.position(position);
        }
    
        public BaseNoteInfo() { super((Pointer)null); allocate(); }
        private native void allocate();

        public native @Cast("bool") boolean isNet(); public native BaseNoteInfo isNet(boolean isNet);                             /**是否使用网络接口 */
        /**记事本唯一标识     收藏ID */
        public native @ByRef OptionalLong id(); public native BaseNoteInfo id(OptionalLong id);
        /**最后修改时间,毫秒  创建时间 */
        public native @ByRef OptionalLong lastChgTime(); public native BaseNoteInfo lastChgTime(OptionalLong lastChgTime);
        /**发送的人           消息来源Id   */
        public native @ByRef OptionalLong sendUserId(); public native BaseNoteInfo sendUserId(OptionalLong sendUserId);
        /**来源 人或者群      群Id */
        public native @ByRef OptionalLong targetId(); public native BaseNoteInfo targetId(OptionalLong targetId);
        /**
        *  低8位 类型 1. 文本，2，图片，3，音频，4，视频，5，URL
        *  高8位 1. 本地， 0. 网络
        */
        public native @ByRef OptionalByte type(); public native BaseNoteInfo type(OptionalByte type);
        public native @ByRef OptionalShort netType(); public native BaseNoteInfo netType(OptionalShort netType);
        /**
        根据文件类型
        1. 文本、URL 直接存储内容。
        2. 非文本类型，存储附件地址，网络地址和本地地址均可。
        */
        /**内容 最长4096个字符	    收藏消息 */
        public native @ByRef OptionalString content(); public native BaseNoteInfo content(OptionalString content);

        //这些都是本地记事本字段
        /**标题 最长128字符 */
        public native @ByRef OptionalString title(); public native BaseNoteInfo title(OptionalString title);
        /**关键字(标签),  检索用 最长128字符 ,可以为空 */
        public native @ByRef OptionalString key(); public native BaseNoteInfo key(OptionalString key);
        /**是否是提醒 */
        public native @ByRef OptionalByte isReminder(); public native BaseNoteInfo isReminder(OptionalByte isReminder);
        /**提醒时间 */
        public native @ByRef OptionalLong rmdTime(); public native BaseNoteInfo rmdTime(OptionalLong rmdTime);
        /**是否归档 */
        public native @ByRef OptionalByte isArchive(); public native BaseNoteInfo isArchive(OptionalByte isArchive);

        //以下是网络收藏字段
        /**消息属性 */
        public native @ByRef OptionalString msgProperties(); public native BaseNoteInfo msgProperties(OptionalString msgProperties);
        /**文件名 */
        public native @ByRef OptionalString fileName(); public native BaseNoteInfo fileName(OptionalString fileName);
        /**扩展字段 */
        public native @ByRef OptionalString exts(); public native BaseNoteInfo exts(OptionalString exts);
        public native @ByRef OptionalString loginInfo(); public native BaseNoteInfo loginInfo(OptionalString loginInfo);
    }
    @Namespace("model") @NoOffset public static class searchNoteInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public searchNoteInfo(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public searchNoteInfo(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public searchNoteInfo position(long position) {
            return (searchNoteInfo)super.position(position);
        }
    
        public searchNoteInfo() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** 是否使用网络接口   */
        public native @Cast("bool") boolean isNet(); public native searchNoteInfo isNet(boolean isNet);
        /** 起始消息ID / 网络接口：查询页数,从1开始 */
        public native @Cast("int64") long beginID(); public native searchNoteInfo beginID(long beginID);
        /** 查询的数量(为0查询全部) / 网络接口：单页的查询数量(为0查询全部) */
        public native @Cast("int32") int offset(); public native searchNoteInfo offset(int offset);
        /** 偏移标志；0.由大到小 1.由小到大 网络查询固定从大到小排列 */
        public native @Cast("int8") byte offsetFlag(); public native searchNoteInfo offsetFlag(byte offsetFlag);

        //以下几个字段是本地查询字段，网络查询不需要传值
        /** 0:查询所有; 1:根据msgType; 2:根据消息内容 3:根据文件名; */
        public native @Cast("int16") int type(); public native searchNoteInfo type(int type);
        /**
        * 下面3个字段每次只能给一个字段赋值，剩余2个字段不用赋值
        */
        /** 1:获取全部. */
        public native @Cast("int8") byte is_all(); public native searchNoteInfo is_all(byte is_all);
        /** 1:获取未归档 2:获取已经归档   */
        public native @Cast("int8") byte is_archive(); public native searchNoteInfo is_archive(byte is_archive);
		/** 根据关键词查找  */
		public native @StdString  String key(); public native searchNoteInfo key(String key);
        //本地查询字段 End

        /**
          * 网络查询参数，根据key条件查询
          * collectUserId   收藏者Id，必传
          * messageType     根据消息类型查询
          * message         根据消息内容查询
          * fileName        根据文件名称查询
          * startTime       创建开始时间
          * endTime         创建结束时间
        **/
        /** 网络查询参数  */
        public native @ByRef MapStr2 params(); public native searchNoteInfo params(MapStr2 params);
    }

    @Namespace("model") @NoOffset public static class OrgAndUserSearchIn extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public OrgAndUserSearchIn(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public OrgAndUserSearchIn(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public OrgAndUserSearchIn position(long position) {
            return (OrgAndUserSearchIn)super.position(position);
        }
    
        public OrgAndUserSearchIn() { super((Pointer)null); allocate(); }
        private native void allocate();

        public native @Cast("int8") byte type(); public native OrgAndUserSearchIn type(byte type);                                 /** 4：组织机构模糊查找 5：搜索人员接口 */
        public native @Cast("int64") long userID(); public native OrgAndUserSearchIn userID(long userID);                               /** 用户ID */
        public native @StdString  String name(); public native OrgAndUserSearchIn name(String name);                           /** 名称 */
        public native @Cast("int32") int pageNum(); public native OrgAndUserSearchIn pageNum(int pageNum);                              /** 页码 */
        public native @Cast("int32") int pageSize(); public native OrgAndUserSearchIn pageSize(int pageSize);                             /** 页长	 */
        public native @ByRef LongVector orgIDs(); public native OrgAndUserSearchIn orgIDs(LongVector orgIDs);                  /** 选择的部门ID集合(type=5时赋值) */
    }

    @Namespace("model") public static class OrgSearchUserInfo extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public OrgSearchUserInfo() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public OrgSearchUserInfo(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public OrgSearchUserInfo(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public OrgSearchUserInfo position(long position) {
            return (OrgSearchUserInfo)super.position(position);
        }
    
        public native @ByRef EntpriseUserInfo uBean(); public native OrgSearchUserInfo uBean(EntpriseUserInfo uBean);
        public native @StdString  String oPower(); public native OrgSearchUserInfo oPower(String oPower);
    }
	/**记事本功能 */
    @Namespace("model") @NoOffset public static class Notebook extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Notebook(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public Notebook(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public Notebook position(long position) {
            return (Notebook)super.position(position);
        }
    
		public Notebook() { super((Pointer)null); allocate(); }
		private native void allocate();

        public native @Cast("int64") long id(); public native Notebook id(long id);                           /** 唯一标示id */
        public native @ByRef OptionalLong lastChgTime(); public native Notebook lastChgTime(OptionalLong lastChgTime);        /** 上次修改时间 */
        public native @ByRef OptionalLong createTime(); public native Notebook createTime(OptionalLong createTime);         /** 创建时间 */
        public native @ByRef OptionalInt count(); public native Notebook count(OptionalInt count);              /** 记事本内容数量 */
        public native @ByRef OptionalString title(); public native Notebook title(OptionalString title);        /** 标题 */
        public native @ByRef OptionalByte isEncrypt(); public native Notebook isEncrypt(OptionalByte isEncrypt);           /** 是否加密 0.不加密 1.字符加密 2.手势加密  */
        public native @ByRef OptionalString encryptKey(); public native Notebook encryptKey(OptionalString encryptKey);   /** 加密锁 */
        public native @ByRef OptionalByte isReminder(); public native Notebook isReminder(OptionalByte isReminder);          /** 是否设置提醒 */
        public native @ByRef OptionalLong rmdTime(); public native Notebook rmdTime(OptionalLong rmdTime);            /** 提醒时间 */
		public native @ByRef OptionalString bgImage(); public native Notebook bgImage(OptionalString bgImage);      /** 背景图片 全路径 */
		public native @ByRef OptionalString ext(); public native Notebook ext(OptionalString ext);			/** 扩展信息 客户端妥善使用 */
		public native @ByRef OptionalByte isHidden(); public native Notebook isHidden(OptionalByte isHidden);			/** 是否是隐藏记事本 0.公开 3.隐藏 */
		public native @ByRef OptionalString label(); public native Notebook label(OptionalString label);		/** 标签 */
    }
    @Namespace("model") @NoOffset public static class NoteEntry extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public NoteEntry(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public NoteEntry(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public NoteEntry position(long position) {
            return (NoteEntry)super.position(position);
        }
    
		public NoteEntry() { super((Pointer)null); allocate(); }
		private native void allocate();

        public native @Cast("int64") long id(); public native NoteEntry id(long id);                           /** 记事内容id */
        public native @ByRef OptionalLong noteId(); public native NoteEntry noteId(OptionalLong noteId);             /** 上次修改时间 */
        public native @ByRef OptionalLong lastChgTime(); public native NoteEntry lastChgTime(OptionalLong lastChgTime);        /** 上次修改时间 */
        public native @ByRef OptionalLong createTime(); public native NoteEntry createTime(OptionalLong createTime);         /** 创建时间 */
        public native @ByRef OptionalLong sourceId(); public native NoteEntry sourceId(OptionalLong sourceId);           /** 来源id */
        public native @ByRef OptionalString sourceName(); public native NoteEntry sourceName(OptionalString sourceName);   /** 来源名称 */
        public native @ByRef OptionalInt type(); public native NoteEntry type(OptionalInt type);               /** 记事类型 同消息类型 */
        public native @ByRef OptionalString content(); public native NoteEntry content(OptionalString content);      /** 内容 格式由客户端自行组织 */
        public native @ByRef OptionalString title(); public native NoteEntry title(OptionalString title);        /** 标题 */
        public native @ByRef OptionalByte isReminder(); public native NoteEntry isReminder(OptionalByte isReminder);          /** 是否设置提醒 */
        public native @ByRef OptionalLong rmdTime(); public native NoteEntry rmdTime(OptionalLong rmdTime);            /** 提醒时间 */
        public native @ByRef OptionalString msgProperties(); public native NoteEntry msgProperties(OptionalString msgProperties);/** 消息属性，辅助contetn存储 */
	    public native @ByRef OptionalInt securityLevel(); public native NoteEntry securityLevel(OptionalInt securityLevel);      /** 密级字段 */
    }
    @Namespace("model") @NoOffset public static class GetNoteEntryParam extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public GetNoteEntryParam(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public GetNoteEntryParam(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public GetNoteEntryParam position(long position) {
            return (GetNoteEntryParam)super.position(position);
        }
    
        public GetNoteEntryParam() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @Cast("int64") long noteId(); public native GetNoteEntryParam noteId(long noteId);		/** 记事本Id */
        public native @Cast("int64") long startId(); public native GetNoteEntryParam startId(long startId);		/** 起始查找ID offsetFlag = 0 beginID = 0时，代表从最大的消息Id进行查找 */
        public native @Cast("int32") int offset(); public native GetNoteEntryParam offset(int offset);       /** 查询的数量(赋值为0代表查询全部) */
        public native @Cast("int8") byte offsetFlag(); public native GetNoteEntryParam offsetFlag(byte offsetFlag);	/** 偏移标志；0.由大到小偏移 1.由小到大偏移 */
        public native @Cast("int8") byte type(); public native GetNoteEntryParam type(byte type);			/** 查询方式 0.按id 1.按创建时间 2.按修改时间 */
        public native @StdString  String encryptKey(); public native GetNoteEntryParam encryptKey(String encryptKey);	/** 加密秘钥 */
    }
	@Namespace("model") @NoOffset public static class CustomerPoolBean extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public CustomerPoolBean(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public CustomerPoolBean(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public CustomerPoolBean position(long position) {
	        return (CustomerPoolBean)super.position(position);
	    }
	
		public CustomerPoolBean() { super((Pointer)null); allocate(); }
		private native void allocate();
		
		public native @Cast("int64") long userID(); public native CustomerPoolBean userID(long userID);  /**客户id */
		public native @StdString  String name(); public native CustomerPoolBean name(String name);  /**客户昵称 */
		public native @StdString  String portraitURL(); public native CustomerPoolBean portraitURL(String portraitURL);  /**客户头像 */
		public native @SharedPtr @ByRef Msg message(); public native CustomerPoolBean message(Msg message); /**最后一条消息 */
	}
	//客服信息
	@Namespace("model") @NoOffset public static class AppCustomerInfo extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public AppCustomerInfo(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public AppCustomerInfo(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public AppCustomerInfo position(long position) {
	        return (AppCustomerInfo)super.position(position);
	    }
	
		public AppCustomerInfo() { super((Pointer)null); allocate(); }
		private native void allocate();
		public native @Cast("int64") long CSID(); public native AppCustomerInfo CSID(long CSID);			//客服id
		public native @Cast("int64") long appID(); public native AppCustomerInfo appID(long appID);			 //公众号id
		public native @Cast("int64") long customerID(); public native AppCustomerInfo customerID(long customerID); //客服的用户id
		public native @Cast("int8") byte onlineStatus(); public native AppCustomerInfo onlineStatus(byte onlineStatus);  //在线状态1:在线，2:离线
		public native @Cast("int32") int maxReception(); public native AppCustomerInfo maxReception(int maxReception);  //当前最大可接待数
		public native @Cast("int32") int totalReception(); public native AppCustomerInfo totalReception(int totalReception);  //总接待数
		public native @StdString  String portraitUrl(); public native AppCustomerInfo portraitUrl(String portraitUrl);  //客服头像
		public native @StdString  String nickname(); public native AppCustomerInfo nickname(String nickname);  //客服昵称
		public native @StdString  String extJson(); public native AppCustomerInfo extJson(String extJson);	//扩展信息
		public native @Cast("int64") long createDt(); public native AppCustomerInfo createDt(long createDt);			//创建时间
		public native @Cast("int64") long updateDt(); public native AppCustomerInfo updateDt(long updateDt);	 //修改时间
	}
	@Namespace("model") public static class UserShield extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public UserShield() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public UserShield(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public UserShield(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public UserShield position(long position) {
	        return (UserShield)super.position(position);
	    }
	

		public native @StdString  String keyId(); public native UserShield keyId(String keyId);          //手机盾用户KEYID
		public native @StdString  String eventData(); public native UserShield eventData(String eventData);      //手机盾登录事件数据
		public native @StdString  String expireTime(); public native UserShield expireTime(String expireTime);     // 手机盾过期时间
		public native @Cast("int8") byte shieldStatus(); public native UserShield shieldStatus(byte shieldStatus);        //手机盾激活状态(1正常，2重置，3未激活)
	}
	/**
	* \struct CustomChat
	* \brief  客服会话联系人信息
	*/
	@Namespace("model") @NoOffset public static class CustomChat extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public CustomChat(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public CustomChat(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public CustomChat position(long position) {
	        return (CustomChat)super.position(position);
	    }
	
		public CustomChat() { super((Pointer)null); allocate(); }
		private native void allocate();

		/**公众号Id */
		public native @Cast("int64") long appId(); public native CustomChat appId(long appId);
		/** 目标用户ID targetID. */
		public native @Cast("int64") long targetID(); public native CustomChat targetID(long targetID);
		/** 最后一次消息ID lastMsgid. */
		public native @Cast("int64") long lastMsgid(); public native CustomChat lastMsgid(long lastMsgid);
		/** 消息时间 time */
		public native @Cast("int64") long time(); public native CustomChat time(long time);
		/**  0保密 1男，2女 */
		public native @Cast("int8") byte sex(); public native CustomChat sex(byte sex);
		/**
		* \brief 消息类型
		*/
		public native @Cast("int16") int msgType(); public native CustomChat msgType(int msgType);
		/** 激活类型， 当前未用 activeType. */
		public native @Cast("int32") int activeType(); public native CustomChat activeType(int activeType);
		/** 未读数量   unreadCnt. */
		public native @Cast("int16") int unreadCnt(); public native CustomChat unreadCnt(int unreadCnt);

		public native @StdString  String avatar(); public native CustomChat avatar(String avatar);
		/** 服务器全路径 */
		public native @StdString  String avatarUrl(); public native CustomChat avatarUrl(String avatarUrl);
		/** 显示名称 nickName. */
		public native @StdString  String nickName(); public native CustomChat nickName(String nickName);
		/** 最后一条消息描述 lastMsg. */
		public native @StdString  String lastMsg(); public native CustomChat lastMsg(String lastMsg);
		/** 消息属性 */
		public native @StdString  String msgProp(); public native CustomChat msgProp(String msgProp);
	}

	/**
	* \struct CustomAppInfo
	* \brief  客服公众号信息
	*/
	@Namespace("model") @NoOffset public static class CustomAppInfo extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public CustomAppInfo(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public CustomAppInfo(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public CustomAppInfo position(long position) {
	        return (CustomAppInfo)super.position(position);
	    }
	
		public CustomAppInfo() { super((Pointer)null); allocate(); }
		private native void allocate();

		public native @ByRef EntAppinfo appInfo(); public native CustomAppInfo appInfo(EntAppinfo appInfo);
		public native @SharedPtr @ByRef Msg message(); public native CustomAppInfo message(Msg message); /**最后一条消息 */
	}



// Parsed from extModel/gapacket.h

// #pragma once

// #include "../extModel/packet.h"
    /** �û���Ϣ */
    @Namespace("model") @NoOffset public static class gaUserBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaUserBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaUserBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaUserBean position(long position) {
            return (gaUserBean)super.position(position);
        }
    
        public gaUserBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** �û�id */
        public native @Cast("int64") long userid(); public native gaUserBean userid(long userid);
        /** ��֯id */
        public native @Cast("int64") long orgid(); public native gaUserBean orgid(long orgid);
        /** ���� */
        public native @Cast("int32") int policeType(); public native gaUserBean policeType(int policeType);
        /** �˲��Ȩ�� */
        public native @Cast("int32") int regType(); public native gaUserBean regType(int regType);
        /** �û��� */
        public native @StdString  String name(); public native gaUserBean name(String name);
        /** ��֯ȫ�� */
        public native @StdString  String orgfullname(); public native gaUserBean orgfullname(String orgfullname);
        /** ͷ�� */
        public native @StdString  String userHead(); public native gaUserBean userHead(String userHead);
    }

    /** �˲鸽����Ϣ */
    @Namespace("model") @NoOffset public static class gaFileBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaFileBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaFileBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaFileBean position(long position) {
            return (gaFileBean)super.position(position);
        }
    
        public gaFileBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** �ļ���С */
        public native @Cast("int64") long filesize(); public native gaFileBean filesize(long filesize);
        /** �ļ��� */
        public native @StdString  String filename(); public native gaFileBean filename(String filename);
        /** �ļ�·�� */
        public native @StdString  String filepath(); public native gaFileBean filepath(String filepath);
    }

    /** �˲�ظ� */
    @Namespace("model") @NoOffset public static class gaInvestReplyBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaInvestReplyBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaInvestReplyBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaInvestReplyBean position(long position) {
            return (gaInvestReplyBean)super.position(position);
        }
    
        public gaInvestReplyBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** �ظ�ʱ�� */
        public native @Cast("int64") long replytime(); public native gaInvestReplyBean replytime(long replytime);
        /** �ظ���id */
        public native @Cast("int64") long replyid(); public native gaInvestReplyBean replyid(long replyid);
        /** �˲�����id */
        public native @Cast("int64") long investid(); public native gaInvestReplyBean investid(long investid);
        /** ���� */
        public native @StdString  String content(); public native gaInvestReplyBean content(String content);
        /** �˲����� 4.��� 3.�永 2.δ֪ 1.��ͨ */
        public native @Cast("int32") int investigationType(); public native gaInvestReplyBean investigationType(int investigationType);
        /** �ظ�����Ϣ */
        public native @ByRef gaUserBean replier(); public native gaInvestReplyBean replier(gaUserBean replier);
        /** �ظ�To���� */
        public native @ByRef gaUserBean promotor(); public native gaInvestReplyBean promotor(gaUserBean promotor);
        /** �ظ��ĸ����б� */
        public native @StdVector gaFileBean filelist(); public native gaInvestReplyBean filelist(gaFileBean filelist);
    }

    /** �˲� */
    @Namespace("model") @NoOffset public static class gaInvestTaskBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaInvestTaskBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaInvestTaskBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaInvestTaskBean position(long position) {
            return (gaInvestTaskBean)super.position(position);
        }
    
        public gaInvestTaskBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ����ʱ�� */
        public native @Cast("int64") long invalidtime(); public native gaInvestTaskBean invalidtime(long invalidtime);
        /** �˲����� 4.��� 3.�永 2.δ֪ 1.��ͨ */
        public native @Cast("int32") int investigationType(); public native gaInvestTaskBean investigationType(int investigationType);
        /** ���� */
        public native @StdString  String title(); public native gaInvestTaskBean title(String title);
        /** ���� */
        public native @StdString  String content(); public native gaInvestTaskBean content(String content);

        /** �˲��� */
        public native @ByRef gaUserBean investuser(); public native gaInvestTaskBean investuser(gaUserBean investuser);
        /** ���� */
        public native @ByRef gaFileBean file(); public native gaInvestTaskBean file(gaFileBean file);

        /** �˲������֤���� */
        public native @StdString  String auditIDcard(); public native gaInvestTaskBean auditIDcard(String auditIDcard);
        /** �Ա� */
        public native @StdString  String sex(); public native gaInvestTaskBean sex(String sex);
        /** ����� */
        public native @StdString  String investigated(); public native gaInvestTaskBean investigated(String investigated);
        /** ���� */
        public native @StdString  String nation(); public native gaInvestTaskBean nation(String nation);
        /** �ֻ��� */
        public native @StdString  String phone(); public native gaInvestTaskBean phone(String phone);
        /** ��ͥסַ */
        public native @StdString  @Name("address") String _address(); public native gaInvestTaskBean _address(String _address);
        /** סַ�绰 */
        public native @StdString  String homePhone(); public native gaInvestTaskBean homePhone(String homePhone);
        /** ������λ */
        public native @StdString  String workUnit(); public native gaInvestTaskBean workUnit(String workUnit);
        /** ְҵ */
        public native @StdString  String occupation(); public native gaInvestTaskBean occupation(String occupation);
        /** �໤�� */
        public native @StdString  String guardian(); public native gaInvestTaskBean guardian(String guardian);
        /** �໤�˵绰 */
        public native @StdString  String guardianPhone(); public native gaInvestTaskBean guardianPhone(String guardianPhone);

        /** ״̬ 1.���� 2.�ѹ��� */
        public native @Cast("int32") int status(); public native gaInvestTaskBean status(int status);
        /** �ظ�״̬ 1��δ�ظ���2���Ѱ�ʱ�ظ���3��δ��ʱ�ظ� */
        public native @Cast("int32") int replystatus(); public native gaInvestTaskBean replystatus(int replystatus);
        /** �ظ��� */
        public native @Cast("int32") int replycount(); public native gaInvestTaskBean replycount(int replycount);
        /** δ�ظ��� */
        public native @Cast("int32") int notreplycount(); public native gaInvestTaskBean notreplycount(int notreplycount);
        /** ������ */
        public native @Cast("int32") int commentcount(); public native gaInvestTaskBean commentcount(int commentcount);
        /** Э������id */
        public native @Cast("int64") long investid(); public native gaInvestTaskBean investid(long investid);
        /** ����ʱ�� */
        public native @Cast("int64") long promotetime(); public native gaInvestTaskBean promotetime(long promotetime);
        /** ����ʱ�� */
        public native @Cast("int64") long updatetime(); public native gaInvestTaskBean updatetime(long updatetime);
        /** ʣ��ʱ��,0��ʱ���ʾ�Ѿ����ڵ�ʱ�� */
        public native @Cast("int64") long remaintime(); public native gaInvestTaskBean remaintime(long remaintime);
        /** 0:δ��  1:�Ѷ� */
        public native @Cast("int8") byte isRead(); public native gaInvestTaskBean isRead(byte isRead);
        /** ��������Ϣ */
        public native @ByRef gaUserBean promotor(); public native gaInvestTaskBean promotor(gaUserBean promotor);
        /** �ظ��б� */
        public native @StdVector gaInvestReplyBean replylist(); public native gaInvestTaskBean replylist(gaInvestReplyBean replylist);
    }

    /** ���ۺ˲� */
    @Namespace("model") @NoOffset public static class gaCommentBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaCommentBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaCommentBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaCommentBean position(long position) {
            return (gaCommentBean)super.position(position);
        }
    
        public gaCommentBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ����id */
        public native @Cast("int64") long commentid(); public native gaCommentBean commentid(long commentid);
        /** ������id */
        public native @Cast("int64") long commentuserid(); public native gaCommentBean commentuserid(long commentuserid);
        /** Э��id */
        public native @Cast("int64") long investid(); public native gaCommentBean investid(long investid);
        /** �ظ�id */
        public native @Cast("int64") long replyid(); public native gaCommentBean replyid(long replyid);
    }

    @Namespace("model") @NoOffset public static class investtasklist extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public investtasklist(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public investtasklist(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public investtasklist position(long position) {
            return (investtasklist)super.position(position);
        }
    
        public investtasklist() { super((Pointer)null); allocate(); }
        private native void allocate();

        public native @Cast("int64") long userid(); public native investtasklist userid(long userid);
        /** 1 (�˲���)��ȡ�˲������б� 2 (������)��ȡ�˲����б� */
        public native @Cast("int32") int type(); public native investtasklist type(int type);
        /** ҳ�� */
        public native @Cast("int32") int pageno(); public native investtasklist pageno(int pageno);
        /** ÿҳ������ */
        public native @Cast("int32") int pagesize(); public native investtasklist pagesize(int pagesize);
        /** ����������id */
        public native @Cast("int64") long promoterareaid(); public native investtasklist promoterareaid(long promoterareaid);
        /** ������userID */
        public native @Cast("int64") long promotorID(); public native investtasklist promotorID(long promotorID);
        /** ������userID */
        public native @Cast("int64") long receiverID(); public native investtasklist receiverID(long receiverID);
    }

    @Namespace("model") @NoOffset public static class investPageBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public investPageBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public investPageBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public investPageBean position(long position) {
            return (investPageBean)super.position(position);
        }
    
        public investPageBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ҳ�� */
        public native @Cast("int32") int pageno(); public native investPageBean pageno(int pageno);
        /** ÿҳ���� */
        public native @Cast("int32") int pagesize(); public native investPageBean pagesize(int pagesize);
        /** ��ҳ�� */
        public native @Cast("int64") long totalpage(); public native investPageBean totalpage(long totalpage);
        /** ������ */
        public native @Cast("int64") long totalcount(); public native investPageBean totalcount(long totalcount);
        /** Э�������б� */
        public native @StdVector gaInvestTaskBean tasklist(); public native investPageBean tasklist(gaInvestTaskBean tasklist);
    }

    /** ��ע */
    @Namespace("model") @NoOffset public static class attentionQueryParam extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public attentionQueryParam(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public attentionQueryParam(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public attentionQueryParam position(long position) {
            return (attentionQueryParam)super.position(position);
        }
    
        public attentionQueryParam() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ҳ�� */
        public native @Cast("int32") int pageNo(); public native attentionQueryParam pageNo(int pageNo);
        /** ÿҳ���� */
        public native @Cast("int32") int pageSize(); public native attentionQueryParam pageSize(int pageSize);
        /** �û�ID */
        public native @Cast("int64") long userID(); public native attentionQueryParam userID(long userID);
        /** ������ */
        public native @StdString  String keyword(); public native attentionQueryParam keyword(String keyword);
    }

    /** ͨ��������Ϣ */
    @Namespace("model") @NoOffset public static class gaReportBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaReportBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaReportBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaReportBean position(long position) {
            return (gaReportBean)super.position(position);
        }
    
        public gaReportBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ״ֵ̬ 1��δ��� 2����ͨ����� 3��δͨ����� */
        public native @Cast("int8") byte status(); public native gaReportBean status(byte status);
        /** ͨ��ID	 */
        public native @Cast("int64") long reportid(); public native gaReportBean reportid(long reportid);
        /** ����ʱ�� */
        public native @Cast("int64") long promotetime(); public native gaReportBean promotetime(long promotetime);
        /** �޸�ʱ�� */
        public native @Cast("int64") long updatetime(); public native gaReportBean updatetime(long updatetime);
        /** ͨ������ */
        public native @StdString  String title(); public native gaReportBean title(String title);
        /** ͨ������ */
        public native @StdString  String content(); public native gaReportBean content(String content);
        /** ��������Ϣ */
        public native @ByRef gaUserBean promotor(); public native gaReportBean promotor(gaUserBean promotor);
        /** ���ʱ��� */
        public native @Cast("int64") long auditTimeStamp(); public native gaReportBean auditTimeStamp(long auditTimeStamp);
        /** ͨ������ 1:׷��ͨ�� 2 : Э��ͨ�� 3 : ���ͨ�� 4 : ֪ͨͨ�� */
        public native @Cast("int8") byte reportType(); public native gaReportBean reportType(byte reportType);
        /** ��ѡ��֯��Χ����֯id���� */
        public native @ByRef LongVector allOrgIDList(); public native gaReportBean allOrgIDList(LongVector allOrgIDList);
        /** ��ѡ���ַ�Χ������id���� */
        public native @ByRef IntegerVector allClassIDList(); public native gaReportBean allClassIDList(IntegerVector allClassIDList);
        /** ͼƬURL */
        public native @StdString  String picURL(); public native gaReportBean picURL(String picURL);
        /** 0:δ��  1:�Ѷ� */
        public native @Cast("int8") byte isRead(); public native gaReportBean isRead(byte isRead);
    }

    /** ͨ����ҳ��Ϣ */
    @Namespace("model") @NoOffset public static class gaReportPageBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaReportPageBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaReportPageBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaReportPageBean position(long position) {
            return (gaReportPageBean)super.position(position);
        }
    
        public gaReportPageBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ҳ�� */
        public native @Cast("int32") int pageno(); public native gaReportPageBean pageno(int pageno);
        /** ÿҳ���� */
        public native @Cast("int32") int pagesize(); public native gaReportPageBean pagesize(int pagesize);
        /** ��ҳ�� */
        public native @Cast("int64") long totalpage(); public native gaReportPageBean totalpage(long totalpage);
        /** ������ */
        public native @Cast("int64") long totalcount(); public native gaReportPageBean totalcount(long totalcount);
        /** ͨ���б� */
        public native @StdVector gaReportBean reports(); public native gaReportPageBean reports(gaReportBean reports);
    }

    /** ͨ����ѯ���� */
    @Namespace("model") @NoOffset public static class gaReportQueryParamBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaReportQueryParamBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaReportQueryParamBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaReportQueryParamBean position(long position) {
            return (gaReportQueryParamBean)super.position(position);
        }
    
        public gaReportQueryParamBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ״ֵ̬��1:δ��� 2�����ͨ����3�����δͨ�� */
        public native @Cast("int8") byte status(); public native gaReportQueryParamBean status(byte status);
        /** ҳ�� */
        public native @Cast("int32") int pageno(); public native gaReportQueryParamBean pageno(int pageno);
        /** ÿҳ���� */
        public native @Cast("int32") int pagesize(); public native gaReportQueryParamBean pagesize(int pagesize);
        /** ��ʼʱ�� */
        public native @Cast("int64") long begintime(); public native gaReportQueryParamBean begintime(long begintime);
        /** ����ʱ�� */
        public native @Cast("int64") long endtime(); public native gaReportQueryParamBean endtime(long endtime);
        /** ������ID */
        public native @Cast("int64") long promotorid(); public native gaReportQueryParamBean promotorid(long promotorid);
        /** ����ʡ��ID */
        public native @Cast("int64") long promotorproviceid(); public native gaReportQueryParamBean promotorproviceid(long promotorproviceid);
        /** ���� */
        public native @StdString  String title(); public native gaReportQueryParamBean title(String title);
        /** ���������� */
        public native @StdString  String promotorname(); public native gaReportQueryParamBean promotorname(String promotorname);
        /** ����ص�	 */
        public native @StdString  String fromorg(); public native gaReportQueryParamBean fromorg(String fromorg);
    }

    /** ��ҵ��Ա��Ϣ */
    @Namespace("model") @NoOffset public static class gaEntpriseUserInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaEntpriseUserInfo(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaEntpriseUserInfo(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaEntpriseUserInfo position(long position) {
            return (gaEntpriseUserInfo)super.position(position);
        }
    
        public gaEntpriseUserInfo() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** �û�ID userID. */
        public native @Cast("int64") long userID(); public native gaEntpriseUserInfo userID(long userID);
        /** ��֯����ID orgID. */
        public native @Cast("int64") long orgID(); public native gaEntpriseUserInfo orgID(long orgID);
        /** ��ҵ���û����� enName. */
        public native @StdString  String enName(); public native gaEntpriseUserInfo enName(String enName);
        /** ��֯�� orgName. */
        public native @StdString  String orgName(); public native gaEntpriseUserInfo orgName(String orgName);
        /** ��չ��Ϣ extend. */
        public native @StdString  String extend(); public native gaEntpriseUserInfo extend(String extend);
        /** ͷ�� */
        public native @StdString  String userHead(); public native gaEntpriseUserInfo userHead(String userHead);
    }

    /** ��֯��Ϣ */
    @Namespace("model") @NoOffset public static class gaOrganizationInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gaOrganizationInfo(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gaOrganizationInfo(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public gaOrganizationInfo position(long position) {
            return (gaOrganizationInfo)super.position(position);
        }
    
        public gaOrganizationInfo() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ��֯����ID orgID. */
        public native @Cast("int64") long orgID(); public native gaOrganizationInfo orgID(long orgID);
        /** ��ҵID enterpriseID. */
        public native @Cast("int64") long enterpriseID(); public native gaOrganizationInfo enterpriseID(long enterpriseID);
        /** ��֯�������� orgName. */
        public native @StdString  String orgName(); public native gaOrganizationInfo orgName(String orgName);
        /** ��֯�������� orgCode. */
        public native @StdString  String orgCode(); public native gaOrganizationInfo orgCode(String orgCode);
        /** �Ƿ�Ҷ�ڵ� leaf. */
        public native @Cast("int8") byte leaf(); public native gaOrganizationInfo leaf(byte leaf);
        /** ���ڵ� parentOrgID. */
        public native @Cast("int64") long parentOrgID(); public native gaOrganizationInfo parentOrgID(long parentOrgID);
        /** ��ע remark. */
        public native @StdString  String remark(); public native gaOrganizationInfo remark(String remark);
        /** ���� orderNum. */
        public native @Cast("int64") long orderNum(); public native gaOrganizationInfo orderNum(long orderNum);
        /** �칫��ID branchID. */
        public native @Cast("int64") long branchID(); public native gaOrganizationInfo branchID(long branchID);
        /** ɾ�� departID. */
        public native @StdString  String departID(); public native gaOrganizationInfo departID(String departID);
        /** ��֯���� departLevel. */
        public native @Cast("int8") byte departLevel(); public native gaOrganizationInfo departLevel(byte departLevel);
        /** �ݹ���������¼���֯�� subOrgNum. */
        public native @Cast("int64") long subOrgNum(); public native gaOrganizationInfo subOrgNum(long subOrgNum);
        /** �ݹ���������¼���Ա�� subUserNum. */
        public native @Cast("int64") long subUserNum(); public native gaOrganizationInfo subUserNum(long subUserNum);
        /** �Ƿ�����, 1�Ա����Ź��� 2�����в��Ź�����3�Բ��ֲ��Ź��� isHidden. */
        public native @Cast("int8") byte isHidden(); public native gaOrganizationInfo isHidden(byte isHidden);
        /** ʡ��ID provinceID. */
        public native @Cast("int64") long provinceID(); public native gaOrganizationInfo provinceID(long provinceID);
        /** ʡ������ provinceName. */
        public native @StdString  String provinceName(); public native gaOrganizationInfo provinceName(String provinceName);
        /** ��ID cityID. */
        public native @Cast("int64") long cityID(); public native gaOrganizationInfo cityID(long cityID);
        /** ������ cityName. */
        public native @StdString  String cityName(); public native gaOrganizationInfo cityName(String cityName);
        /** ��ID areaID. */
        public native @Cast("int64") long areaID(); public native gaOrganizationInfo areaID(long areaID);
        /** ������ areaName. */
        public native @StdString  String areaName(); public native gaOrganizationInfo areaName(String areaName);
        /** ƴ�� orgNamePinyin. */
        public native @StdString  String orgNamePinyin(); public native gaOrganizationInfo orgNamePinyin(String orgNamePinyin);
    }
    


// Parsed from extModel/mailpacket.h

// #pragma once

// #include "../extModel/packet.h"
    @Namespace("model") @NoOffset public static class mailSetting extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public mailSetting(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public mailSetting(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public mailSetting position(long position) {
            return (mailSetting)super.position(position);
        }
    
        public mailSetting() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @StdString  String account(); public native mailSetting account(String account);
        public native @ByRef OptionalString passwd(); public native mailSetting passwd(OptionalString passwd);
        public native @ByRef OptionalString name(); public native mailSetting name(OptionalString name);
        public native @ByRef OptionalInt storedays(); public native mailSetting storedays(OptionalInt storedays);
        public native @ByRef OptionalInt fetchTimeVal(); public native mailSetting fetchTimeVal(OptionalInt fetchTimeVal);
        public native @ByRef OptionalString SMTPAddr(); public native mailSetting SMTPAddr(OptionalString SMTPAddr);
        public native @ByRef OptionalString SMTPPort(); public native mailSetting SMTPPort(OptionalString SMTPPort);
        public native @ByRef OptionalByte SMTPSSL(); public native mailSetting SMTPSSL(OptionalByte SMTPSSL);
        public native @ByRef OptionalByte fetchProt(); public native mailSetting fetchProt(OptionalByte fetchProt);
        public native @ByRef OptionalString FetchAddr(); public native mailSetting FetchAddr(OptionalString FetchAddr);
        public native @ByRef OptionalString FetchPort(); public native mailSetting FetchPort(OptionalString FetchPort);
        public native @ByRef OptionalByte FetchSSL(); public native mailSetting FetchSSL(OptionalByte FetchSSL);
        public native @ByRef OptionalString attachPath(); public native mailSetting attachPath(OptionalString attachPath);
        public native @ByRef OptionalStringVector floderName(); public native mailSetting floderName(OptionalStringVector floderName);
    }
    
    @Namespace("model") public static class stsendMail extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public stsendMail() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public stsendMail(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public stsendMail(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public stsendMail position(long position) {
            return (stsendMail)super.position(position);
        }
    
        public native @StdString  String account(); public native stsendMail account(String account);
        public native @StdString  String myName(); public native stsendMail myName(String myName);
        public native @StdString  String myMailAddr(); public native stsendMail myMailAddr(String myMailAddr);
        public native @ByRef StringVector recvList(); public native stsendMail recvList(StringVector recvList);
        public native @StdString  String subject(); public native stsendMail subject(String subject);
        public native @StdString  String content(); public native stsendMail content(String content);
        public native @ByRef StringVector attches(); public native stsendMail attches(StringVector attches);
    }


// Parsed from extModel/rtcpacket.h

// #pragma once

// #include "../extModel/packet.h"
    @Namespace("model") @NoOffset public static class channelRequest extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public channelRequest(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public channelRequest(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public channelRequest position(long position) {
            return (channelRequest)super.position(position);
        }
    
        public channelRequest() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @Cast("int64") long targetId(); public native channelRequest targetId(long targetId);//Ŀ��Ids
        /** 0����ͨ���� 1��innercall,2,�������� */
        public native int operType(); public native channelRequest operType(int operType);
        /** true  �������ھܾ����������� */
        public native @Cast("bool") boolean reject(); public native channelRequest reject(boolean reject);
        /** 1������  2����Ƶ 3,����UI���� 4,����UI��Ƶ */
        public native @Cast("int8") byte videoType(); public native channelRequest videoType(byte videoType);
        public native @StdString  String firstSdp(); public native channelRequest firstSdp(String firstSdp);
        public native @Cast("bool") boolean isGroup(); public native channelRequest isGroup(boolean isGroup);
        public native @ByRef LongVector members(); public native channelRequest members(LongVector members);
    }

    @Namespace("model") @NoOffset public static class joinChl extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public joinChl(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public joinChl(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public joinChl position(long position) {
            return (joinChl)super.position(position);
        }
    
        public joinChl() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native @Cast("int64") long channelId(); public native joinChl channelId(long channelId); /**�������ķ���� */
        public native @StdString  String addition(); public native joinChl addition(String addition);/**������Ϣ */
    }
    @Namespace("model") public static class setConfer extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public setConfer() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public setConfer(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public setConfer(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public setConfer position(long position) {
            return (setConfer)super.position(position);
        }
    
        /**��Ҫ�������û��б� ��ɾ���� */
        public native @Cast("int64") long m_vtMembers(); public native setConfer m_vtMembers(long m_vtMembers);
    }
    @Namespace("model") @NoOffset public static class p2pServerInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public p2pServerInfo(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public p2pServerInfo(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public p2pServerInfo position(long position) {
            return (p2pServerInfo)super.position(position);
        }
    

		public p2pServerInfo() { super((Pointer)null); allocate(); }
		private native void allocate();
		public p2pServerInfo(@StdString  String saddr, @StdString  String sport, @StdString  String acot, @StdString  String pw) { super((Pointer)null); allocate(saddr, sport, acot, pw); }
		private native void allocate(@StdString  String saddr, @StdString  String sport, @StdString  String acot, @StdString  String pw);

        public native @StdString  String stunAddr(); public native p2pServerInfo stunAddr(String stunAddr);
        public native @StdString  String stunPort(); public native p2pServerInfo stunPort(String stunPort);
        public native @StdString  String turnAddr(); public native p2pServerInfo turnAddr(String turnAddr);
        public native @StdString  String turnPort(); public native p2pServerInfo turnPort(String turnPort);
        public native @StdString  String account(); public native p2pServerInfo account(String account);
        public native @StdString  String password(); public native p2pServerInfo password(String password);
    }
    @Namespace("model") public static class getConfer extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public getConfer() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public getConfer(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public getConfer(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public getConfer position(long position) {
            return (getConfer)super.position(position);
        }
    
        /**�������� */
        public native @StdString  String m_strTheme(); public native getConfer m_strTheme(String m_strTheme);
        /**�򶴷�������Ϣ */
        public native @ByRef p2pServerInfo info(); public native getConfer info(p2pServerInfo info);
        /**��Ա */
        public native @ByRef LongVector m_vtMembers(); public native getConfer m_vtMembers(LongVector m_vtMembers);
    }
    @Namespace("model") @NoOffset public static class rejectOrAccept extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public rejectOrAccept(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public rejectOrAccept(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public rejectOrAccept position(long position) {
            return (rejectOrAccept)super.position(position);
        }
    

        public rejectOrAccept() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** Ŀ��Id */
        public native @Cast("int64") long targetId(); public native rejectOrAccept targetId(long targetId);
        /** 1,���� 2���ܾ�,3,�������� 4,�����ܾ� */
        public native @Cast("int8") byte type(); public native rejectOrAccept type(byte type);
        /** ����� Ψһ */
        public native @Cast("int64") long channelId(); public native rejectOrAccept channelId(long channelId);
        /** ��Ƶ���� 1:��Ƶ 2:��Ƶ */
        public native @Cast("int8") byte videoType(); public native rejectOrAccept videoType(byte videoType);
        //std::string path;               ///< P2Pʱ�������Ϊ·��(����ΪĬ��·��)
        /**��Զ������Ƶ�������sdp useid�Դ����� */
        public native @StdString  String sdps(); public native rejectOrAccept sdps(String sdps);
    }



// Parsed from extModel/mrtcpacket.h

// #pragma once

// #include "../extModel/packet.h"

//�������ṹ
	/*
	* �������
	* 
	* [��������]:
	*  1.reqType=1: groupId/roomId/roomName/members
	*  2.reqType=2: groupId/roomId/members
	*  3.reqType=3: groupId/roomId/members
	*  4.reqType=4: groupId/roomId
	*  5.reqType=5: groupId/roomId/annotation="click/busy/..."
	*/
	@Namespace("model") @NoOffset public static class multiRequest extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public multiRequest(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public multiRequest(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public multiRequest position(long position) {
	        return (multiRequest)super.position(position);
	    }
	
		public multiRequest() { super((Pointer)null); allocate(); }
		private native void allocate();
		/** ��������(1.call 2.invite 3.intoroom 4.join 5.hungup 6.keepalive) */
		public native @Cast("int8") byte reqType(); public native multiRequest reqType(byte reqType);
		/** ����ע�� */
		public native @StdString  String annotation(); public native multiRequest annotation(String annotation);
		/** ȺId */
		public native @Cast("int64") long groupId(); public native multiRequest groupId(long groupId);
		/** ����Id */
		public native @StdString  String roomId(); public native multiRequest roomId(String roomId);
		/** �������� */
		public native @StdString  String roomName(); public native multiRequest roomName(String roomName);
		/** ��Ա�б� */
		public native @ByRef LongVector members(); public native multiRequest members(LongVector members);
		/** ��չJson */
		public native @StdString  String extendJson(); public native multiRequest extendJson(String extendJson);
	}



// Parsed from extModel/sopstorepacket.h

// #pragma once

// #include "../extModel/packet.h"

// #ifdef _WIN32
// #else
//
// #endif

    /** ��� */
    @Namespace("model") public static class Result extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public Result() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public Result(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Result(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public Result position(long position) {
            return (Result)super.position(position);
        }
    
        /** �Ƿ���ɹ� */
        public native @Cast("int32") int code(); public native Result code(int code);
        /** ʧ��ԭ�� */
        public native @StdString  String message(); public native Result message(String message);
        /** ����Ľ�� */
        public native @Cast("int64") long result(); public native Result result(long result);
    }

    /** Ӧ��ʵ�� */
    @Namespace("model") public static class AppInfoBean extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AppInfoBean() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AppInfoBean(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AppInfoBean(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AppInfoBean position(long position) {
            return (AppInfoBean)super.position(position);
        }
    
        /** Ӧ������ */
        public native @Cast("int64") long id(); public native AppInfoBean id(long id);
        /** Ӧ������ */
        public native @StdString  String name(); public native AppInfoBean name(String name);
        /** Ӧ��ͼ��(ͼƬ·��) */
        public native @StdString  String icon(); public native AppInfoBean icon(String icon);
        /** Ӧ�÷���(����ID) */
        public native @Cast("int32") int classify(); public native AppInfoBean classify(int classify);
        /** ���Ӧ������(1:ԭ��APK,2:H5) */
        public native @Cast("int32") int type(); public native AppInfoBean type(int type);
        /** h5��ҳ���ʵ�ַ */
        public native @StdString  String homeUrl(); public native AppInfoBean homeUrl(String homeUrl);
        /** �汾�� */
        public native @StdString  String version(); public native AppInfoBean version(String version);
        /** ���� */
        public native @StdString  String packageName(); public native AppInfoBean packageName(String packageName);
        /** ���ص�ַ */
        public native @StdString  String downloadUrl(); public native AppInfoBean downloadUrl(String downloadUrl);
        /** ��׿��ȡ����Ӧ������ */
        public native @StdString  String activityName(); public native AppInfoBean activityName(String activityName);
        /** ������Χ(���orgID�ԡ�����ƴ��) */
        public native @StdString  String orgIds(); public native AppInfoBean orgIds(String orgIds);
        /** ״̬(1:����,2:ͣ�ã�3��ɾ��) */
        public native @Cast("int32") int status(); public native AppInfoBean status(int status);
        /** app_key */
        public native @StdString  String key(); public native AppInfoBean key(String key);
        /** app_secret */
        public native @StdString  String secret(); public native AppInfoBean secret(String secret);
        /** ������userID */
        public native @Cast("int64") long createUserID(); public native AppInfoBean createUserID(long createUserID);
        /** ����ʱ�� */
        public native @StdString  String createTime(); public native AppInfoBean createTime(String createTime);
        /** ����ʱ��-�½�����ʱ��ʼֵ�봴��ʱ��һ�� */
        public native @StdString  String updateTime(); public native AppInfoBean updateTime(String updateTime);
        /** �����ֶ�-δ��������ֵʱĬ��Ϊ1 */
        public native @Cast("int32") int sort(); public native AppInfoBean sort(int sort);
        /** Ԥ���ֶ�1 */
        public native @StdString  String column1(); public native AppInfoBean column1(String column1);
        /** Ԥ���ֶ�2 */
        public native @StdString  String column2(); public native AppInfoBean column2(String column2);
        /** Ԥ���ֶ�3 */
        public native @StdString  String column3(); public native AppInfoBean column3(String column3);
        public native @Cast("int64") long createUnitID(); public native AppInfoBean createUnitID(long createUnitID);
    }

    /** Ӧ�÷���ʵ�� */
    @Namespace("model") public static class AppClassifyBean extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AppClassifyBean() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AppClassifyBean(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AppClassifyBean(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AppClassifyBean position(long position) {
            return (AppClassifyBean)super.position(position);
        }
    
        /** �������� */
        public native @Cast("int32") int classifyID(); public native AppClassifyBean classifyID(int classifyID);
        /** �������� */
        public native @StdString  String classifyName(); public native AppClassifyBean classifyName(String classifyName);
        /** ������userID */
        public native @Cast("int64") long createUserID(); public native AppClassifyBean createUserID(long createUserID);
        /** ����״̬ 1������ 2����ɾ�� */
        public native @Cast("int32") int classifyStatus(); public native AppClassifyBean classifyStatus(int classifyStatus);
        /** ����ʱ�� */
        public native @StdString  String createTime(); public native AppClassifyBean createTime(String createTime);
        /** ����ʱ��-�½�����ʱ��ʼֵ�봴��ʱ��һ�� */
        public native @StdString  String updateTime(); public native AppClassifyBean updateTime(String updateTime);
        /** �����ֶ�-δ��������ֵʱĬ��Ϊ1 */
        public native @Cast("int32") int classifySort(); public native AppClassifyBean classifySort(int classifySort);
        /** Ԥ���ֶ�1 */
        public native @StdString  String classifyColumn1(); public native AppClassifyBean classifyColumn1(String classifyColumn1);
        /** Ԥ���ֶ�2 */
        public native @StdString  String classifyColumn2(); public native AppClassifyBean classifyColumn2(String classifyColumn2);
        /** Ԥ���ֶ�3 */
        public native @StdString  String classifyColumn3(); public native AppClassifyBean classifyColumn3(String classifyColumn3);
        public native @Cast("int32") int classifyType(); public native AppClassifyBean classifyType(int classifyType);
    }

    /** Ҫ���ȵ�ʵ�� */
    @Namespace("model") public static class HotNewsBean extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public HotNewsBean() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public HotNewsBean(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public HotNewsBean(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public HotNewsBean position(long position) {
            return (HotNewsBean)super.position(position);
        }
    
        /** Ҫ������ */
        public native @Cast("int32") int id(); public native HotNewsBean id(int id);
        /** Ҫ�ű��� */
        public native @StdString  String newsTitle(); public native HotNewsBean newsTitle(String newsTitle);
        /** ����ͼƬ·�� */
        public native @StdString  String newsCover(); public native HotNewsBean newsCover(String newsCover);
        /** �������� */
        public native @StdString  String newsContent(); public native HotNewsBean newsContent(String newsContent);
        /** ������Id */
        public native @Cast("int64") long createUserID(); public native HotNewsBean createUserID(long createUserID);
        /** ����ʱ�� */
        public native @StdString  String createTime(); public native HotNewsBean createTime(String createTime);
        /** ����ʱ�� */
        public native @StdString  String updateTime(); public native HotNewsBean updateTime(String updateTime);
        /** �����ֶ� */
        public native @Cast("int32") int newsSort(); public native HotNewsBean newsSort(int newsSort);
        /** Ԥ���ֶ�1 */
        public native @StdString  String newsColumn1(); public native HotNewsBean newsColumn1(String newsColumn1);
        /** Ԥ���ֶ�2 */
        public native @StdString  String newsColumn2(); public native HotNewsBean newsColumn2(String newsColumn2);
        /** Ԥ���ֶ�3 */
        public native @StdString  String newsColumn3(); public native HotNewsBean newsColumn3(String newsColumn3);
    }

    /** �û���Ӧ�ù�ϵ */
    @Namespace("model") public static class AppRelationBean extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AppRelationBean() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AppRelationBean(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AppRelationBean(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AppRelationBean position(long position) {
            return (AppRelationBean)super.position(position);
        }
    
        /** ��ϵid */
        public native @Cast("int32") int id(); public native AppRelationBean id(int id);
        /** �û�id */
        public native @Cast("int64") long userID(); public native AppRelationBean userID(long userID);
        /** Ӧ��id */
        public native @Cast("int64") long appID(); public native AppRelationBean appID(long appID);
        /** Ӧ������id */
        public native @Cast("int32") int classifyID(); public native AppRelationBean classifyID(int classifyID);
        /** ��ϵ״̬ 1������ 2����ɾ�� */
        public native @Cast("int32") int relationStatus(); public native AppRelationBean relationStatus(int relationStatus);
        /** ����ʱ�� */
        public native @StdString  String createTime(); public native AppRelationBean createTime(String createTime);
        /** ����ʱ�� */
        public native @StdString  String updateTime(); public native AppRelationBean updateTime(String updateTime);
        /** �����ֶ� */
        public native @Cast("int32") int sort(); public native AppRelationBean sort(int sort);
        /** Ԥ���ֶ�1 */
        public native @StdString  String relationColumn1(); public native AppRelationBean relationColumn1(String relationColumn1);
        /** Ԥ���ֶ�2 */
        public native @StdString  String relationColumn2(); public native AppRelationBean relationColumn2(String relationColumn2);
        /** Ԥ���ֶ�3 */
        public native @StdString  String relationColumn3(); public native AppRelationBean relationColumn3(String relationColumn3);
    }

    /** �ҵ�Ӧ����Ϣ */
    @Namespace("model") public static class MyAppInfo extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public MyAppInfo() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public MyAppInfo(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public MyAppInfo(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public MyAppInfo position(long position) {
            return (MyAppInfo)super.position(position);
        }
    
        /** Ӧ�÷��� */
        public native @ByRef AppClassifyBean appClassify(); public native MyAppInfo appClassify(AppClassifyBean appClassify);
        /** Ӧ�ü��� */
        public native @StdVector AppInfoBean appInfoList(); public native MyAppInfo appInfoList(AppInfoBean appInfoList);
        /** ��Ӧ�� */
        public native @Cast("int64") long code(); public native MyAppInfo code(long code);
        /** ��Ӧ�������� */
        public native @StdString  String msg(); public native MyAppInfo msg(String msg);
    }

    /** Ӧ���̵� */
    @Namespace("model") public static class AppStore extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AppStore() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AppStore(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AppStore(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AppStore position(long position) {
            return (AppStore)super.position(position);
        }
    
        /** Ӧ�ü��� */
        public native @StdVector AppInfoBean appInfoList(); public native AppStore appInfoList(AppInfoBean appInfoList);
        /** ÿҳ��ʾ������ */
        public native @Cast("int64") long pageSize(); public native AppStore pageSize(long pageSize);
        /** ��ǰҳ�� */
        public native @Cast("int64") long pageNum(); public native AppStore pageNum(long pageNum);
        /** ������ */
        public native @Cast("int64") long totalCount(); public native AppStore totalCount(long totalCount);
        /** ��ҳ�� */
        public native @Cast("int64") long totalPage(); public native AppStore totalPage(long totalPage);
        /** ��Ӧ�� */
        public native @Cast("int64") long code(); public native AppStore code(long code);
        /** ��Ӧ�������� */
        public native @StdString  String msg(); public native AppStore msg(String msg);
    }

    /** Ӧ���̵��ѯ���� */
    @Namespace("model") public static class AppStoreQueryParam extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AppStoreQueryParam() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AppStoreQueryParam(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AppStoreQueryParam(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AppStoreQueryParam position(long position) {
            return (AppStoreQueryParam)super.position(position);
        }
    
        /** Ӧ������ */
        public native @StdString  String appName(); public native AppStoreQueryParam appName(String appName);
        /** Ӧ������ */
        public native @Cast("int64") long userId(); public native AppStoreQueryParam userId(long userId);
        /** id */
        public native @Cast("int64") long appClassifyId(); public native AppStoreQueryParam appClassifyId(long appClassifyId);
        /** ÿҳ��ʾ������ */
        public native @Cast("int64") long pageSize(); public native AppStoreQueryParam pageSize(long pageSize);
        /** ��ǰҳ�� */
        public native @Cast("int64") long pageNum(); public native AppStoreQueryParam pageNum(long pageNum);
        public native @Cast("int32") int searchType(); public native AppStoreQueryParam searchType(int searchType);
    }

    @Namespace("model") public static class reqAppStore extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public reqAppStore() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public reqAppStore(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public reqAppStore(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public reqAppStore position(long position) {
            return (reqAppStore)super.position(position);
        }
    
        public native @Cast("int8") byte type(); public native reqAppStore type(byte type);
        public native @ByRef AppStoreQueryParam appStoreQueryParam(); public native reqAppStore appStoreQueryParam(AppStoreQueryParam appStoreQueryParam);
        public native @ByRef AppRelationBean appRelation(); public native reqAppStore appRelation(AppRelationBean appRelation);
        public native @Cast("int64") long value64(); public native reqAppStore value64(long value64);
    }
    /**
    * Ӧ��ͳ�ƽ��ʵ��
    * zhaorujia
    */
    @Namespace("model") public static class AppStatisticsResult extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AppStatisticsResult() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AppStatisticsResult(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AppStatisticsResult(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AppStatisticsResult position(long position) {
            return (AppStatisticsResult)super.position(position);
        }
    
        /* ������� */
        public native @StdString  String msg(); public native AppStatisticsResult msg(String msg);
        /* ����� */
        public native @StdString  String code(); public native AppStatisticsResult code(String code);
    }

    @Namespace("model") public static class EnterpriseUserBean extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public EnterpriseUserBean() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public EnterpriseUserBean(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public EnterpriseUserBean(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public EnterpriseUserBean position(long position) {
            return (EnterpriseUserBean)super.position(position);
        }
    
        public native @Cast("int64") long userID(); public native EnterpriseUserBean userID(long userID);                           /** �û�ID */
        public native @Cast("int64") long enterpriseID(); public native EnterpriseUserBean enterpriseID(long enterpriseID);                     /** ��ҵID */
        public native @Cast("int64") long orgID(); public native EnterpriseUserBean orgID(long orgID);                            /** ��֯����ID */
        public native @Cast("int64") long roleID(); public native EnterpriseUserBean roleID(long roleID);                           /** ��ɫID */
        public native @StdString  String Enname(); public native EnterpriseUserBean Enname(String Enname);                     /** ��ҵ���û����� */
        public native @StdString  String duty(); public native EnterpriseUserBean duty(String duty);                       /** ��ҵ���û�ְλ */
        public native @StdString  String Enmail(); public native EnterpriseUserBean Enmail(String Enmail);                     /** ��ҵ���û�email */
        public native @StdString  String Enmobile(); public native EnterpriseUserBean Enmobile(String Enmobile);                   /** ��ҵ���û��ֻ��� */
        public native @Cast("int8") byte status(); public native EnterpriseUserBean status(byte status);                            /** ��ҵ�˺��Ƿ�ͣ�� 1������ 2��ͣ�� */
        public native @Cast("int64") long orderNum(); public native EnterpriseUserBean orderNum(long orderNum);                         /** ��Ա���� */
        public native @Cast("int64") long newOrgID(); public native EnterpriseUserBean newOrgID(long newOrgID);
        public native @StdString  String orgName(); public native EnterpriseUserBean orgName(String orgName);                    /** ��֯�� */
        public native @StdString  String extend(); public native EnterpriseUserBean extend(String extend);                     /** ��չ��Ϣ */
        public native @StdString  String accountName(); public native EnterpriseUserBean accountName(String accountName);                /** �˺����� */
        public native @Cast("int8") byte bizStatus(); public native EnterpriseUserBean bizStatus(byte bizStatus);                         /** ҵ��״̬��1����ʼ״̬��2���ڸ߹�Ⱥ */
        public native @StdString  String userHead(); public native EnterpriseUserBean userHead(String userHead);                   /** ͷ�� */
        public native @StdString  String userExtend(); public native EnterpriseUserBean userExtend(String userExtend);
    }

    @Namespace("model") @NoOffset public static class OrganizationBean extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public OrganizationBean(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public OrganizationBean(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public OrganizationBean position(long position) {
            return (OrganizationBean)super.position(position);
        }
    
        public OrganizationBean() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** ��֯����ID orgID. */
        public native @Cast("int64") long orgID(); public native OrganizationBean orgID(long orgID);
        /** ��ҵID enterpriseID. */
        public native @Cast("int64") long enterpriseID(); public native OrganizationBean enterpriseID(long enterpriseID);
        /** ��֯�������� orgName. */
        public native @StdString  String orgName(); public native OrganizationBean orgName(String orgName);
        /** ��֯�������� orgCode. */
        public native @StdString  String orgCode(); public native OrganizationBean orgCode(String orgCode);
        /** �Ƿ�Ҷ�ڵ� leaf. */
        public native @Cast("int8") byte leaf(); public native OrganizationBean leaf(byte leaf);
        /** ���ڵ� parentOrgID. */
        public native @Cast("int64") long parentOrgID(); public native OrganizationBean parentOrgID(long parentOrgID);
        /** ��ע remark. */
        public native @StdString  String remark(); public native OrganizationBean remark(String remark);
        /** ���� orderNum. */
        public native @Cast("int64") long orderNum(); public native OrganizationBean orderNum(long orderNum);
        /** �칫��ID branchID. */
        public native @Cast("int64") long branchID(); public native OrganizationBean branchID(long branchID);
        /** ɾ�� departID. */
        public native @StdString  String departID(); public native OrganizationBean departID(String departID);
        /** ��֯���� departLevel. */
        public native @Cast("int8") byte departLevel(); public native OrganizationBean departLevel(byte departLevel);
        /** �ݹ���������¼���֯�� subOrgNum. */
        public native @Cast("int64") long subOrgNum(); public native OrganizationBean subOrgNum(long subOrgNum);
        /** �ݹ���������¼���Ա�� subUserNum. */
        public native @Cast("int64") long subUserNum(); public native OrganizationBean subUserNum(long subUserNum);
        /** �Ƿ�����, 1�Ա����Ź��� 2�����в��Ź�����3�Բ��ֲ��Ź��� isHidden. */
        public native @Cast("int8") byte isHidden(); public native OrganizationBean isHidden(byte isHidden);
        /** ʡ��ID provinceID. */
        public native @Cast("int64") long provinceID(); public native OrganizationBean provinceID(long provinceID);
        /** ʡ������ provinceName. */
        public native @StdString  String provinceName(); public native OrganizationBean provinceName(String provinceName);
        /** ��ID cityID. */
        public native @Cast("int64") long cityID(); public native OrganizationBean cityID(long cityID);
        /** ������ cityName. */
        public native @StdString  String cityName(); public native OrganizationBean cityName(String cityName);
        /** ��ID areaID. */
        public native @Cast("int64") long areaID(); public native OrganizationBean areaID(long areaID);
        /** ������ areaName. */
        public native @StdString  String areaName(); public native OrganizationBean areaName(String areaName);
        /** ƴ�� orgNamePinyin. */
        public native @StdString  String orgNamePinyin(); public native OrganizationBean orgNamePinyin(String orgNamePinyin);
        /** ��չ�ֶ� */
        public native @StdString  String extend(); public native OrganizationBean extend(String extend);
        /** ������֯����ʱ,���صĴ����� */
        public native @Cast("int32") int resCode(); public native OrganizationBean resCode(int resCode);
        public native @Cast("int32") int exlRow(); public native OrganizationBean exlRow(int exlRow);
    }

    @Namespace("model") public static class UserBean extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public UserBean() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public UserBean(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public UserBean(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public UserBean position(long position) {
            return (UserBean)super.position(position);
        }
    
        /**�û�ID */
        public native @Cast("int64") long userID(); public native UserBean userID(long userID);
        //std::string phoneNum;       //<����ɾ��
        //std::string email;          ///<����ɾ��
        /**Ŀǰû������ */
        public native @Cast("int16") int userType(); public native UserBean userType(int userType);
        /**�û��� */
        public native @StdString  String name(); public native UserBean name(String name);
        /**�û����� */
        public native @StdString  String pwd(); public native UserBean pwd(String pwd);
        /**�Ա� */
        public native @Cast("int8") byte sex(); public native UserBean sex(byte sex);
        /**���� */
        public native @StdString  String area(); public native UserBean area(String area);
        /**���� */
        public native @ByRef YMD birthday(); public native UserBean birthday(YMD birthday);
        /**��ҵѧУ */
        public native @StdString  String school(); public native UserBean school(String school);
        //int64 qqNum;                ///<����ɾ��
        /**Ŀǰ������ */
        public native @StdString  String maccode(); public native UserBean maccode(String maccode);
        /**�û�״̬ 1������ 2��ͣ�� 3: ע������4: Ӱ���û���5:������6:���� */
        public native @Cast("int8") byte status(); public native UserBean status(byte status);
        /**ͷ���ַ */
        public native @StdString  String portraitURL(); public native UserBean portraitURL(String portraitURL);
        /**ǩ�� */
        public native @StdString  String sign(); public native UserBean sign(String sign);
        /**ʱ�� */
        public native @Cast("int8") byte timeZone(); public native UserBean timeZone(byte timeZone);
        /**�绰�����嵥 */
        public native @ByRef StringVector phoneNums(); public native UserBean phoneNums(StringVector phoneNums);
        /**�����嵥 */
        public native @ByRef StringVector emails(); public native UserBean emails(StringVector emails);
        /**ԭʼͷ���ַ */
        public native @StdString  String oriPortraitURL(); public native UserBean oriPortraitURL(String oriPortraitURL);
        /**����ɾ�� */
        public native @StdString  String idcard(); public native UserBean idcard(String idcard);
        /**�˺����� */
        public native @StdString  String accountName(); public native UserBean accountName(String accountName);
        /**��չ��Ϣ */
        public native @StdString  String extend(); public native UserBean extend(String extend);
        /**������ֹʱ�䣬���� */
        public native @Cast("int64") long lockDeadline(); public native UserBean lockDeadline(long lockDeadline);
        /**ʣ������ʱ�������� */
        public native @Cast("int64") long remainLockDuration(); public native UserBean remainLockDuration(long remainLockDuration);
        /**SDKID */
        public native @Cast("int64") long SDKID(); public native UserBean SDKID(long SDKID);
        /**��ҵ��չ��Ϣ */
        public native @StdString  String entExtend(); public native UserBean entExtend(String entExtend);
        /**��ϵ��ʽ���� */
        public native @ByRef acctTypeVector accounts(); public native UserBean accounts(acctTypeVector accounts);
        /**ע���ʶ0Ϊ����1Ϊע�� */
        public native @Cast("int8") byte regFlag(); public native UserBean regFlag(byte regFlag);
        /**����ǿ��:1:��,2:��,3:ǿ */
        public native @Cast("int8") byte pwdStrength(); public native UserBean pwdStrength(byte pwdStrength);
        /**��֯�ṹid,����ö��ŷָ� */
        public native @StdString  String orgID(); public native UserBean orgID(String orgID);
        /**��ɫID */
        public native @Cast("int64") long roleID(); public native UserBean roleID(long roleID);
        /**ҵ��״̬��1����ʼĬ�ϣ�2���ڸ߹ܲ� */
        public native @Cast("int8") byte bizStatus(); public native UserBean bizStatus(byte bizStatus);
        /**�ϴ���ʶ, 1:δ�ϴ�,2:���ϴ�,3:�Ѻ��� */
        public native @Cast("int8") byte uploadFlag(); public native UserBean uploadFlag(byte uploadFlag);
        /**���涳��֮ǰ�û�״̬status��ֵ */
        public native @Cast("int8") byte oldStatus(); public native UserBean oldStatus(byte oldStatus);
    }
    @Namespace("model") public static class OrgUserAndChildNodes extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public OrgUserAndChildNodes() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public OrgUserAndChildNodes(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public OrgUserAndChildNodes(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public OrgUserAndChildNodes position(long position) {
            return (OrgUserAndChildNodes)super.position(position);
        }
    
        public native @Cast("int32") int code(); public native OrgUserAndChildNodes code(int code);
        public native @StdString  String what(); public native OrgUserAndChildNodes what(String what);
        public native @StdVector EnterpriseUserBean users(); public native OrgUserAndChildNodes users(EnterpriseUserBean users);
        public native @StdVector OrganizationBean obeans(); public native OrgUserAndChildNodes obeans(OrganizationBean obeans);
        public native @StdString  String oPower(); public native OrgUserAndChildNodes oPower(String oPower);
    }

    @Namespace("model") public static class OrgSearchUserRet extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public OrgSearchUserRet() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public OrgSearchUserRet(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public OrgSearchUserRet(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public OrgSearchUserRet position(long position) {
            return (OrgSearchUserRet)super.position(position);
        }
    
        public native @ByRef EnterpriseUserBean ub(); public native OrgSearchUserRet ub(EnterpriseUserBean ub);
        public native @StdString  String power(); public native OrgSearchUserRet power(String power);
    }

    @Namespace("model") public static class OrgSearchResult extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public OrgSearchResult() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public OrgSearchResult(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public OrgSearchResult(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public OrgSearchResult position(long position) {
            return (OrgSearchResult)super.position(position);
        }
    
        public native @StdVector EnterpriseUserBean uBeans(); public native OrgSearchResult uBeans(EnterpriseUserBean uBeans);
        public native @StdString  String resultFlag(); public native OrgSearchResult resultFlag(String resultFlag);
    }
    @Namespace("model") public static class respAppStore extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public respAppStore() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public respAppStore(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public respAppStore(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public respAppStore position(long position) {
            return (respAppStore)super.position(position);
        }
    
        public native @Cast("int32") int code(); public native respAppStore code(int code);
        public native @StdString  String what(); public native respAppStore what(String what);
        public native @StdVector MyAppInfo appInfos(); public native respAppStore appInfos(MyAppInfo appInfos);
        public native @ByRef AppStore appStore(); public native respAppStore appStore(AppStore appStore);
        public native @StdVector AppInfoBean appBeans(); public native respAppStore appBeans(AppInfoBean appBeans);
        public native @StdVector AppClassifyBean classifyBeans(); public native respAppStore classifyBeans(AppClassifyBean classifyBeans);
        public native @StdVector HotNewsBean hotNewsBeans(); public native respAppStore hotNewsBeans(HotNewsBean hotNewsBeans);
        public native @ByRef Result ret(); public native respAppStore ret(Result ret);
        public native @ByRef AppStatisticsResult statResult(); public native respAppStore statResult(AppStatisticsResult statResult);
    }

    @Namespace("model") public static class reqEnOS extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public reqEnOS() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public reqEnOS(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public reqEnOS(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public reqEnOS position(long position) {
            return (reqEnOS)super.position(position);
        }
    
        public native @Cast("int8") byte type(); public native reqEnOS type(byte type);
        public native @Cast("int64") long value64(); public native reqEnOS value64(long value64);
        public native @Cast("int64") long value64_2(); public native reqEnOS value64_2(long value64_2);
        public native @Cast("int64") long value64_3(); public native reqEnOS value64_3(long value64_3);
        public native @StdString  String valuestr(); public native reqEnOS valuestr(String valuestr);
        public native @ByRef LongVector list_i64(); public native reqEnOS list_i64(LongVector list_i64);
        public native @ByRef MapStr2 params(); public native reqEnOS params(MapStr2 params);
    }

    @Namespace("model") public static class respEnOS extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public respEnOS() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public respEnOS(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public respEnOS(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public respEnOS position(long position) {
            return (respEnOS)super.position(position);
        }
    
        public native @Cast("int32") int code(); public native respEnOS code(int code);
        public native @StdString  String what(); public native respEnOS what(String what);
        public native @ByRef OrgUserAndChildNodes nodes(); public native respEnOS nodes(OrgUserAndChildNodes nodes);
        public native @StdVector OrgSearchUserRet orgSearchUsers(); public native respEnOS orgSearchUsers(OrgSearchUserRet orgSearchUsers);
        public native @ByRef OrgSearchResult searchRet(); public native respEnOS searchRet(OrgSearchResult searchRet);
        public native @StdVector EnterpriseUserBean entUsers(); public native respEnOS entUsers(EnterpriseUserBean entUsers);
        public native @StdVector OrganizationBean depts(); public native respEnOS depts(OrganizationBean depts);
    }
    /**�ͻ���ͳ�ƽӿ� */
    @Namespace("model") public static class AppStatisticsBean extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AppStatisticsBean() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AppStatisticsBean(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AppStatisticsBean(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AppStatisticsBean position(long position) {
            return (AppStatisticsBean)super.position(position);
        }
    
        /* Ӧ�����ͣ�
        * 1���Ż�Ӧ������ 2.��ͨӦ������
        */
        public native @StdString  String appType(); public native AppStatisticsBean appType(String appType);
        /* Ӧ��ID */
        public native @StdString  String appID(); public native AppStatisticsBean appID(String appID);
        /* �û�ID */
        public native @StdString  String userID(); public native AppStatisticsBean userID(String userID);
        /* ��֯����ID*/
        public native @StdString  String orgID(); public native AppStatisticsBean orgID(String orgID);
        /* ��֯����CODE */
        public native @StdString  String orgCode(); public native AppStatisticsBean orgCode(String orgCode);
        /* ��֯����CODE */
        public native @StdString  String unitID(); public native AppStatisticsBean unitID(String unitID);
    }


// Parsed from extModel/tclpacket.h

// #pragma once

// #include "../extModel/packet.h"
@Namespace("model") @NoOffset public static class tclRequest extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tclRequest(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tclRequest(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public tclRequest position(long position) {
        return (tclRequest)super.position(position);
    }

    public tclRequest() { super((Pointer)null); allocate(); }
    private native void allocate();

    /** 目标ID */
    public native @Cast("int64") long targetId(); public native tclRequest targetId(long targetId);
    /** 远程控制类型 1-可视，2-可控 */
    public native @Cast("int8") byte ctrlType(); public native tclRequest ctrlType(byte ctrlType);
    /** 是否控制方，true-请求、房间号为targetID，false-邀请、房间号为MyselfID */
    public native @Cast("bool") boolean isControl(); public native tclRequest isControl(boolean isControl);
    /** 受控方IP地址列表，邀请时有效 */
    public native @ByRef StringVector vecIPAddr(); public native tclRequest vecIPAddr(StringVector vecIPAddr);
}
@Namespace("model") @NoOffset public static class tclRejectOrAccept extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tclRejectOrAccept(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tclRejectOrAccept(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public tclRejectOrAccept position(long position) {
        return (tclRejectOrAccept)super.position(position);
    }

    public tclRejectOrAccept() { super((Pointer)null); allocate(); }
    private native void allocate();

    /** 目标Id */
    public native @Cast("int64") long targetId(); public native tclRejectOrAccept targetId(long targetId);
    /** 1,接受 2，拒绝 */
    public native @Cast("int8") byte type(); public native tclRejectOrAccept type(byte type);
    /** 房间号 唯一 */
    public native @Cast("int64") long channelId(); public native tclRejectOrAccept channelId(long channelId);
    /** 远程控制类型 1-可视，2-可控 */
    public native @Cast("int8") byte ctrlType(); public native tclRejectOrAccept ctrlType(byte ctrlType);
    /** 受控方IP地址列表，接受时有效 */
    public native @ByRef StringVector vecIPAddr(); public native tclRejectOrAccept vecIPAddr(StringVector vecIPAddr);
}
@Namespace("model") @NoOffset public static class tclSwitch extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tclSwitch(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tclSwitch(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public tclSwitch position(long position) {
        return (tclSwitch)super.position(position);
    }

    public tclSwitch() { super((Pointer)null); allocate(); }
    private native void allocate();
    /** 目标ID */
    public native @Cast("int64") long targetId(); public native tclSwitch targetId(long targetId);
    /** 远程控制类型 1-可视，2-可控 */
    public native @Cast("int8") byte ctrlType(); public native tclSwitch ctrlType(byte ctrlType);
}
@Namespace("model") @NoOffset public static class tclHungUp extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tclHungUp(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tclHungUp(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public tclHungUp position(long position) {
        return (tclHungUp)super.position(position);
    }

    public tclHungUp() { super((Pointer)null); allocate(); }
    private native void allocate();

    /** 目标ID */
    public native @Cast("int64") long targetId(); public native tclHungUp targetId(long targetId);
    /** 是否取消通话 true-cancel, false-hungUp */
    public native @Cast("bool") boolean isCancel(); public native tclHungUp isCancel(boolean isCancel);
}
@Namespace("model") @NoOffset public static class tclResponse extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tclResponse(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tclResponse(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public tclResponse position(long position) {
        return (tclResponse)super.position(position);
    }

    public tclResponse() { super((Pointer)null); allocate(); }
    private native void allocate();
    /** 目标ID */
    public native @Cast("int64") long targetId(); public native tclResponse targetId(long targetId);
    /** 远程控制类型 1-可视，2-可控 */
    public native @Cast("int8") byte ctrlType(); public native tclResponse ctrlType(byte ctrlType);
    /** IP地址列表 */
    public native @ByRef StringVector vecIPAddr(); public native tclResponse vecIPAddr(StringVector vecIPAddr);
}



// Parsed from extModel/gaInterpacket.h

// #pragma once

// #include "../extModel/packet.h"
    // �ⲿ��ҵ�ڵ���Ϣ
    @Namespace("model") public static class AppNodeInfo extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public AppNodeInfo() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AppNodeInfo(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AppNodeInfo(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public AppNodeInfo position(long position) {
            return (AppNodeInfo)super.position(position);
        }
    
        /** �ڵ�ID��Ψһ�� */
        public native @StdString  String nodeID(); public native AppNodeInfo nodeID(String nodeID);
        /** �ڵ��� */
        public native @ByRef OptionalString nodeName(); public native AppNodeInfo nodeName(OptionalString nodeName);
        /** ��ҵ���� */
        public native @ByRef OptionalString productType(); public native AppNodeInfo productType(OptionalString productType);
    }

    // ������Ʋ���
    @Namespace("model") public static class ThreeCardOper extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public ThreeCardOper() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public ThreeCardOper(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public ThreeCardOper(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public ThreeCardOper position(long position) {
            return (ThreeCardOper)super.position(position);
        }
    
        /** �û�ID */
        public native @Cast("int64") long userID(); public native ThreeCardOper userID(long userID);
        /** �û����� */
        public native @StdString  String userName(); public native ThreeCardOper userName(String userName);
        /** ���֤ */
        public native @StdString  String idcard(); public native ThreeCardOper idcard(String idcard);
        /** ֤���� */
        public native @StdString  String certificateNo(); public native ThreeCardOper certificateNo(String certificateNo);
        /** tf�����к� */
        public native @StdString  String tfSerialNumber(); public native ThreeCardOper tfSerialNumber(String tfSerialNumber);
        /** ��SIM��iccid */
        public native @StdString  String iccid(); public native ThreeCardOper iccid(String iccid);
        /** �豸ID */
        public native @StdString  String equipmentID(); public native ThreeCardOper equipmentID(String equipmentID);
        /** Ӧ��ID */
        public native @StdString  String appID(); public native ThreeCardOper appID(String appID);
        /** �ƶ���IP */
        public native @StdString  String mobileIP(); public native ThreeCardOper mobileIP(String mobileIP);
        /** �ƶ��������ַ */
        public native @StdString  String mobileMac(); public native ThreeCardOper mobileMac(String mobileMac);
        /** ��������  1��¼2�ǳ� */
        public native @Cast("int32") int operType(); public native ThreeCardOper operType(int operType);
        /** �������   1�ɹ�2ʧ�� */
        public native @Cast("int32") int operResult(); public native ThreeCardOper operResult(int operResult);
        /** ����id */
        public native @Cast("int64") long id(); public native ThreeCardOper id(long id);
        /** ����ʱ�� */
        public native @StdString  String operTime(); public native ThreeCardOper operTime(String operTime);
    }


// Parsed from model/Account.h

// #pragma once
// #include <vector>
// #include "User.h"
// #include "../extModel/packet.h"
/**账号信息 */

@Namespace("model") @NoOffset public static class Account extends User {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Account(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Account(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Account position(long position) {
        return (Account)super.position(position);
    }

	public Account() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native void init();

	/**生日 */
	public native @ByRef OptionalLong birthday(); public native Account birthday(OptionalLong birthday);
	/**豆豆号 */
	public native @ByRef OptionalString nickId(); public native Account nickId(OptionalString nickId);
	/**手机号 */
	public native @ByRef OptionalString phone(); public native Account phone(OptionalString phone);
	/**邮箱号 */
	public native @ByRef OptionalString email(); public native Account email(OptionalString email);
	/**手机号 */
	public native @ByRef OptionalStringVector phones(); public native Account phones(OptionalStringVector phones);
	/**邮箱号 */
	public native @ByRef OptionalStringVector emails(); public native Account emails(OptionalStringVector emails);
	/**签名 */
	public native @ByRef OptionalString sign(); public native Account sign(OptionalString sign);
	/**地区 */
	public native @ByRef OptionalString area(); public native Account area(OptionalString area);
    /**是否设置密码 */
    public native @ByRef OptionalBool hadPwd(); public native Account hadPwd(OptionalBool hadPwd);
	/**账号 */
	public native @ByRef OptionaAccountTypeVector accounts(); public native Account accounts(OptionaAccountTypeVector accounts);

	/**角色ID */
	public native @ByRef OptionalLong roleID(); public native Account roleID(OptionalLong roleID);
}

 /*namespace model */


// Parsed from model/Chat.h

// #pragma once

// #include "User.h"

/**聊天类型 */
/** enum ChatType */
public static final int
	/**好友聊天 */
	BUDDY_CHAT = 1,
	/**群组聊天 */
	GROUP_CHAT = 2,
	/**公众号 */
	APP_CHAT = 3,
	/**系统消息 */
	SYSTEM_MSG = 4,
	/**陌生人聊天 */
	STRANGER_CHAT = 5,
	/**企业成员聊天 */
	ENT_USER_CHAT = 6,
	/**我的设备 */
	PHONE_CHAT = 7,
	/**企业号 */
	ENT_CHAT = 8,
	/**应用号 */
	APPLICATION_CHAT = 9;
/**聊天信息	 */
@Namespace("model") @NoOffset public static class Chat extends User {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Chat(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Chat(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Chat position(long position) {
        return (Chat)super.position(position);
    }

	public Chat() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native void init();
	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef Chat rhs);
	/**消息类型;1：HTML, 2:TEXT, 3：AUDIO, 4：POSITION, 5：IMG, 6：FILE, 7：CARD,  8：TIP */
	public native int msgType(); public native Chat msgType(int msgType);
	/**聊天类型  1人，2群，3公众号，8企业号,9应用号 */
	public native int chatType(); public native Chat chatType(int chatType);
	/**1为阅后即焚 */
	public native int operType(); public native Chat operType(int operType);
	public native @Cast("int8") byte isTop(); public native Chat isTop(byte isTop);			  /**是否置顶 0.非置顶 1.置顶 */
	public native @Cast("int8_t") byte isHidden(); public native Chat isHidden(byte isHidden);	  /**是否隐藏 0.否 1.是 */
	/**系统消息子类型 */
	public native int subType(); public native Chat subType(int subType);
	/**最近联系人触发类型 0.手动添加 1.消息触发 2.置顶触发 3.设置已读触发 */
	public native int triggerType(); public native Chat triggerType(int triggerType);
	/**未读消息数量 */
	public native int unreadCount(); public native Chat unreadCount(int unreadCount);
	/** 真正的未读消息数量 = unReadCnt+弱提示消息数量+其它端同步的设备消息数量，客户端每次拉取未读用这个字段，当realUnReadCnt为0时，表示所有消息在当前设备客户端都已经看过了
	 *  消息提醒模式 与0x0F 0.免打扰 1.提醒始终有声音  2.提醒始终无声音  3.提醒  4.不提醒，仅显示条目 5.根据免打扰时间段判断是否免打扰  6.强制提醒(仅群有效) */
	public native @Cast("int32") int realUnReadCnt(); public native Chat realUnReadCnt(int realUnReadCnt);
	//< 与 0xF0, 1、通知详情  2、通知源，隐藏内容  3、完全隐藏  4、云推推过了，不显示通知
	public native @Cast("int8") byte msgRemindMode(); public native Chat msgRemindMode(byte msgRemindMode);
	/**免打扰 1为接收提醒, 2表示不提醒仅显示数字, 3为免打扰 */
	public native @Cast("int8") byte disturbSet(); public native Chat disturbSet(byte disturbSet);
	/**最后一条消息ID */
	public native @Cast("int64") long lastMsgId(); public native Chat lastMsgId(long lastMsgId);
	/**最后一条\消息ID */
	public native @Cast("int64") long lastAtMsgID(); public native Chat lastAtMsgID(long lastAtMsgID);
	/**发消息的群成员是否为v标好友 */
	public native @Cast("bool") boolean memberIsVSign(); public native Chat memberIsVSign(boolean memberIsVSign);
	/**消息时间 */
	public native @Cast("int64") long msgTime(); public native Chat msgTime(long msgTime);
	/** 消息来源 在群的时候有用  */
	public native @StdString  String whereFrom(); public native Chat whereFrom(String whereFrom);
	/**最后一条消息 */
	public native @StdString  String lastMsg(); public native Chat lastMsg(String lastMsg);
	/**消息属性 */
	public native @StdString  String msgProp(); public native Chat msgProp(String msgProp);
	/** 发送者Id */
	public native @Cast("int64") long sendUserId(); public native Chat sendUserId(long sendUserId);
	public native @Cast("int8") byte bpursuit(); public native Chat bpursuit(byte bpursuit);  //追一下字段
}
/**本地敏感词表 */
@Namespace("model") @NoOffset public static class st_dbBadWord extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public st_dbBadWord(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public st_dbBadWord(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public st_dbBadWord position(long position) {
        return (st_dbBadWord)super.position(position);
    }

	public st_dbBadWord() { super((Pointer)null); allocate(); }
	private native void allocate();

	/**关键字 */
	public native @StdString  String badword(); public native st_dbBadWord badword(String badword);
	/** 关键字词库id */
	public native @Cast("int64") long bwlibid(); public native st_dbBadWord bwlibid(long bwlibid);
}

/**本地敏感词库表 */
@Namespace("model") @NoOffset public static class st_dbBWLib extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public st_dbBWLib(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public st_dbBWLib(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public st_dbBWLib position(long position) {
        return (st_dbBWLib)super.position(position);
    }

	public st_dbBWLib() { super((Pointer)null); allocate(); }
	private native void allocate();

	/**关键字词库id */
	public native @Cast("int64") long bwlibid(); public native st_dbBWLib bwlibid(long bwlibid);
	/** 关键字词库是否开启 0：关闭 1：开启 */
	public native @Cast("int8") byte bused(); public native st_dbBWLib bused(byte bused);
}
 /*namespace model */

// Parsed from model/Contact.h

// #pragma once
// #include "User.h"
//#include "../extModel/packet.h"
//#include "../extModel/extpacket.h"
// #include <vector>

@Namespace("model") @NoOffset public static class _Contact__isset extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _Contact__isset(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _Contact__isset(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public _Contact__isset position(long position) {
        return (_Contact__isset)super.position(position);
    }

	public _Contact__isset() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("bool") boolean isStar(); public native _Contact__isset isStar(boolean isStar);
	public native @Cast("bool") boolean isVip(); public native _Contact__isset isVip(boolean isVip);
	public native @Cast("bool") boolean pinyin(); public native _Contact__isset pinyin(boolean pinyin);
	public native @Cast("bool") boolean remark(); public native _Contact__isset remark(boolean remark);
	public native @Cast("bool") boolean server(); public native _Contact__isset server(boolean server);
	public native @Cast("bool") boolean team(); public native _Contact__isset team(boolean team);
}
/**联系人 */
@Namespace("model") @NoOffset public static class Contact extends User {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Contact(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Contact(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Contact position(long position) {
        return (Contact)super.position(position);
    }

	public Contact() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void init();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef Contact rhs);
	/**星标好友：1.星标好友，2.不是星标 */
	public native @ByRef OptionalByte isStar(); public native Contact isStar(OptionalByte isStar);
	/**是否是应用 1.是,  2.否 */
	public native @ByRef OptionalByte isApp(); public native Contact isApp(OptionalByte isApp);
	/**是否是隐藏好友 1.是,  2.否 */
	public native @ByRef OptionalByte isHidden(); public native Contact isHidden(OptionalByte isHidden);
	/**免打扰 1为接收提醒, 2表示不提醒仅显示数字, 3为免打扰 */
	public native @ByRef OptionalByte disturbSet(); public native Contact disturbSet(OptionalByte disturbSet);
	/**是否置顶 */
	public native @ByRef OptionalBool isTop(); public native Contact isTop(OptionalBool isTop);
	/**名称拼音 */
	public native @ByRef OptionalString pinyin(); public native Contact pinyin(OptionalString pinyin);
	/**豆豆账号 */
	public native @ByRef OptionalString acountName(); public native Contact acountName(OptionalString acountName);
	/**备注 */
	public native @ByRef OptionalString remark(); public native Contact remark(OptionalString remark);
	/**服务器 */
	public native @ByRef OptionalString server(); public native Contact server(OptionalString server);
	/**生日 */
	public native @ByRef OptionalLong birthday(); public native Contact birthday(OptionalLong birthday);
	/**聊天背景 */
	public native @ByRef OptionalString chatImg(); public native Contact chatImg(OptionalString chatImg);
	/**签名 */
	public native @ByRef OptionalString sign(); public native Contact sign(OptionalString sign);
	/**地区 */
	public native @ByRef OptionalString area(); public native Contact area(OptionalString area);
	/**私信秘钥 */
	public native @ByRef OptionalString privateMsgPwd(); public native Contact privateMsgPwd(OptionalString privateMsgPwd);
	/**邮件 */
	public native @ByRef OptionalStringVector emails(); public native Contact emails(OptionalStringVector emails);
	/**电话 */
	public native @ByRef OptionalStringVector phones(); public native Contact phones(OptionalStringVector phones);
	/**账号 */
	public native @ByRef OptionaAccountTypeVector accounts(); public native Contact accounts(OptionaAccountTypeVector accounts);
	//Optional<std::vector<model::OrganizationInfo> > orgList;    ///组织信息，只有getUserInfoByScene接口返回才会带此数据
}

 /*namespace model */


// Parsed from model/Emoticon.h

// #pragma once
// #include <string>
// #include "SDKTypes.h"
/**表情 */
@Namespace("model") @NoOffset public static class Emoticon extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Emoticon(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Emoticon(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Emoticon position(long position) {
        return (Emoticon)super.position(position);
    }

	public Emoticon() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**整个文件的MD5hashcode码 */
	public native @StdString  String mdCode(); public native Emoticon mdCode(String mdCode);
	/**表情描述 */
	public native @StdString  String depict(); public native Emoticon depict(String depict);
	/**表情创建人 */
	public native @Cast("int64") long userID(); public native Emoticon userID(long userID);
	/**创建时间 */
	public native @Cast("int64") long createTime(); public native Emoticon createTime(long createTime);
	/**表情Url */
	public native @StdString  String mainUrl(); public native Emoticon mainUrl(String mainUrl);
	/**表情属性 1：表情包2：自定义表情 */
	public native @Cast("int8") byte property(); public native Emoticon property(byte property);
	/**表情状态 1：服务器记录该文件被下载或收藏 2：服务器记录该文件被卸载或取消收藏 */
	public native @Cast("int8") byte emoStatus(); public native Emoticon emoStatus(byte emoStatus);
	/**关联表情包Code */
	public native @StdString  String packageCode(); public native Emoticon packageCode(String packageCode);
	/**表情类型 1：静态表情2：动态表情 */
	public native @Cast("int8") byte type(); public native Emoticon type(byte type);
	
	/**表情类目 1人物 2情侣 3动物 4食物 5节日 6网络热点 7征稿活动 8其他 */
	public native @Cast("int8") byte category(); public native Emoticon category(byte category);
	/**表情标签  多个标签用分隔符分开，web端自己定义自己解析，服务只做存储 */
	public native @StdString  String label(); public native Emoticon label(String label);
	public native @StdString  String thumbnailUrl(); public native Emoticon thumbnailUrl(String thumbnailUrl);
	public native @StdString  String meaning(); public native Emoticon meaning(String meaning);
	public native @StdString  String orderNum(); public native Emoticon orderNum(String orderNum);
	public native @StdString  String extendFiled(); public native Emoticon extendFiled(String extendFiled);
	public native @StdString  String extendColumn(); public native Emoticon extendColumn(String extendColumn);
	/** 表情sha256 */
	public native @StdString  String sha256Hash(); public native Emoticon sha256Hash(String sha256Hash);
	/** 是否已读，0表示未读，1表示已读 */
	public native @Cast("int8") byte bRead(); public native Emoticon bRead(byte bRead);
	/** 来源域名加端口 */
	public native @StdString  String domainPort(); public native Emoticon domainPort(String domainPort);
	/** 来源elogo */
	public native @StdString  String elogo(); public native Emoticon elogo(String elogo);
	/** 动态图片本地路径 */
	public native @StdString  String gifPath(); public native Emoticon gifPath(String gifPath);
	/** 静态图片本地路径 */
	public native @StdString  String pngPath(); public native Emoticon pngPath(String pngPath);
	/** 表情存储在sdk的跟路径 */
	public native @StdString  String emotionSdkPath(); public native Emoticon emotionSdkPath(String emotionSdkPath);
}
@Namespace("model") public static class singleEmoticon extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public singleEmoticon() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public singleEmoticon(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public singleEmoticon(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public singleEmoticon position(long position) {
        return (singleEmoticon)super.position(position);
    }

	/** 单个表情MdCode */
	public native @StdString  String mdCode(); public native singleEmoticon mdCode(String mdCode);
	public native @StdString  String thumbnailUrl(); public native singleEmoticon thumbnailUrl(String thumbnailUrl);
	/** 大图地址 */
	public native @StdString  String mainUrl(); public native singleEmoticon mainUrl(String mainUrl);
	/** 含义	 */
	public native @StdString  String meaning(); public native singleEmoticon meaning(String meaning);
}
/**表情包	  */
@Namespace("model") @NoOffset public static class EmoticonPackage extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmoticonPackage(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public EmoticonPackage(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public EmoticonPackage position(long position) {
        return (EmoticonPackage)super.position(position);
    }

	public EmoticonPackage() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @StdString  String mdCode(); public native EmoticonPackage mdCode(String mdCode);
	public native @StdString  String depict(); public native EmoticonPackage depict(String depict);
	public native @Cast("int64") long userID(); public native EmoticonPackage userID(long userID);
	public native @Cast("int64") long createTime(); public native EmoticonPackage createTime(long createTime);
	public native @StdString  String mainUrl(); public native EmoticonPackage mainUrl(String mainUrl);
	public native @Cast("int8") byte property(); public native EmoticonPackage property(byte property);
	public native @Cast("int8") byte packStatus(); public native EmoticonPackage packStatus(byte packStatus);
	public native @StdString  String name(); public native EmoticonPackage name(String name);
	public native @StdString  String bannerUrl(); public native EmoticonPackage bannerUrl(String bannerUrl);
	public native @Cast("int8") byte type(); public native EmoticonPackage type(byte type);
	
	public native @Cast("int8") byte category(); public native EmoticonPackage category(byte category);
	/**表情标签  多个标签用分隔符分开，web端自己定义自己解析，服务只做存储 */
	public native @StdString  String label(); public native EmoticonPackage label(String label);
	/**图标url */
	public native @StdString  String iconUrl(); public native EmoticonPackage iconUrl(String iconUrl);
	/**封面URL */
	public native @StdString  String coverUrl(); public native EmoticonPackage coverUrl(String coverUrl);
	/**表情包说明 */
	public native @StdString  String instruction(); public native EmoticonPackage instruction(String instruction);
	/**排序字段 */
	public native @StdString  String orderNum(); public native EmoticonPackage orderNum(String orderNum);
	/**拓展字段1 */
	public native @StdString  String extendFiled(); public native EmoticonPackage extendFiled(String extendFiled);
	/**拓展字段2 */
	public native @StdString  String extendColumn(); public native EmoticonPackage extendColumn(String extendColumn);
	//std::string emoticonListJson;     ///<关联表情 格式json-list<map>
	/**表情包 */
	public native @ByRef EmoticonVector emoticonList(); public native EmoticonPackage emoticonList(EmoticonVector emoticonList);
	/** 是否已读，0表示未读，1表示已读 */
	public native @Cast("int8") byte bRead(); public native EmoticonPackage bRead(byte bRead);
	/** 来源域名加端口 */
	public native @StdString  String domainPort(); public native EmoticonPackage domainPort(String domainPort);
	/** 来源elogo */
	public native @StdString  String elogo(); public native EmoticonPackage elogo(String elogo);
	/** 表情包存储在sdk的跟路径 */
	public native @StdString  String emotionSdkPath(); public native EmoticonPackage emotionSdkPath(String emotionSdkPath);

}
/**单个查询表情 */
@Namespace("model") public static class querySingleEmoticon extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public querySingleEmoticon() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public querySingleEmoticon(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public querySingleEmoticon(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public querySingleEmoticon position(long position) {
        return (querySingleEmoticon)super.position(position);
    }

	/** 表情包mdCode */
	public native @StdString  String packMdCode(); public native querySingleEmoticon packMdCode(String packMdCode);
	/** 包内单个表情mdCode */
	public native @StdString  String mdCode(); public native querySingleEmoticon mdCode(String mdCode);
}
/**表情页查询结构 */
@Namespace("model") @NoOffset public static class PageQueryEmoticon extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PageQueryEmoticon(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PageQueryEmoticon(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PageQueryEmoticon position(long position) {
        return (PageQueryEmoticon)super.position(position);
    }

	public PageQueryEmoticon() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native void init();
	/**请求页码 */
	public native @Cast("int32") int pageNum(); public native PageQueryEmoticon pageNum(int pageNum);
	/**每页大小 */
	public native @Cast("int16") int pageSize(); public native PageQueryEmoticon pageSize(int pageSize);
	/**总页数 */
	public native @Cast("int64") long totalPage(); public native PageQueryEmoticon totalPage(long totalPage);
	/**总条数 */
	public native @Cast("int64") long totalItems(); public native PageQueryEmoticon totalItems(long totalItems);
	/**当前页数据 */
	public native @ByRef EmoticonPackageVector emotItem(); public native PageQueryEmoticon emotItem(EmoticonPackageVector emotItem);

}
/**表情查询结果结构 */
@Namespace("model") @NoOffset public static class EmoticonResult extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmoticonResult(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public EmoticonResult(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public EmoticonResult position(long position) {
        return (EmoticonResult)super.position(position);
    }

	public EmoticonResult() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**结果编码 801:md5Code不存在，802：md5Code文件已存在 */
	public native int resultCode(); public native EmoticonResult resultCode(int resultCode);
	/**结果信息 */
	public native @StdString  String resultMessage(); public native EmoticonResult resultMessage(String resultMessage);
	/**表情code */
	public native @StdString  String mdCode(); public native EmoticonResult mdCode(String mdCode);
	/**排序 */
	public native int orderNum(); public native EmoticonResult orderNum(int orderNum);
	/**大图 */
	public native @StdString  String mainUrl(); public native EmoticonResult mainUrl(String mainUrl);
	/**缩略图 */
	public native @StdString  String thumbnailUrl(); public native EmoticonResult thumbnailUrl(String thumbnailUrl);
	/**名称 */
	public native @StdString  String name(); public native EmoticonResult name(String name);
	/**两个图片的hash256值 */
	public native @StdString  String shaHash(); public native EmoticonResult shaHash(String shaHash);
	/**1表示新增，2表示删除 */
	public native int status(); public native EmoticonResult status(int status);
	/**1表示表情包，2表示自定义表情 */
	public native int type(); public native EmoticonResult type(int type);
}


@Namespace("model") @NoOffset public static class singleEmoticonResult extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public singleEmoticonResult(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public singleEmoticonResult(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public singleEmoticonResult position(long position) {
        return (singleEmoticonResult)super.position(position);
    }

	public singleEmoticonResult() { super((Pointer)null); allocate(); }
	private native void allocate();
	/** 表情包MdCode */
	public native @StdString  String packMdCode(); public native singleEmoticonResult packMdCode(String packMdCode);
	/** 大图地址 */
	public native @StdString  String mainUrl(); public native singleEmoticonResult mainUrl(String mainUrl);
	/** 含义 */
	public native @StdString  String meaning(); public native singleEmoticonResult meaning(String meaning);
	/** 单个表情MdCode */
	public native @StdString  String mdCode(); public native singleEmoticonResult mdCode(String mdCode);
	/** 表情类型 1：静态表情2：动态表情 */
	public native @Cast("int8") byte type(); public native singleEmoticonResult type(byte type);
}



// Parsed from model/Group.h

// #pragma once
// #include "TinyGroup.h"
/**群组 */
@Namespace("model") @NoOffset public static class Group extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Group(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Group(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Group position(long position) {
        return (Group)super.position(position);
    }

	public Group() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native void init();

	
	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef Group rhs);
	/**群简介 */
	public native @ByRef OptionalString brief(); public native Group brief(OptionalString brief);
	/**群公告 */
	public native @ByRef OptionalString bulletin(); public native Group bulletin(OptionalString bulletin);
	/**群扩展字段 */
	public native @ByRef OptionalString extend(); public native Group extend(OptionalString extend);
	/**创建时间 */
	public native @ByRef OptionalLong createTime(); public native Group createTime(OptionalLong createTime);
	/**关联群ID */
	public native @ByRef OptionalLong relatedGroupId(); public native Group relatedGroupId(OptionalLong relatedGroupId);
	/**关联企业ID，存在此ID则属于企业群 */
	public native @ByRef OptionalLong relatedEntId(); public native Group relatedEntId(OptionalLong relatedEntId);
	/**群成员数量 */
	public native @ByRef OptionalInt memberNums(); public native Group memberNums(OptionalInt memberNums);
	/**是否允许被搜索 */
	public native @ByRef OptionalBool isSearch(); public native Group isSearch(OptionalBool isSearch);
	/**群消息通知详情: 1、开启(显示详情)  2、关闭(显示通知源，隐藏内容)  默认开启 groupMessageContentMode. */
	public native @ByRef OptionalByte groupMessageContentMode(); public native Group groupMessageContentMode(OptionalByte groupMessageContentMode);
	/**个人群消息通知详情: 1、通知详情  2、通知源，隐藏内容  3、完全隐藏 */
	public native @ByRef OptionalByte personalMessageContentMode(); public native Group personalMessageContentMode(OptionalByte personalMessageContentMode);
	/**免打扰 1为接收提醒, 2表示不提醒仅显示数字, 3为免打扰 */
	public native @ByRef OptionalByte disturbSet(); public native Group disturbSet(OptionalByte disturbSet);
	/**私信密码  */
	public native @ByRef OptionalString privateMsgPwd(); public native Group privateMsgPwd(OptionalString privateMsgPwd);
	/**群聊背景  */
	public native @ByRef OptionalString chatImage(); public native Group chatImage(OptionalString chatImage);
	/**群禁言截止时间，-1或0表示不禁言，单位为毫秒  */
	public native @ByRef OptionalLong timeForbidUtil(); public native Group timeForbidUtil(OptionalLong timeForbidUtil);
	/**群信息 */
	public native @ByRef OptionalGroup info(); public native Group info(OptionalGroup info);
}

/**群更新 */
@Namespace("model") @NoOffset public static class GroupUpdate extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupUpdate(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public GroupUpdate(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public GroupUpdate position(long position) {
        return (GroupUpdate)super.position(position);
    }

	public GroupUpdate() { super((Pointer)null); allocate(); }
	private native void allocate();

	/**群名称 */
	public native @ByRef OptionalString groupName(); public native GroupUpdate groupName(OptionalString groupName);
	/**群图标 */
	public native @ByRef OptionalString groupIcon(); public native GroupUpdate groupIcon(OptionalString groupIcon);
	/**群简介 */
	public native @ByRef OptionalString groupBrief(); public native GroupUpdate groupBrief(OptionalString groupBrief);
	/**群公告 */
	public native @ByRef OptionalString groupBulletin(); public native GroupUpdate groupBulletin(OptionalString groupBulletin);
	/**群背景图片 */
	public native @ByRef OptionalString groupBackgroundURL(); public native GroupUpdate groupBackgroundURL(OptionalString groupBackgroundURL);
	/**群是否可以被外部检索 1可以 2不可以 */
	public native @ByRef OptionalByte groupSearch(); public native GroupUpdate groupSearch(OptionalByte groupSearch);
	/**群消息通知详情: 1、开启(显示详情)  2、关闭(显示通知源，隐藏内容)  默认开启 */
	public native @ByRef OptionalByte groupMessageContentMode(); public native GroupUpdate groupMessageContentMode(OptionalByte groupMessageContentMode);
	/**群扩展字段,以json形式,目前：
	* 警种ID： policeTypeID
	* 地域---省份ID：provinceID
	* 地域---市ID： cityID
	* 私信模式：privateMsg：1为开启私信   0表示不允许私信
	* 群文件上传开关 groupFileSwitch: 1开启，2关闭	
	* 群文件上传权限	uploadFileRole :1群管理员，2全员
	*/
	public native @ByRef OptionalString extendProperties(); public native GroupUpdate extendProperties(OptionalString extendProperties);
	/**群密级 */
	public native @ByRef OptionalInt securityLevel(); public native GroupUpdate securityLevel(OptionalInt securityLevel);
	/**提权开关 0关 1开 */
	public native @ByRef OptionalInt powerSwitch(); public native GroupUpdate powerSwitch(OptionalInt powerSwitch);
}

 /*namespace model */


// Parsed from model/LoginInfo.h

// #pragma once

// #include "SDKTypes.h"
// #include <string>
// #include <vector>

public static final int KEEPPASSWD = 2;
public static final int AUTOLOGIN = 4;
/**登陆信息 */
@Namespace("model") @NoOffset public static class LoginInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LoginInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LoginInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LoginInfo position(long position) {
        return (LoginInfo)super.position(position);
    }

	public LoginInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int32") int status(); public native LoginInfo status(int status);
	/**是否记住密码 */
	public native @Cast("int32") int isRemberPass(); public native LoginInfo isRemberPass(int isRemberPass);
	/**自动登录  */
	public native @Cast("int32") int isAutoLogin(); public native LoginInfo isAutoLogin(int isAutoLogin);
	/**用户id */
	public native @Cast("int64") long userId(); public native LoginInfo userId(long userId);
	/**用户类型 */
	public native @Cast("int8") byte userType(); public native LoginInfo userType(byte userType);
	/**上次登陆时间 */
	public native @Cast("int64") long last_login_time(); public native LoginInfo last_login_time(long last_login_time);
    /**服务器 */
    public native @StdString  String server(); public native LoginInfo server(String server);
    /**用户名 */
    public native @StdString  String name(); public native LoginInfo name(String name);
	/**账号 */
	public native @StdString  String account(); public native LoginInfo account(String account);
	public native @StdString  String pwd(); public native LoginInfo pwd(String pwd);
    /**头像 */
    public native @StdString  String user_icon(); public native LoginInfo user_icon(String user_icon);
    /**国家码 */
    public native @StdString  String nation(); public native LoginInfo nation(String nation);
	/**绑定的手机 */
	public native @StdString  String phone(); public native LoginInfo phone(String phone);
	/**绑定的邮箱 */
	public native @StdString  String email(); public native LoginInfo email(String email);
	/**客服信息 */
	public native @StdString  String verImgPath(); public native LoginInfo verImgPath(String verImgPath);
}
/**代理 */
@Namespace("model") @NoOffset public static class NetProxy extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NetProxy(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NetProxy(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public NetProxy position(long position) {
        return (NetProxy)super.position(position);
    }

	public NetProxy() { super((Pointer)null); allocate(); }
	private native void allocate();

	/**0-不使用，１-http1.1  2-http1.0  3-socket4  4-socket5 */
	public native @Cast("int8") byte type(); public native NetProxy type(byte type);
	/**端口 */
	public native @Cast("uint16") int port(); public native NetProxy port(int port);
	/**地址 */
	public native @StdString  String addr(); public native NetProxy addr(String addr);
	/**用户名 */
	public native @StdString  String user(); public native NetProxy user(String user);
	/**密码 */
	public native @StdString  String pw(); public native NetProxy pw(String pw);
}

@Namespace("model") public static class appVerifyInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public appVerifyInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public appVerifyInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public appVerifyInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public appVerifyInfo position(long position) {
        return (appVerifyInfo)super.position(position);
    }

	public native @StdString  String signature(); public native appVerifyInfo signature(String signature);//签名信息 Android需要填写
	public native @StdString  String issuer(); public native appVerifyInfo issuer(String issuer);//发布者 pc和Android需要填写
}
@Namespace("model") @NoOffset public static class PreLogincfg extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PreLogincfg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PreLogincfg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PreLogincfg position(long position) {
        return (PreLogincfg)super.position(position);
    }

	public PreLogincfg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/** 输入 服务器 */
	public native @StdString  String area(); public native PreLogincfg area(String area);
	/** 输入 账号 */
	public native @StdString  String account(); public native PreLogincfg account(String account);
	/** 输出 用户ID  */
	public native @Cast("int64") long userid(); public native PreLogincfg userid(long userid);
	/** 输出 输出预登录结果 */
	public native @StdString  String json(); public native PreLogincfg json(String json);
}

@Namespace("model") public static class LoginStatusInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LoginStatusInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LoginStatusInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LoginStatusInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LoginStatusInfo position(long position) {
        return (LoginStatusInfo)super.position(position);
    }


	public native int status(); public native LoginStatusInfo status(int status);  // 0：没有网络连接 1：没有登录, 但是网络联通 2：正在登录 3：断线重连状态 4：正常状态
	public native int lastLoginCode(); public native LoginStatusInfo lastLoginCode(int lastLoginCode);
}

/**日志级别 */
/** enum model::LogLevel */
public static final int
	sdklog_debug = 0,
	sdklog_trace = 1,
	sdklog_notice = 2,
	sdklog_warn = 3,
	sdklog_err = 4,
	sdklog_all = 5,
	sdklog_none = 6;

// namespace service


// Parsed from model/Member.h

// #pragma once
// #include "User.h"
// #include <string>
// #include <vector>
/**群成员 */
@Namespace("model") @NoOffset public static class Member extends User {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Member(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Member(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Member position(long position) {
        return (Member)super.position(position);
    }

	public Member() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native void init();
	
	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef Member rhs);
	/**群id */
	public native @ByRef OptionalLong groupId(); public native Member groupId(OptionalLong groupId);
	/**分组 */
	public native @ByRef OptionalInt team(); public native Member team(OptionalInt team);
	/**成员类型：1.普通 2.管理员 3.超级管理员 */
	public native @ByRef OptionalByte memberType(); public native Member memberType(OptionalByte memberType);
	/**是否为机器人 */
	public native @ByRef OptionalBool isApp(); public native Member isApp(OptionalBool isApp);
	/**群备注 */
	public native @ByRef OptionalString remark(); public native Member remark(OptionalString remark);
	/**拼音 */
	public native @ByRef OptionalString pingyin(); public native Member pingyin(OptionalString pingyin);
	/**群成员禁言的截止时间，-1或0表示不禁言，毫秒为单位 */
	public native @ByRef OptionalLong timeForbidUtil(); public native Member timeForbidUtil(OptionalLong timeForbidUtil);

}
/**
* \struct st_shieldGroupMessage
* \brief  群信息提示方式
*/
@Namespace("model") @NoOffset public static class ShieldGroupMessage extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ShieldGroupMessage(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ShieldGroupMessage(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ShieldGroupMessage position(long position) {
        return (ShieldGroupMessage)super.position(position);
    }

	public ShieldGroupMessage() { super((Pointer)null); allocate(); }
	private native void allocate();
	/** PC群消息设置 1：提示接收 2：不提示，显示数目 3：屏蔽消息 4：时间段接收 5：插电接收 pcMsgSet. */
	public native @Cast("int8") byte pcMsgSet(); public native ShieldGroupMessage pcMsgSet(byte pcMsgSet);
	/** phone/pad群消息设置 1：提示接收 2：不提示，显示数目 3：屏蔽消息 4：时间段接收 5：插电接收 phoneMsgSet. */
	public native @Cast("int8") byte phoneMsgSet(); public native ShieldGroupMessage phoneMsgSet(byte phoneMsgSet);
	/** HTML群消息设置 1：提示接收 2：不提示，显示数目 3：屏蔽消息 4：时间段接收 5：插电接收 htmlMsgSet. */
	public native @Cast("int8") byte htmlMsgSet(); public native ShieldGroupMessage htmlMsgSet(byte htmlMsgSet);
	/** 群通知消息内容模式: 1、通知详情  2、通知源，隐藏内容  3、完全隐藏 , 默认开启模式1 */
	public native @Cast("int8") byte groupMessageContentMode(); public native ShieldGroupMessage groupMessageContentMode(byte groupMessageContentMode);
	/** 接收消息时间段 msgRecvTime. */
	public native @StdString  String msgRecvTime(); public native ShieldGroupMessage msgRecvTime(String msgRecvTime);
}
@Namespace("model") public static class MemberDetailInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MemberDetailInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MemberDetailInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MemberDetailInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MemberDetailInfo position(long position) {
        return (MemberDetailInfo)super.position(position);
    }

	public native @Cast("int64") long birthday(); public native MemberDetailInfo birthday(long birthday);
	public native @StdString  String name(); public native MemberDetailInfo name(String name);   //用户名称
	public native @StdString  String nickID(); public native MemberDetailInfo nickID(String nickID);
	public native @StdString  String vSign(); public native MemberDetailInfo vSign(String vSign);  //< 是否为v标群，0不是 1是 只有当群成员为用户自己时使用	
	public native @ByRef StringVector phones(); public native MemberDetailInfo phones(StringVector phones);
	public native @ByRef StringVector emails(); public native MemberDetailInfo emails(StringVector emails);
	public native @ByRef Member info(); public native MemberDetailInfo info(Member info);
	/**
	* \brief 如果获取的群成员是自己的话，这个字段的值有效。
	*/
	public native @ByRef ShieldGroupMessage shield(); public native MemberDetailInfo shield(ShieldGroupMessage shield);
}
/*namespace model */


// Parsed from model/Msg.h

// #pragma once
// #include "SDKTypes.h"

// #include <vector>
// #include <string>
// #include <string.h>
@MemberGetter public static native @Cast("const int64") long MSGMEMSIZE();
/**消息类型 */
/** enum model::MSG_TYPE */
public static final int
	/**文本消息 */
	MSG_TYPE_TEXT = 2,
	/**语言消息 */
	MSG_TYPE_AUDIO = 3,
	/**位置消息 */
	MSG_TYPE_POSITION = 4,
	/**图片消息 */
	MSG_TYPE_IMG = 5,
	/**文件消息 */
	MSG_TYPE_FILE = 6,
	/**名片消息 */
	MSG_TYPE_CARD = 7,
	/**弱提示消息 */
	MSG_TYPE_TIP = 8,
	/**网页链接消息 */
	MSG_TYPE_WEB = 9,
	/**图文消息 */
	MSG_TYPE_PICTEXT = 12,
	/**组合消息 */
	MSG_TYPE_COMBINE = 13,
	/**回执消息 */
	MSG_TYPE_REVOKE = 18,
	/**动态表情消息 */
	MSG_TYPE_DYNEXPRESSION = 19,
	/**音頻消息 */
	MSG_TYPE_VOICE = 16,
	/**視頻消息 */
	MSG_TYPE_VIDEIO = 14,
	/**視頻会议消息 */
	MSG_TYPE_CONFER = 15,
	/**任务消息 */
	MSG_TYPE_TASK = 17,
	/**端到端消息 */
	MSG_TYPE_E2EE = 20,
	/**模版消息 */
	MSG_TYPE_TEMPL = 26,
	/**新动态表情 */
	MSG_TYPE_DYNEXPRESSION2 = 27,
	/**9图消息 */
	MSG_TYPE_NINEBLOCK = 28,
	/**邮件消息 */
	MSG_TYPE_MAIL = 31,
	/**未读状态消息 */
	MSG_TYPE_UNREADSTATE = 34,
	/**记事本消息 */
	MSG_TYPE_NOTEBOOK = 35,
	/**应用分享消息 */
	MSG_TYPE_APPSHARE = 36,
	/**潜水者消息 */
	MSG_TYPE_DIVERS = 37,
	/**运动轨迹消息 */
	MSG_TYPE_TRACK = 38,
	/**万能消息，具体看subMsgType */
	MSG_TYPE_UNIVERSAL = 64,
	/**客服客户直接的消息，实际消息类型在msgProperties, realMsgType */
	MSG_TYPE_CUSTOM = 66,
	/**新待办模版消息 */
	MSG_TYPE_ACTIONCARD = 71,
	/**废弃 */
	MSG_TYPE_REDPACKET = 88,
	/**微视频消息	 */
	MSG_TYPE_MINIVEDIO = 89,
	/**系统消息 */
	MSG_TYPE_SYS = 100,
	/**红包消息 */
	MSG_TYPE_REDPACKETNEW = 118;

/**消息子类型 */
/** enum model::SubMessageType */
public static final int
	sub_groupAnnouncement = 1,     //群公告推送msgType64号消息，subMsgtype=1
	sub_buddyApply = 201,				//好友申请通知
	sub_agreeBuddyApply = 202,			//同意好友申请通知
	sub_rejectBuddyApply = 203,			//拒绝好友申请通知
	sub_groupApply = 301,				//申请入群
	sub_adminAgreeGroupAplly = 302,     //管理员同意入群
	sub_adminRejectGroupAplly = 303,    //管理员拒绝入群
	sub_inviteEnterGroup = 401,			//邀请入群
	sub_agreeEnterGroup = 402,			//用户同意入群
	sub_rejectEnterGroup = 403,        //用户拒绝入群
	sub_adminKickMember = 501,			//管理员踢出群成员
	sub_dissolveGroup = 503,			//解散群
	sub_groupMemberExit = 504;         //群成员退出

/**消息状态 */
/** enum model::MSG_STATE */
public static final int
	/** 附加资源失败 */
	MSG_TYPEX_UPLOAD_FAILED = 0x100,
	/** 发送消息失败 */
	MSG_TYPEX_SEND_ERROR = 0x200,
	/** 下载失败 */
	MSG_TYPEX_DOWNLOAD_FAILED = 0x400,
	/** 正在发送消息 */
	MSG_TYPEX_SENDING = 0x1000,
	/** 正在上传附件 */
	MSG_TYPEX_UPLOADING = 0x2000;

@Namespace("model") @NoOffset public static class FailAttchment extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FailAttchment(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FailAttchment(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public FailAttchment position(long position) {
        return (FailAttchment)super.position(position);
    }

	public FailAttchment() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**发送失败且非一步发送时 存储的是文件大小 */
	public native @Cast("int64") long filesize(); public native FailAttchment filesize(long filesize);
	/**发送失败且非一步发送时 存储的是文件本地路径 */
	public native @StdString  String filePath(); public native FailAttchment filePath(String filePath);
	/**发送失败且非一步发送时 存储的是文件名 */
	public native @StdString  String fileName(); public native FailAttchment fileName(String fileName);
}

/**快照信息 */
@Namespace("model") @NoOffset public static class SnapshotInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SnapshotInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SnapshotInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SnapshotInfo position(long position) {
        return (SnapshotInfo)super.position(position);
    }

	public SnapshotInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long msgId(); public native SnapshotInfo msgId(long msgId);			//消息ID
	public native @Cast("int64") long snapshotId(); public native SnapshotInfo snapshotId(long snapshotId);		//群快照ID
}


@Namespace("model") @NoOffset public static class MsgUnreadCounter extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgUnreadCounter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgUnreadCounter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgUnreadCounter position(long position) {
        return (MsgUnreadCounter)super.position(position);
    }

	public MsgUnreadCounter() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long messageId(); public native MsgUnreadCounter messageId(long messageId);
	public native @Cast("int32") int unreadCount(); public native MsgUnreadCounter unreadCount(int unreadCount);
	/**最大消息未读数 */
	public native @Cast("int32") int maxUnreadCount(); public native MsgUnreadCounter maxUnreadCount(int maxUnreadCount);
	/**群快照ID */
	public native @Cast("int64") long snapshotId(); public native MsgUnreadCounter snapshotId(long snapshotId);
}


/**PC登录基本信息 */
@Namespace("model") @NoOffset public static class MsgApp extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgApp(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgApp(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgApp position(long position) {
        return (MsgApp)super.position(position);
    }

	public MsgApp() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("int8") byte pcType(); public native MsgApp pcType(byte pcType);
	public native @Cast("int16") int flag(); public native MsgApp flag(int flag);
	public native @Cast("int64") long loginport(); public native MsgApp loginport(long loginport);
	public native @StdString  String loginIp(); public native MsgApp loginIp(String loginIp);
	public native @StdString  String appVersion(); public native MsgApp appVersion(String appVersion);		//应用版本号，如"1.5.0"  *必须设置
	public native @StdString  String deviceInfo(); public native MsgApp deviceInfo(String deviceInfo);		//设备信息 如"pc-windows"  *必须设置
	public native @StdString  String mac(); public native MsgApp mac(String mac);			//mac地址  windows,mac,linux平台会自动获取，其它平台需手动设置
}


/**消息基类 */
@Namespace("model") @NoOffset public static class Msg extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Msg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Msg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Msg position(long position) {
        return (Msg)super.position(position);
    }

	public Msg() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef Msg rhs);
	/**0x01为阅后即焚  */
	public native @Cast("int8") byte activeType(); public native Msg activeType(byte activeType);
	//int8  isBurn;            ///<0x01为阅后即焚 
	/**设备类型 */
	public native @Cast("int8") byte deviceType(); public native Msg deviceType(byte deviceType);
	/**本地不存储消息  0为存储，1为不存储	 */
	public native @Cast("int8") byte noStore(); public native Msg noStore(byte noStore);
	/**是否是私信   0不是 1是 */
	public native @Cast("int8") byte isPrivateMsg(); public native Msg isPrivateMsg(byte isPrivateMsg);
	public native @Cast("int8") byte msgRemindMode(); public native Msg msgRemindMode(byte msgRemindMode);		//与0x0F 0.免打扰 1.提醒始终有声音  2.提醒始终无声音  3.提醒  4.不提醒，仅显示条目 5.根据免打扰时间段判断是否免打扰
							//与 0xF0, 1、通知详情  2、通知源，隐藏内容  3、完全隐藏
	/**标记已处理 */
	public native @Cast("bool") boolean deal(); public native Msg deal(boolean deal);
	public native @Cast("bool") boolean isOri(); public native Msg isOri(boolean isOri); /**是否自定义 */
	/**消息类型 */
	public native int msgType(); public native Msg msgType(int msgType);
	/** 消息子类型 */
	public native int subType(); public native Msg subType(int subType);
	/**时区 */
	public native int timeZone(); public native Msg timeZone(int timeZone);
	public native int isFeather(); public native Msg isFeather(int isFeather);

	/**未读数量 */
	public native @Cast("int16") int unReadCount(); public native Msg unReadCount(int unReadCount);
	/**最大未读数量 */
	public native @Cast("int16") int maxUnReadCount(); public native Msg maxUnReadCount(int maxUnReadCount);
	/**群快照ID */
	public native @Cast("int64") long snapshotId(); public native Msg snapshotId(long snapshotId);
	/**消息ID */
	public native @Cast("int64") long msgId(); public native Msg msgId(long msgId);
	/**会话者ID（群或用户等） */
	public native @Cast("int64") long targetId(); public native Msg targetId(long targetId);
	/**本地ID */
	public native @Cast("int64") long localId(); public native Msg localId(long localId);
	/**发送者ID */
	public native @Cast("int64") long fromId(); public native Msg fromId(long fromId);
	/**接收者ID */
	public native @Cast("int64") long toId(); public native Msg toId(long toId);
	/**关联消息ID */
	public native @Cast("int64") long relatedMsgId(); public native Msg relatedMsgId(long relatedMsgId);
	/**上一条消息ID */
	public native @Cast("int64") long lastMsgId(); public native Msg lastMsgId(long lastMsgId);
	/**消息发送的时间 */
	public native @Cast("int64") long time(); public native Msg time(long time);
	/**议题ID，只在群聊时使用 */
	public native @Cast("int64") long issueId(); public native Msg issueId(long issueId);
	/**议题创建者 */
	public native @Cast("int64") long issueCreater(); public native Msg issueCreater(long issueCreater);
	/**议题操作 1.回复 2.创建 3.删除 */
	public native @Cast("int8") byte issueOperType(); public native Msg issueOperType(byte issueOperType);
	public native @Cast("int64") long purmsgId(); public native Msg purmsgId(long purmsgId);
	
	/**会话来源ID 1_groupID表示传的群ID，2_orgID表示传的组织ID */
	public native @StdString  String sourceId(); public native Msg sourceId(String sourceId);
	/**消息内容  */
	public native @StdString  String body(); public native Msg body(String body);
	/**消息属性 */
	public native @StdString  String msgProperties(); public native Msg msgProperties(String msgProperties);
	/**格式 */
	public native @StdString  String format(); public native Msg format(String format);
	/**秘聊时相关的用户ID */
	public native @ByRef LongVector relatedUsers(); public native Msg relatedUsers(LongVector relatedUsers);
	/**\人员列表 */
	public native @ByRef LongVector limitRange(); public native Msg limitRange(LongVector limitRange);
	/**追一下消息的相关的用户ID */
	public native @ByRef LongVector pursuitUsers(); public native Msg pursuitUsers(LongVector pursuitUsers);
	public native @StdString  String loginfoPath(); public native Msg loginfoPath(String loginfoPath); /**发送消息，登录信息路径。仅发送时使用 */
	/**用户名 组合消息和系统消息使用 */
	public native @StdString  String userName(); public native Msg userName(String userName);
	/**用户头像 组合消息  */
	public native @StdString  String userPic(); public native Msg userPic(String userPic);

	public native @StdString  String preDefined(); public native Msg preDefined(String preDefined); /**自定义信息 */
	/**鸡毛信语言 */
	public native @StdString  String languageType(); public native Msg languageType(String languageType);
	/** 议题名称 */
	public native @StdString  String issueName(); public native Msg issueName(String issueName);
	//std::string oriBody;		///<消息内容 
	//std::string oriMsgProperties;		///<消息属性必须是json形式
	/**是否是客服客户之间的66号消息 0.否 1.是 */
	public native @Cast("int8") byte isCustom(); public native Msg isCustom(byte isCustom);
	/**发送消息用，客服给客户发消息时用，传公众号的appId */
	public native @Cast("int64") long realTargetId(); public native Msg realTargetId(long realTargetId);
	/**推送标识位，仅在收消息推送时生效 */
	public native @Cast("int64") long notifyFlag(); public native Msg notifyFlag(long notifyFlag);
	public native int securityLevel(); public native Msg securityLevel(int securityLevel);
	public native @Cast("int8") byte isContainSensitiveKeyword(); public native Msg isContainSensitiveKeyword(byte isContainSensitiveKeyword); //是否包含敏感词  0不包含，1包含
}

/**文本消息 */
@Namespace("model") @NoOffset public static class MsgText extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgText(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgText(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgText position(long position) {
        return (MsgText)super.position(position);
    }

	public MsgText() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgText(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgText rhs);
	/**是否是机器人消息 */
	public native @Cast("bool") boolean isRbtMsg(); public native MsgText isRbtMsg(boolean isRbtMsg);
	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native MsgText isDelay(boolean isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native MsgText delayTime(long delayTime);
	/**是否阅后回执 */
	public native @Cast("bool") boolean isReceipt(); public native MsgText isReceipt(boolean isReceipt);
	/**消息是抖一抖或阅后回执，且此消息体最后是英文小于号<结尾的 */
	public native @Cast("bool") boolean isReceiptAll(); public native MsgText isReceiptAll(boolean isReceiptAll);
	public native int fontSize(); public native MsgText fontSize(int fontSize);
	/**敏感词类型(发送不用传) */
	public native @Cast("int8") byte bwdType(); public native MsgText bwdType(byte bwdType);
	/**是否已播放过gif 0.播放过或不需播放 1.需要播放,播放后通过updateMsg函数更新(文本消息中含有生日快乐等词汇) */
	public native @Cast("int8") byte gifPlayed(); public native MsgText gifPlayed(byte gifPlayed);
	/**橡皮擦消息区分清除消息的范围（scope取值沿用现有指令消息内容today，all） */
	public native @StdString  String scope(); public native MsgText scope(String scope);
	/**敏感词集合(发送不用传) */
	public native @ByRef StringVector bwds(); public native MsgText bwds(StringVector bwds);
}


/**端到端消息 */
@Namespace("model") @NoOffset public static class MsgE2E extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgE2E(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgE2E(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgE2E position(long position) {
        return (MsgE2E)super.position(position);
    }

	public MsgE2E() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgE2E(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgE2E rhs);
	/**是否是机器人消息 */
	public native @Cast("bool") boolean isRbtMsg(); public native MsgE2E isRbtMsg(boolean isRbtMsg);
	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native MsgE2E isDelay(boolean isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native MsgE2E delayTime(long delayTime);
	/**是否阅后回执 */
	public native @Cast("bool") boolean isReceipt(); public native MsgE2E isReceipt(boolean isReceipt);
	/**消息是抖一抖或阅后回执，且此消息体最后是英文小于号<结尾的 */
	public native @Cast("bool") boolean isReceiptAll(); public native MsgE2E isReceiptAll(boolean isReceiptAll);
	public native int fontSize(); public native MsgE2E fontSize(int fontSize);
	/**敏感词类型(发送不用传) */
	public native @Cast("int8") byte bwdType(); public native MsgE2E bwdType(byte bwdType);
	/**是否已播放过gif 0.播放过或不需播放 1.需要播放,播放后通过updateMsg函数更新(文本消息中含有生日快乐等词汇) */
	public native @Cast("int8") byte gifPlayed(); public native MsgE2E gifPlayed(byte gifPlayed);
	/**敏感词集合(发送不用传) */
	public native @ByRef StringVector bwds(); public native MsgE2E bwds(StringVector bwds);
	public native @Cast("int64") long msgCode(); public native MsgE2E msgCode(long msgCode);         /**错误码 */

}

@Namespace("model") public static class MsgDivers extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgDivers(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgDivers(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgDivers position(long position) {
        return (MsgDivers)super.position(position);
    }

	public MsgDivers() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgDivers(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

}

@Namespace("model") @NoOffset public static class MsgSys extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgSys(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgSys(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgSys position(long position) {
        return (MsgSys)super.position(position);
    }

	public MsgSys() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgSys(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	/** 标识一个请求的id */
	public native @Cast("int64") long applicationId(); public native MsgSys applicationId(long applicationId);
	/** 接收者ID  */
	public native @Cast("int64") long receiveId(); public native MsgSys receiveId(long receiveId);
	/** 接收者名称 */
	public native @StdString  String receiveName(); public native MsgSys receiveName(String receiveName);
	/** 接受者头像(加好友时有效) */
	public native @StdString  String receiveIcon(); public native MsgSys receiveIcon(String receiveIcon);
	/** 发送者ID */
	public native @Cast("int64") long senderId(); public native MsgSys senderId(long senderId);
	/** 发送者姓名 */
	public native @StdString  String senderName(); public native MsgSys senderName(String senderName);
	/** 发送者头像(加好友时有效) */
	public native @StdString  String senderIcon(); public native MsgSys senderIcon(String senderIcon);
	/** 一次完整的系统消息触发者ID 用户名在基类中 (加群时有效) */
	public native @Cast("int64") long userId(); public native MsgSys userId(long userId);
	/** 群ID(加群时有效) */
	public native @Cast("int64") long groupId(); public native MsgSys groupId(long groupId);
	/** 群名(加群时有效) */
	public native @StdString  String groupName(); public native MsgSys groupName(String groupName);
	/** 群头像(加群时有效) */
	public native @StdString  String groupIcon(); public native MsgSys groupIcon(String groupIcon);
}

/**音頻消息 */
@Namespace("model") @NoOffset public static class MsgVoice extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgVoice(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgVoice(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgVoice position(long position) {
        return (MsgVoice)super.position(position);
    }

	public MsgVoice() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgVoice(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgVoice rhs);
	public native int extendMsgType(); public native MsgVoice extendMsgType(int extendMsgType);
	public native @StdString  String session(); public native MsgVoice session(String session);
}
/**視頻消息 */
@Namespace("model") @NoOffset public static class MsgVedio extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgVedio(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgVedio(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgVedio position(long position) {
        return (MsgVedio)super.position(position);
    }

	public MsgVedio() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgVedio(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	
	public native @StdString  String channelID(); public native MsgVedio channelID(String channelID);
	public native @StdString  String isSipChat(); public native MsgVedio isSipChat(String isSipChat);//1,音频 4，视频 5，p2p  (只适用单点和p2p)
	public native @StdString  String videoType(); public native MsgVedio videoType(String videoType);
	public native @StdString  String videostatus(); public native MsgVedio videostatus(String videostatus);
	public native @StdString  String key(); public native MsgVedio key(String key);
	public native @StdString  String version(); public native MsgVedio version(String version);//没值的是 单点音视频 或者 p2p; 有值  "rtc@1.0.0"  ///rtc协议版本  "agora@1.0.0" ///声网协议版本
    public native @StdString  String msgModel(); public native MsgVedio msgModel(String msgModel);
    public native @StdString  String msgInfo(); public native MsgVedio msgInfo(String msgInfo);
}
/**位置消息 */
@Namespace("model") @NoOffset public static class MsgPosition extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgPosition(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgPosition(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgPosition position(long position) {
        return (MsgPosition)super.position(position);
    }

	public MsgPosition() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgPosition(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgPosition rhs);
	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native MsgPosition isDelay(boolean isDelay);
	/**是否阅后回执 */
	public native @Cast("bool") boolean isReceipt(); public native MsgPosition isReceipt(boolean isReceipt);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native MsgPosition delayTime(long delayTime);
	/**地名 */
	public native @StdString  String name(); public native MsgPosition name(String name);
	/**纬度 */
	public native double latitude(); public native MsgPosition latitude(double latitude);
	/**经度 */
	public native double longitude(); public native MsgPosition longitude(double longitude);
}
/**文件消息 */
@Namespace("model") @NoOffset public static class MsgFile extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgFile(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgFile(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgFile position(long position) {
        return (MsgFile)super.position(position);
    }

	public MsgFile() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgFile(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgFile rhs);

	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native MsgFile isDelay(boolean isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native MsgFile delayTime(long delayTime);
	/**是否阅后回执 */
	public native @Cast("bool") boolean isReceipt(); public native MsgFile isReceipt(boolean isReceipt);
	/**文件 */
	public native int states(); public native MsgFile states(int states);
	/**文件大小   */
	public native @Cast("int64") long size(); public native MsgFile size(long size);
	/**文件ID */
	public native @Cast("int64") long fileId(); public native MsgFile fileId(long fileId);
	/**文件名   */
	public native @StdString  String fileName(); public native MsgFile fileName(String fileName);
	/**文件本地路径   */
	public native @StdString  String filePath(); public native MsgFile filePath(String filePath);
	/**加密KEY */
	public native @StdString  String encryptKey(); public native MsgFile encryptKey(String encryptKey);
	/**只发送秘钥，不进行加密 0.加密文件 1.不实际加密文件  */
	public native @Cast("int8") byte sendPasswdWithoutEncrypt(); public native MsgFile sendPasswdWithoutEncrypt(byte sendPasswdWithoutEncrypt);
	/**文件URL	 一步发送消息时不赋值 */
	public native @StdString  String url(); public native MsgFile url(String url);
	/** 标示文件类型 如gif */
	public native @StdString  String fileTypeName(); public native MsgFile fileTypeName(String fileTypeName);
	public native @Cast("int32") int docID(); public native MsgFile docID(int docID);       /**是否加密 */
	/**是否是文件夹 0,不是 1,是 */
	public native @Cast("int8") byte isFolder(); public native MsgFile isFolder(byte isFolder);
	public native @Cast("int64") long validity(); public native MsgFile validity(long validity);          /**附件有效期 */

	/**是否是老的形式(非一步发送) */
	public native @Cast("bool") boolean isOld(); public native MsgFile isOld(boolean isOld);
	/**是否断点上传(一步发消息时使用) */
	public native @Cast("bool") boolean isResume(); public native MsgFile isResume(boolean isResume);
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native MsgFile isOverdue(byte isOverdue);
	/** MD5校验码 */
	public native @StdString  String md5Code(); public native MsgFile md5Code(String md5Code);
	
	//以下iOS专用字段
	/** 相对路径 */
	public native @StdString  String relaPath(); public native MsgFile relaPath(String relaPath);
	/**敏感词类型 */
	public native @Cast("int8") byte bwdType(); public native MsgFile bwdType(byte bwdType);
	/**敏感词集合 */
	public native @ByRef StringVector bwds(); public native MsgFile bwds(StringVector bwds);
}


/**图片消息 */
@Namespace("model") @NoOffset public static class MsgImg extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgImg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgImg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgImg position(long position) {
        return (MsgImg)super.position(position);
    }

	public MsgImg() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgImg(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgImg rhs);
	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native MsgImg isDelay(boolean isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native MsgImg delayTime(long delayTime);
	/**是否阅后回执 */
	public native @Cast("bool") boolean isReceipt(); public native MsgImg isReceipt(boolean isReceipt);
	/**图像宽度 */
	public native int width(); public native MsgImg width(int width);
	/**图像高度 */
	public native int height(); public native MsgImg height(int height);
	/**缩略图URL 一步发送消息时不赋值 */
	public native @StdString  String thumbUrl(); public native MsgImg thumbUrl(String thumbUrl);
	/**大图URL  一步发送消息时不赋值 */
	public native @StdString  String mainUrl(); public native MsgImg mainUrl(String mainUrl);
	/**缩略图本地地址 一步发送消息时使用 */
	public native @StdString  String thumbPath(); public native MsgImg thumbPath(String thumbPath);
	/**大图本地地址 一步发送消息时使用 */
	public native @StdString  String mainPath(); public native MsgImg mainPath(String mainPath);
	/**加密KEY */
	public native @StdString  String encryptKey(); public native MsgImg encryptKey(String encryptKey);
	/**只发送秘钥，不进行加密 0.加密文件 1.不实际加密文件  */
	public native @Cast("int8") byte sendPasswdWithoutEncrypt(); public native MsgImg sendPasswdWithoutEncrypt(byte sendPasswdWithoutEncrypt);
	/**文件名   */
	public native @StdString  String fileName(); public native MsgImg fileName(String fileName);
	/**是否是指令消息 */
	public native @Cast("bool") boolean isCmd(); public native MsgImg isCmd(boolean isCmd);
	/**图片描述 */
	public native @StdString  String imageContents(); public native MsgImg imageContents(String imageContents);
	public native @Cast("int32") int docID(); public native MsgImg docID(int docID);       /**是否加密 */
	public native @Cast("int64") long validity(); public native MsgImg validity(long validity);    /**附件有效期 */
	/**文件大小   */
	public native @Cast("int64") long size(); public native MsgImg size(long size);
	public native @StdString  String thumBbinary(); public native MsgImg thumBbinary(String thumBbinary);  /**缩略图二进制 */

	/**九宫格消息使用 */
	public native @Cast("int64") long buddyId(); public native MsgImg buddyId(long buddyId);
	/**是否是老的形式(非一步发送) */
	public native @Cast("bool") boolean isOld(); public native MsgImg isOld(boolean isOld);

	/**敏感词类型 */
	public native @Cast("int8") byte bwdType(); public native MsgImg bwdType(byte bwdType);
	/**敏感词集合 */
	public native @ByRef StringVector bwds(); public native MsgImg bwds(StringVector bwds);
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native MsgImg isOverdue(byte isOverdue);
	public native @Cast("int8") byte isOriImg(); public native MsgImg isOriImg(byte isOriImg);    //是否是原图，0、不是 1、是

	public native @StdString  String md5Code(); public native MsgImg md5Code(String md5Code);	//原图MD5值，校验用，发图片时不用传
	public native @StdString  String thumbMd5(); public native MsgImg thumbMd5(String thumbMd5);	//缩略图Md5值

	//以下iOS专用字段
	/** 相对路径 */
	public native @StdString  String relaThumbPath(); public native MsgImg relaThumbPath(String relaThumbPath);
	public native @StdString  String relaPath(); public native MsgImg relaPath(String relaPath);
}

/**动态表情 */
@Namespace("model") public static class MsgDynExpression extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgDynExpression(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgDynExpression(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgDynExpression position(long position) {
        return (MsgDynExpression)super.position(position);
    }

	public MsgDynExpression() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgDynExpression(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);
}

@Namespace("model") @NoOffset public static class MsgCard extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgCard(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgCard(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgCard position(long position) {
        return (MsgCard)super.position(position);
    }

	public MsgCard() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgCard(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native MsgCard isDelay(boolean isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native MsgCard delayTime(long delayTime);
	/**是否阅后回执 */
	public native @Cast("bool") boolean isReceipt(); public native MsgCard isReceipt(boolean isReceipt);
	/**名片url */
	public native @StdString  String mediaUrl(); public native MsgCard mediaUrl(String mediaUrl);
}
/**tip消息 */
@Namespace("model") @NoOffset public static class MsgTip extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgTip(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgTip(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgTip position(long position) {
        return (MsgTip)super.position(position);
    }

	public MsgTip() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgTip(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);
	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgTip rhs);

	/**tip 类型 */
	public native int tipType(); public native MsgTip tipType(int tipType);
	/**操作类型 */
	public native int operType(); public native MsgTip operType(int operType);
	/**时间 */
	public native @StdString  String tipTime(); public native MsgTip tipTime(String tipTime);
	/**操作userId */
	public native @StdString  String operUser(); public native MsgTip operUser(String operUser);
	/**用户信息 */
	public native @StdString  String userInfo(); public native MsgTip userInfo(String userInfo);
	/**文件信息 */
	public native @StdString  String fileInfo(); public native MsgTip fileInfo(String fileInfo);
	public native @StdString  String status(); public native MsgTip status(String status);//消息状态
	/**群禁言操作标示：1，解除群禁言 2，设置群禁言 3，解除群成员禁言 4，设置群成员禁言；目前因为msgProperty中该字段过于简单，容易被复用，先设置数据为0提示用户有这个值，msgProperty取值，json字段operate */
	public native int forbidOperateType(); public native MsgTip forbidOperateType(int forbidOperateType);
	/**群禁言操作人类型：1，普通用户 2，管理员 3，群主；目前因为msgProperty中该字段过于简单，容易被复用，先设置数据为0提示用户有这个值，msgProperty取值，json字段operUserType */
	public native int forbidOperUserType(); public native MsgTip forbidOperUserType(int forbidOperUserType);
}

/**网页消息 */
@Namespace("model") @NoOffset public static class MsgWeb extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgWeb(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgWeb(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgWeb position(long position) {
        return (MsgWeb)super.position(position);
    }

	public MsgWeb() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgWeb(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);
	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgWeb rhs);

	/**网页内容标题 */
	public native @StdString  String title(); public native MsgWeb title(String title);
	/**网页链接地址 */
	public native @StdString  String url(); public native MsgWeb url(String url);
	/**网页内容第一张图片 */
	public native @StdString  String img(); public native MsgWeb img(String img);
	/**网页内容摘要 */
	public native @StdString  String desc(); public native MsgWeb desc(String desc);
}

/**回执消息 */
@Namespace("model") @NoOffset public static class MsgRevoke extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgRevoke(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgRevoke(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgRevoke position(long position) {
        return (MsgRevoke)super.position(position);
    }

    public MsgRevoke() { super((Pointer)null); allocate(); }
    private native void allocate();
    public MsgRevoke(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
    private native void allocate(@ByRef Msg msg);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgRevoke rhs);
	/**id */
	public native @Cast("int64") long revokeMsgId(); public native MsgRevoke revokeMsgId(long revokeMsgId);
    /**是否管理员撤回 1-是 0-否 */
    public native @Cast("int8") byte adminRevoke(); public native MsgRevoke adminRevoke(byte adminRevoke);
	/** 撤回的消息的body(只有撤回文本消息时使用，用于撤回消息重编辑) */
	public native @StdString  String revokedBody(); public native MsgRevoke revokedBody(String revokedBody);
}
/**音频消息 */
@Namespace("model") @NoOffset public static class MsgAudio extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgAudio(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgAudio(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgAudio position(long position) {
        return (MsgAudio)super.position(position);
    }

	public MsgAudio() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgAudio(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);
	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgAudio rhs);

	/**时长 */
	public native @Cast("int32") int mediaTime(); public native MsgAudio mediaTime(int mediaTime);
	/**文件名 */
	public native @StdString  String fileName(); public native MsgAudio fileName(String fileName);
	/**路径 */
	public native @StdString  String meidaUrl(); public native MsgAudio meidaUrl(String meidaUrl);
	/**只发送秘钥，不进行加密 0.加密文件 1.不实际加密文件  */
	public native @Cast("int8") byte sendPasswdWithoutEncrypt(); public native MsgAudio sendPasswdWithoutEncrypt(byte sendPasswdWithoutEncrypt);
	/**加密KEY */
	public native @StdString  String encryptKey(); public native MsgAudio encryptKey(String encryptKey);
	/**ui层用，标志是否需要显示小红点 0、不需要 1、需要  */
	public native int status(); public native MsgAudio status(int status);
	public native @StdString  String localPath(); public native MsgAudio localPath(String localPath);		//音频本地路径 
	public native @Cast("int64") long validity(); public native MsgAudio validity(long validity);      /**附件有效期 */
	/**文件大小   */
	public native @Cast("int64") long size(); public native MsgAudio size(long size);

	/**是否是老的消息(非一步发送) */
	public native @Cast("bool") boolean isOld(); public native MsgAudio isOld(boolean isOld);
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native MsgAudio isOverdue(byte isOverdue);
	public native @StdString  String md5Code(); public native MsgAudio md5Code(String md5Code);	//加密后MD5值，校验用，发语音时不用传

	//以下iOS专用字段
	/** 相对路径 */
	public native @StdString  String relaPath(); public native MsgAudio relaPath(String relaPath);
}


/**图文消息 */
@Namespace("model") @NoOffset public static class picTextBean extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public picTextBean(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public picTextBean(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public picTextBean position(long position) {
        return (picTextBean)super.position(position);
    }

	public picTextBean() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int32") int index(); public native picTextBean index(int index);
	/**图片url */
	public native @StdString  String picUrl(); public native picTextBean picUrl(String picUrl);
	/**标题 */
	public native @StdString  String title(); public native picTextBean title(String title);
	/**url */
	public native @StdString  String url(); public native picTextBean url(String url);
	/**描述 */
	public native @StdString  String dsc(); public native picTextBean dsc(String dsc);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef picTextBean rhs);
}
/**图文消息 */
@Namespace("model") @NoOffset public static class MsgPicWithText extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgPicWithText(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgPicWithText(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgPicWithText position(long position) {
        return (MsgPicWithText)super.position(position);
    }

	public MsgPicWithText() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgPicWithText(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef MsgPicWithText rhs);

	/**消息集合 */
	public native @ByRef PicTextBeanVector vtPtBean(); public native MsgPicWithText vtPtBean(PicTextBeanVector vtPtBean);
}


@Namespace("model") @NoOffset public static class MsgDynExpression2 extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgDynExpression2(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgDynExpression2(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgDynExpression2 position(long position) {
        return (MsgDynExpression2)super.position(position);
    }

	public MsgDynExpression2() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @StdString  String code(); public native MsgDynExpression2 code(String code);
	public native @StdString  String emoji(); public native MsgDynExpression2 emoji(String emoji);
	public native @StdString  String mdCode(); public native MsgDynExpression2 mdCode(String mdCode);
	public native @StdString  String meaning(); public native MsgDynExpression2 meaning(String meaning);
	public native @Cast("int8") byte DyType(); public native MsgDynExpression2 DyType(byte DyType);
	public native int textSize(); public native MsgDynExpression2 textSize(int textSize);

	public native @StdString  String thumbnailUrl(); public native MsgDynExpression2 thumbnailUrl(String thumbnailUrl);
	public native @StdString  String elogo(); public native MsgDynExpression2 elogo(String elogo);
	public native @StdString  String domainPort(); public native MsgDynExpression2 domainPort(String domainPort);
	public native @StdString  String gifPath(); public native MsgDynExpression2 gifPath(String gifPath);
    public native @StdString  String pngPath(); public native MsgDynExpression2 pngPath(String pngPath);



}
@Namespace("model") @NoOffset public static class MsgTask extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgTask(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgTask(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgTask position(long position) {
        return (MsgTask)super.position(position);
    }

	public MsgTask() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @StdString  String timeTask(); public native MsgTask timeTask(String timeTask);
	public native @StdString  String isFinish(); public native MsgTask isFinish(String isFinish);
	public native @StdString  String isTask(); public native MsgTask isTask(String isTask);
	public native @StdString  String isRead(); public native MsgTask isRead(String isRead);
	public native int fontSize(); public native MsgTask fontSize(int fontSize);
    /**敏感词类型(发送不用传) */
    public native @Cast("int8") byte bwdType(); public native MsgTask bwdType(byte bwdType);
    /**敏感词集合(发送不用传) */
    public native @ByRef StringVector bwds(); public native MsgTask bwds(StringVector bwds);
}

@Namespace("model") public static class st_Masterplate extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public st_Masterplate() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public st_Masterplate(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public st_Masterplate(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public st_Masterplate position(long position) {
        return (st_Masterplate)super.position(position);
    }

	public native @StdString  String content(); public native st_Masterplate content(String content);
	public native @StdString  String num(); public native st_Masterplate num(String num);
	public native @StdString  String proposer(); public native st_Masterplate proposer(String proposer);
	public native @StdString  String approver(); public native st_Masterplate approver(String approver);
}
@Namespace("model") @NoOffset public static class MsgMasterplate extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgMasterplate(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgMasterplate(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgMasterplate position(long position) {
        return (MsgMasterplate)super.position(position);
    }

	public MsgMasterplate() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @StdString  String content(); public native MsgMasterplate content(String content);
	public native @Cast("int64") long createTime(); public native MsgMasterplate createTime(long createTime);
	public native @StdString  String detailUrl(); public native MsgMasterplate detailUrl(String detailUrl);
	public native @StdString  String title(); public native MsgMasterplate title(String title);
	public native @StdString  String toUsers(); public native MsgMasterplate toUsers(String toUsers);
	public native @StdString  String status(); public native MsgMasterplate status(String status);
	public native @StdString  String statColor(); public native MsgMasterplate statColor(String statColor);
	public native @StdString  String titleColor(); public native MsgMasterplate titleColor(String titleColor);
	public native @StdString  String type(); public native MsgMasterplate type(String type);
	public native @StdString  String titleBGColor(); public native MsgMasterplate titleBGColor(String titleBGColor);
	public native @StdString  String fields(); public native MsgMasterplate fields(String fields);
	public native @StdString  String creator(); public native MsgMasterplate creator(String creator);
	public native @StdString  String mToken(); public native MsgMasterplate mToken(String mToken);    //模板消息的消息ID，多条按钮消息可能是同一个bid，使用mToken区分
	public native @StdString  String bId(); public native MsgMasterplate bId(String bId); //模板消息的审记ID，应用提供的，一个申请可能拒绝多次，此ID用来判断为同一个申请

	//按钮操作记录，json的string类型，内容格式List<Map<String,String>>，map key包含 _1enname按钮英文名，客户端需要国际化 _2cname按钮中文名，客户端需要国际化 _3eventType事件，同意，拒绝 _4isInput是否弹出输入框，例如拒绝需要理由
	//举例 "buttons":[{"cnName":"同意", "isInput" : "false", "enName" : "agree", "eventType" : "1"}, { "cnName":"取消", "isInput" : "true", "enName" : "cancel", "eventType" : "2" }]
	//发送消息给服务器时不需要buttons
	public native @StdString  String buttons(); public native MsgMasterplate buttons(String buttons);  

	//审批的结果，json的string类型，内容格式Map<String,String>，map key包含 _1enname按钮英文名，客户端需要国际化 _2cname按钮中文名，客户端需要国际化 _3eventType事件，同意，拒绝 _4code服务器错误码
	//比如点击同意后，客户端发送内容为 {"eventType" : "1"}
	//比如ddio url出错，服务器返回为{"code" : "1001"}
	//比如应用审批后，通过服务器返回为{"cnName":"已结束",  "enName" : "over"}
	public native @StdString  String eventData(); public native MsgMasterplate eventData(String eventData); 

	//客户端根据该字段判断展示位置，1，只展示会话不展示工作台，2只展示工作台不展示会话，3展示工作台和会话，4不展示工作台也不展示会话
	public native @StdString  String isShowSession(); public native MsgMasterplate isShowSession(String isShowSession);


	public native int forwardConfig(); public native MsgMasterplate forwardConfig(int forwardConfig); /**是否可以转发 1 禁止，2 可以 默认2可以转发 */
	public native @Cast("int64") long taskID(); public native MsgMasterplate taskID(long taskID); /**消息任务ID */
}


@Namespace("model") @NoOffset public static class MsgActionCard extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgActionCard(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgActionCard(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgActionCard position(long position) {
        return (MsgActionCard)super.position(position);
    }

	public MsgActionCard() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long taskID(); public native MsgActionCard taskID(long taskID); /**消息任务ID */

	public native @StdString  String title(); public native MsgActionCard title(String title); // 标题
	public native @StdString  String content(); public native MsgActionCard content(String content); // 内容说明
	public native @StdString  String bID(); public native MsgActionCard bID(String bID); //  业务方自己的唯一主键
	public native @StdString  String fileds(); public native MsgActionCard fileds(String fileds); // 补充的内容, markdown形式展示
	public native @StdString  String button(); public native MsgActionCard button(String button); // 业务动作，确定；其他业务可以扩展多个动作
	public native @StdString  String detailUrl(); public native MsgActionCard detailUrl(String detailUrl); //  消息正文的链接URL
	public native @StdString  String picUrl(); public native MsgActionCard picUrl(String picUrl); // 消息中的图片
	public native @StdString  String userList(); public native MsgActionCard userList(String userList); //  参与人员, 多个人员逗号分隔
	public native int isShowSession(); public native MsgActionCard isShowSession(int isShowSession); // 客户端根据该字段判断展示位置(1展示会话不展示工作台; 2不展示会话, 展示工作台; 3展示会话和工作台; 4不展示会话和工作台)
	public native @StdString  String tag(); public native MsgActionCard tag(String tag); // 消息标签，最多支持4个中文字符，12个英文字符, 最多支持6个
}


@Namespace("model") @NoOffset public static class MsgMiniVedio extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgMiniVedio(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgMiniVedio(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgMiniVedio position(long position) {
        return (MsgMiniVedio)super.position(position);
    }

	public MsgMiniVedio() { super((Pointer)null); allocate(); }
	private native void allocate();
	/** 接收人ID */
	public native @Cast("int64") long buddyId(); public native MsgMiniVedio buddyId(long buddyId);
	/** 是否阅后即焚 */
	public native @Cast("int8") byte brustFlag(); public native MsgMiniVedio brustFlag(byte brustFlag);
	/** 预览图片服务器地址  一步发送消息时不赋值 */
	public native @StdString  String preImgPath(); public native MsgMiniVedio preImgPath(String preImgPath);
	/** 视频服务器地址	 一步发送消息时不赋值 */
	public native @StdString  String vedioFileName(); public native MsgMiniVedio vedioFileName(String vedioFileName);
	/** 本地预览图片路径 一步发送消息时使用 */
	public native @StdString  String localPreImgPath(); public native MsgMiniVedio localPreImgPath(String localPreImgPath);
	/** 本地视频路径	一步发送消息时使用 */
	public native @StdString  String localVedioPath(); public native MsgMiniVedio localVedioPath(String localVedioPath);
	/** 视频分辨率高 */
	public native @Cast("int64") long vedioHight(); public native MsgMiniVedio vedioHight(long vedioHight);
	/** 视频长, （毫秒） */
	public native @Cast("int64") long vedioLenth(); public native MsgMiniVedio vedioLenth(long vedioLenth);
	/** 视频分比率宽 */
	public native @Cast("int64") long vedioWideth(); public native MsgMiniVedio vedioWideth(long vedioWideth);
	/** 视频大小（Byte） */
	public native @Cast("int64") long vedioSize(); public native MsgMiniVedio vedioSize(long vedioSize);
	/**只发送秘钥，不进行加密 0.加密文件 1.不实际加密文件  */
	public native @Cast("int8") byte sendPasswdWithoutEncrypt(); public native MsgMiniVedio sendPasswdWithoutEncrypt(byte sendPasswdWithoutEncrypt);
	/**加密KEY */
	public native @StdString  String encryptKey(); public native MsgMiniVedio encryptKey(String encryptKey);
	/** 是否加密 */
	public native @Cast("int32") int docID(); public native MsgMiniVedio docID(int docID);
	/**附件有效期 */
	public native @Cast("int64") long validity(); public native MsgMiniVedio validity(long validity);
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native MsgMiniVedio isOverdue(byte isOverdue);

	public native @StdString  String md5Code(); public native MsgMiniVedio md5Code(String md5Code);	//原视频MD5值，校验用，发消息时不用传
	public native @StdString  String thumbMd5(); public native MsgMiniVedio thumbMd5(String thumbMd5);	//缩略图Md5值

	//以下iOS专用字段
	/** 相对路径 */
	public native @StdString  String relaThumbPath(); public native MsgMiniVedio relaThumbPath(String relaThumbPath);
	public native @StdString  String relaPath(); public native MsgMiniVedio relaPath(String relaPath);
}

@Namespace("model") @NoOffset public static class ImgMsgInner extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImgMsgInner(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImgMsgInner(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ImgMsgInner position(long position) {
        return (ImgMsgInner)super.position(position);
    }


	public ImgMsgInner() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long toId(); public native ImgMsgInner toId(long toId);
	public native @Cast("int64") long fromId(); public native ImgMsgInner fromId(long fromId);
	public native @StdString  String userName(); public native ImgMsgInner userName(String userName);
	public native @StdString  String userPic(); public native ImgMsgInner userPic(String userPic);
	public native @Cast("int64") long msgType(); public native ImgMsgInner msgType(long msgType);
	public native @Cast("int64") long msgId(); public native ImgMsgInner msgId(long msgId);
	public native @Cast("int64") long time(); public native ImgMsgInner time(long time);

	public native @StdString  String encryptKey(); public native ImgMsgInner encryptKey(String encryptKey);
	/**只发送秘钥，不进行加密 0.加密文件 1.不实际加密文件  */
	public native @Cast("int8") byte sendPasswdWithoutEncrypt(); public native ImgMsgInner sendPasswdWithoutEncrypt(byte sendPasswdWithoutEncrypt);
	public native @StdString  String fileName(); public native ImgMsgInner fileName(String fileName);
	public native int height(); public native ImgMsgInner height(int height);
	public native int width(); public native ImgMsgInner width(int width);
	public native @Cast("int64") long size(); public native ImgMsgInner size(long size);
	public native @StdString  String mainUrl(); public native ImgMsgInner mainUrl(String mainUrl);
	public native @StdString  String thumbUrl(); public native ImgMsgInner thumbUrl(String thumbUrl);
	public native @StdString  String body(); public native ImgMsgInner body(String body);
	public native @Cast("int64") long buddyId(); public native ImgMsgInner buddyId(long buddyId);
	public native @StdString  String mainPath(); public native ImgMsgInner mainPath(String mainPath);
	public native @StdString  String thumbPath(); public native ImgMsgInner thumbPath(String thumbPath);
	public native @Cast("int32") int docID(); public native ImgMsgInner docID(int docID);

	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native ImgMsgInner isDelay(boolean isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native ImgMsgInner delayTime(long delayTime);
	/**是否是指令消息 */
	public native @Cast("bool") boolean isCmd(); public native ImgMsgInner isCmd(boolean isCmd);
	/**图片描述 */
	public native @StdString  String imageContents(); public native ImgMsgInner imageContents(String imageContents);
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native ImgMsgInner isOverdue(byte isOverdue);
	public native @Cast("int8") byte isOriImg(); public native ImgMsgInner isOriImg(byte isOriImg);    //是否是原图，0、不是 1、是
	public native @StdString  String md5Code(); public native ImgMsgInner md5Code(String md5Code);	//原图MD5值，校验用，发图片时不用传
	public native @StdString  String thumbMd5(); public native ImgMsgInner thumbMd5(String thumbMd5);	//缩略图Md5值
}

 
@Namespace("model") @NoOffset public static class TextMsgInner extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TextMsgInner(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TextMsgInner(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TextMsgInner position(long position) {
        return (TextMsgInner)super.position(position);
    }

	public TextMsgInner() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long toId(); public native TextMsgInner toId(long toId);
	public native @Cast("int64") long fromId(); public native TextMsgInner fromId(long fromId);
	public native @StdString  String userName(); public native TextMsgInner userName(String userName);
	public native @StdString  String userPic(); public native TextMsgInner userPic(String userPic);
	public native @Cast("int64") long msgType(); public native TextMsgInner msgType(long msgType);
	public native @Cast("int64") long msgId(); public native TextMsgInner msgId(long msgId);
	public native @Cast("int64") long time(); public native TextMsgInner time(long time);

	/**是否是机器人消息 */
	public native @Cast("bool") boolean isRbtMsg(); public native TextMsgInner isRbtMsg(boolean isRbtMsg);
	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native TextMsgInner isDelay(boolean isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native TextMsgInner delayTime(long delayTime);
	/**是否阅后回执 */
	public native @Cast("bool") boolean isReceipt(); public native TextMsgInner isReceipt(boolean isReceipt);
	/**消息体 */
	public native @StdString  String body(); public native TextMsgInner body(String body);
}

@Namespace("model") @NoOffset public static class AudioMsgInner extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AudioMsgInner(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AudioMsgInner(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public AudioMsgInner position(long position) {
        return (AudioMsgInner)super.position(position);
    }

	public AudioMsgInner() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long toId(); public native AudioMsgInner toId(long toId);
	public native @Cast("int64") long fromId(); public native AudioMsgInner fromId(long fromId);
	public native @StdString  String userName(); public native AudioMsgInner userName(String userName);
	public native @StdString  String userPic(); public native AudioMsgInner userPic(String userPic);
	public native @Cast("int64") long msgType(); public native AudioMsgInner msgType(long msgType);
	public native @Cast("int64") long msgId(); public native AudioMsgInner msgId(long msgId);
	public native @Cast("int64") long time(); public native AudioMsgInner time(long time);
	public native @Cast("int64") long size(); public native AudioMsgInner size(long size);

	/**时长 */
	public native @Cast("int32") int mediaTime(); public native AudioMsgInner mediaTime(int mediaTime);
	/**文件名 */
	public native @StdString  String fileName(); public native AudioMsgInner fileName(String fileName);
	/**路径 */
	public native @StdString  String meidaUrl(); public native AudioMsgInner meidaUrl(String meidaUrl);
	/**加密KEY */
	public native @StdString  String encryptKey(); public native AudioMsgInner encryptKey(String encryptKey);
	/**ui层用，标志是否需要显示小红点 0、不需要 1、需要  */
	public native int status(); public native AudioMsgInner status(int status);
	public native @StdString  String localPath(); public native AudioMsgInner localPath(String localPath);		//音频本地路径 
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native AudioMsgInner isOverdue(byte isOverdue);
}

@Namespace("model") @NoOffset public static class PositionMsgInner extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PositionMsgInner(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PositionMsgInner(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PositionMsgInner position(long position) {
        return (PositionMsgInner)super.position(position);
    }

	public PositionMsgInner() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long toId(); public native PositionMsgInner toId(long toId);
	public native @Cast("int64") long fromId(); public native PositionMsgInner fromId(long fromId);
	public native @StdString  String userName(); public native PositionMsgInner userName(String userName);
	public native @StdString  String userPic(); public native PositionMsgInner userPic(String userPic);
	public native @Cast("int64") long msgType(); public native PositionMsgInner msgType(long msgType);
	public native @Cast("int64") long msgId(); public native PositionMsgInner msgId(long msgId);
	public native @Cast("int64") long time(); public native PositionMsgInner time(long time);

	/**是否延迟消息 */
	public native @Cast("bool") boolean isDelay(); public native PositionMsgInner isDelay(boolean isDelay);
	/**延迟时间 */
	public native @Cast("int64") long delayTime(); public native PositionMsgInner delayTime(long delayTime);
	/**地名 */
	public native @StdString  String name(); public native PositionMsgInner name(String name);
	/**纬度 */
	public native double latitude(); public native PositionMsgInner latitude(double latitude);
	/**经度 */
	public native double longitude(); public native PositionMsgInner longitude(double longitude);
}
@Namespace("model") @NoOffset public static class MsgConference extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgConference(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgConference(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgConference position(long position) {
        return (MsgConference)super.position(position);
    }

	public MsgConference() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @StdString  String comment(); public native MsgConference comment(String comment);	//VideoStatus
	public native @Cast("int8") byte conferType(); public native MsgConference conferType(byte conferType);			//VideoType
	//std::string conferType;		//int8类型错误修改  [3/18/2021 zhuohc]

	//密话增加字段  [3/18/2021 zhuohc]
	//std::string secretBody;		///<密话字段
	//std::string bodyType;	///<
	//std::string annotation;	///<
	//std::string senderId;		///<
	//std::string onwerId;		///<
	//std::string roomId;			///<
	////std::string bodyDeviceType;		///<Msg结构体有
	//std::string version;			///<
	//std::string rtcType;			///<
}
/**应用分享消息 */
@Namespace("model") public static class MsgAppShare extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgAppShare(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgAppShare(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgAppShare position(long position) {
        return (MsgAppShare)super.position(position);
    }

	public MsgAppShare() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgAppShare(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);
}

// #if (defined SDK_FOR_ANDROID) || (defined OEM_OS_YUANXIN)
@Namespace("model") @NoOffset public static class MsgNineBlock extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgNineBlock(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgNineBlock(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgNineBlock position(long position) {
        return (MsgNineBlock)super.position(position);
    }

	public MsgNineBlock() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @ByRef ImgMsgInnerVector nine(); public native MsgNineBlock nine(ImgMsgInnerVector nine);
	public native @Cast("int64") long validity(); public native MsgNineBlock validity(long validity); /**附件有效期 */
	/** 服务器路径是否过期，1.过期，0.未过期 */
	public native @Cast("int8") byte isOverdue(); public native MsgNineBlock isOverdue(byte isOverdue);
}
@Namespace("model") @NoOffset public static class MsgCombine extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgCombine(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgCombine(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgCombine position(long position) {
        return (MsgCombine)super.position(position);
    }

	public MsgCombine() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @ByRef MsgTextVector mVt_TextMsg(); public native MsgCombine mVt_TextMsg(MsgTextVector mVt_TextMsg);
	public native @ByRef MsgImgVector mVt_ImgMsg(); public native MsgCombine mVt_ImgMsg(MsgImgVector mVt_ImgMsg);
	public native @ByRef MsgWebVector mVt_WebMsg(); public native MsgCombine mVt_WebMsg(MsgWebVector mVt_WebMsg);
	public native @ByRef MsgAudioVector mVt_AudMsg(); public native MsgCombine mVt_AudMsg(MsgAudioVector mVt_AudMsg);
	public native @ByRef MsgPositionVector mVt_PosMsg(); public native MsgCombine mVt_PosMsg(MsgPositionVector mVt_PosMsg);
	public native @ByRef MsgFileVector mVt_FileMsg(); public native MsgCombine mVt_FileMsg(MsgFileVector mVt_FileMsg);
	public native @ByRef MsgCardVector mVt_CardMsg(); public native MsgCombine mVt_CardMsg(MsgCardVector mVt_CardMsg);
	public native @ByRef MsgTipVector mVt_TipMsg(); public native MsgCombine mVt_TipMsg(MsgTipVector mVt_TipMsg);
	public native @ByRef MsgPicWithTextVector mVt_PicTextMsg(); public native MsgCombine mVt_PicTextMsg(MsgPicWithTextVector mVt_PicTextMsg);
	public native @ByRef MsgDynExpressionVector mVt_Dy1Msg(); public native MsgCombine mVt_Dy1Msg(MsgDynExpressionVector mVt_Dy1Msg);
	public native @ByRef MsgVoiceVector mVt_VoiceMsg(); public native MsgCombine mVt_VoiceMsg(MsgVoiceVector mVt_VoiceMsg);
	public native @ByRef MsgTaskVector mVt_TaskMsg(); public native MsgCombine mVt_TaskMsg(MsgTaskVector mVt_TaskMsg);
	public native @ByRef MsgMasterplateVector mVt_TemlMsg(); public native MsgCombine mVt_TemlMsg(MsgMasterplateVector mVt_TemlMsg);
	public native @ByRef MsgMiniVedioVector mVt_MiniVedioMsg(); public native MsgCombine mVt_MiniVedioMsg(MsgMiniVedioVector mVt_MiniVedioMsg);
	public native @ByRef MsgNineBlockVector mVt_NineMsg(); public native MsgCombine mVt_NineMsg(MsgNineBlockVector mVt_NineMsg);
	public native @ByRef MsgDynExpression2Vector mVt_Dy2Msg(); public native MsgCombine mVt_Dy2Msg(MsgDynExpression2Vector mVt_Dy2Msg);
	public native @ByRef MsgAppShareVector mVt_AppShareMsg(); public native MsgCombine mVt_AppShareMsg(MsgAppShareVector mVt_AppShareMsg);

	public native @Cast("int8") byte bwdType(); public native MsgCombine bwdType(byte bwdType);                
	public native @ByRef StringVector bwds(); public native MsgCombine bwds(StringVector bwds);
}
// #else

// #endif

@Namespace("model") @NoOffset public static class MsgNotebook extends MsgCombine {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgNotebook(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgNotebook(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgNotebook position(long position) {
        return (MsgNotebook)super.position(position);
    }

	public MsgNotebook() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long notebookId(); public native MsgNotebook notebookId(long notebookId);
	public native @StdString  String noteTitle(); public native MsgNotebook noteTitle(String noteTitle);
}
/**接收方可以单发，可以群发。发送方地址需要注意，必须是豆豆号\本服务器域名 */
@Namespace("model") @NoOffset public static class MsgMail extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgMail(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgMail(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgMail position(long position) {
        return (MsgMail)super.position(position);
    }

	public MsgMail() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**发送者 */
	public native @StdString  String senderName(); public native MsgMail senderName(String senderName);
	public native @StdString  String senderAddress(); public native MsgMail senderAddress(String senderAddress);//<发送者邮箱
	/**邮件主题 */
	public native @StdString  String subject(); public native MsgMail subject(String subject);
	/**邮件内容 */
	public native @StdString  String content(); public native MsgMail content(String content);
	/**接收者 */
	public native @ByRef StringVector receivers(); public native MsgMail receivers(StringVector receivers);
}

@Namespace("model") @NoOffset public static class MsgRedPacket extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgRedPacket(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgRedPacket(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgRedPacket position(long position) {
        return (MsgRedPacket)super.position(position);
    }

	public MsgRedPacket() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**1、拼手气红包 2、普通红包3、口令红包 */
	public native @StdString  String typeSendHongBao(); public native MsgRedPacket typeSendHongBao(String typeSendHongBao);
	public native @StdString  String myHongBaoId(); public native MsgRedPacket myHongBaoId(String myHongBaoId); 
}

/**万能消息 */
@Namespace("model") public static class MsgUniversal extends Msg {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgUniversal(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgUniversal(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgUniversal position(long position) {
        return (MsgUniversal)super.position(position);
    }

	public MsgUniversal() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MsgUniversal(@ByRef Msg msg) { super((Pointer)null); allocate(msg); }
	private native void allocate(@ByRef Msg msg);
}
	
 /*namespace model*/

// Parsed from model/Optional.h

// #pragma once

// #include <iostream>

@Name("model::Optional<int>") @NoOffset public static class OptionalInt extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalInt(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalInt(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalInt position(long position) {
        return (OptionalInt)super.position(position);
    }


	public OptionalInt() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionalInt(int value) { super((Pointer)null); allocate(value); }
	private native void allocate(int value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionalInt put(int value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @Cast("int*") @ByRef IntPointer value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionalInt rhs);
}

@Name("model::Optional<int8>") @NoOffset public static class OptionalByte extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalByte(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalByte(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalByte position(long position) {
        return (OptionalByte)super.position(position);
    }


	public OptionalByte() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionalByte(@Cast("const int8") byte value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Cast("const int8") byte value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionalByte put(@Cast("const int8") byte value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @Cast("int8*") @ByRef BytePointer value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionalByte rhs);
}

@Name("model::Optional<int16>") @NoOffset public static class OptionalShort extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalShort(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalShort(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalShort position(long position) {
        return (OptionalShort)super.position(position);
    }


	public OptionalShort() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionalShort(@Cast("const int16") int value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Cast("const int16") int value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionalShort put(@Cast("const int16") int value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @Cast("int16*") @ByRef IntPointer value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionalShort rhs);
}

@Name("model::Optional<int64>") @NoOffset public static class OptionalLong extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalLong(Pointer p) { super(p); }


	public OptionalLong() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionalLong(@Cast("const int64") long value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Cast("const int64") long value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionalLong put(@Cast("const int64") long value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @Cast("int64*") @ByRef LongPointer value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionalLong rhs);
}

@Name("model::Optional<std::string>") @NoOffset public static class OptionalString extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalString(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalString(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalString position(long position) {
        return (OptionalString)super.position(position);
    }


	public OptionalString() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionalString(@StdString  String value) { super((Pointer)null); allocate(value); }
	private native void allocate(@StdString  String value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionalString put(@StdString  String value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @StdString  String value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionalString rhs);
}

@Name("model::Optional<std::vector<std::string> >") @NoOffset public static class OptionalStringVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalStringVector(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalStringVector(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalStringVector position(long position) {
        return (OptionalStringVector)super.position(position);
    }


	public OptionalStringVector() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionalStringVector(@Const @ByRef StringVector value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Const @ByRef StringVector value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionalStringVector put(@Const @ByRef StringVector value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @ByRef StringVector value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionalStringVector rhs);
}

@Name("model::Optional<bool>") @NoOffset public static class OptionalBool extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalBool(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalBool(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalBool position(long position) {
        return (OptionalBool)super.position(position);
    }


	public OptionalBool() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionalBool(@Cast("const bool") boolean value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Cast("const bool") boolean value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionalBool put(@Cast("const bool") boolean value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @Cast("bool*") @ByRef BoolPointer value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionalBool rhs);
}

@Name("model::Optional<TinyGroup>") @NoOffset public static class OptionalGroup extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalGroup(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalGroup(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalGroup position(long position) {
        return (OptionalGroup)super.position(position);
    }


	public OptionalGroup() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionalGroup(@Const @ByRef TinyGroup value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Const @ByRef TinyGroup value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionalGroup put(@Const @ByRef TinyGroup value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @ByRef TinyGroup value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionalGroup rhs);
}

@Name("model::Optional<std::vector<int64> >") @NoOffset public static class OptionaVectorInt64 extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionaVectorInt64(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionaVectorInt64(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionaVectorInt64 position(long position) {
        return (OptionaVectorInt64)super.position(position);
    }


	public OptionaVectorInt64() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionaVectorInt64(@Const @ByRef LongVector value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Const @ByRef LongVector value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionaVectorInt64 put(@Const @ByRef LongVector value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @ByRef LongVector value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionaVectorInt64 rhs);
}

@Name("model::Optional<std::vector<model::AccountType> >") @NoOffset public static class OptionaAccountTypeVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionaAccountTypeVector(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionaAccountTypeVector(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionaAccountTypeVector position(long position) {
        return (OptionaAccountTypeVector)super.position(position);
    }


	public OptionaAccountTypeVector() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionaAccountTypeVector(@Const @ByRef acctTypeVector value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Const @ByRef acctTypeVector value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionaAccountTypeVector put(@Const @ByRef acctTypeVector value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @ByRef acctTypeVector value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionaAccountTypeVector rhs);
}

@Name("model::Optional<std::vector<model::OrganizationInfo> >") @NoOffset public static class OptionaOrganizationInfoVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionaOrganizationInfoVector(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionaOrganizationInfoVector(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionaOrganizationInfoVector position(long position) {
        return (OptionaOrganizationInfoVector)super.position(position);
    }


	public OptionaOrganizationInfoVector() { super((Pointer)null); allocate(); }
	private native void allocate();

	public OptionaOrganizationInfoVector(@Const @ByRef OrganizationInfoVector value) { super((Pointer)null); allocate(value); }
	private native void allocate(@Const @ByRef OrganizationInfoVector value);

	/*Optional(T &&value) :_isSet(false)
	{
		_value = std::move(value);
	}*/

	public native @ByRef @Name("operator =") OptionaOrganizationInfoVector put(@Const @ByRef OrganizationInfoVector value);

	/*Optional &operator = (T &&value)
	{
		_value = value;//std::move(value);
		_isSet = true;
		return *this;
	}*/

	public native @ByRef OrganizationInfoVector value();

	public native @Cast("bool") boolean isSet();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef OptionaOrganizationInfoVector rhs);
}



// Parsed from model/Packet.h

// #pragma once
// #include "User.h"
// #include "Msg.h"
// #include "TinyGroup.h"
// #include <vector>
// #include <string>
// #include <map>
// #include "LoginInfo.h"
@Namespace("model") @NoOffset public static class AppInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AppInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AppInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public AppInfo position(long position) {
        return (AppInfo)super.position(position);
    }

	public AppInfo() { super((Pointer)null); allocate(); }
	private native void allocate();	
	public native @StdString  String appVersion(); public native AppInfo appVersion(String appVersion);		//应用版本号，如"1.5.0"  *必须设置
	public native int deviceType(); public native AppInfo deviceType(int deviceType);				//设备类型 1：PC；2：手机；3：pad；4：网页  *必须设置
	public native @StdString  String deviceInfo(); public native AppInfo deviceInfo(String deviceInfo);		//设备信息 如"pc-windows"  *必须设置
	public native @StdString  String appName(); public native AppInfo appName(String appName);		//应用信息 需与应用名保持一致 *必须设置
	public native @StdString  String netType(); public native AppInfo netType(String netType);		//网络信息 如"wifi"  可选
	public native @StdString  String mac(); public native AppInfo mac(String mac);			//mac地址  windows,mac,linux平台会自动获取，其它平台需手动设置
	public native @StdString  String mark(); public native AppInfo mark(String mark);			//应用标示 可选
	public native int devMode(); public native AppInfo devMode(int devMode);        //是否调试模式 0 默认模式 1 调试者模式
	public native @ByRef appVerifyInfo verifyInfo(); public native AppInfo verifyInfo(appVerifyInfo verifyInfo);  //验证信息 默认模式下需要填写
	public native @Cast("int8") byte isUseHttpServer(); public native AppInfo isUseHttpServer(byte isUseHttpServer);		//是否使用http插件 0不用 1用
	public native @StdString  String rcPath(); public native AppInfo rcPath(String rcPath);  //实际的资源和日志的路径（及为调用setRootPath时的参数），安卓专用
}

/**用户设置 */
@Namespace("model") @NoOffset public static class UserSetting extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UserSetting(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public UserSetting(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public UserSetting position(long position) {
        return (UserSetting)super.position(position);
    }

	public UserSetting() { super((Pointer)null); allocate(); }
	private native void allocate();

	/**否显示在线信息 0显示 1不显示 默认0 */
	public native @Cast("int8") byte isonline(); public native UserSetting isonline(byte isonline);
	/**豆豆号查找  0允许 1不允许 默认0 */
	public native @Cast("int8") byte issearchbybean(); public native UserSetting issearchbybean(byte issearchbybean);
	/**手机号查找  0允许 1不允许 默认0 */
	public native @Cast("int8") byte issearchbyphone(); public native UserSetting issearchbyphone(byte issearchbyphone);
	/**邮箱号查找  0允许 1不允许 默认0 */
	public native @Cast("int8") byte issearchbymail(); public native UserSetting issearchbymail(byte issearchbymail);
	public native @Cast("int8") byte issearchbynewfriend(); public native UserSetting issearchbynewfriend(byte issearchbynewfriend);	/** 通过新朋友查找  0允许 1不允许 默认0 */
	/**分享更新   0提示更新 1不提示更新 默认0 */
	public native @Cast("int8") byte isshareupdate(); public native UserSetting isshareupdate(byte isshareupdate);
	/**新消息通知是否提醒0提醒 1不提醒 默认0 */
	public native @Cast("int8") byte isnewmsgtip(); public native UserSetting isnewmsgtip(byte isnewmsgtip);
	/**多服务新消息通知是否提醒0不始终提示 1始终提示 默认0 */
	public native @Cast("int8") byte ismultiservmsgtip(); public native UserSetting ismultiservmsgtip(byte ismultiservmsgtip);
	/**多服务设置V标好友始终提醒 0不始终提示 1始终提示 默认 */
	public native @Cast("int8") byte ismultiservfrdtip(); public native UserSetting ismultiservfrdtip(byte ismultiservfrdtip);
	/**多服务设置设置\相关人始终提醒0不始终提示 1始终提示 默认0 */
	public native @Cast("int8") byte ismultiservpersontip(); public native UserSetting ismultiservpersontip(byte ismultiservpersontip);
	/**昵称查找  0允许 1不允许 默认0 */
	public native @Cast("int8") byte issearchbyname(); public native UserSetting issearchbyname(byte issearchbyname);
	/**应用管理权限 0 无权限 1 有权限 默认 0 */
	public native @Cast("int8") byte isappmgrauth(); public native UserSetting isappmgrauth(byte isappmgrauth);
}

/**本地配置条目 */
@Namespace("model") @NoOffset public static class LocalSetting extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LocalSetting(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LocalSetting(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LocalSetting position(long position) {
        return (LocalSetting)super.position(position);
    }

	public LocalSetting() { super((Pointer)null); allocate(); }
	private native void allocate();
	public LocalSetting(@StdString  String k, @StdString  String v) { super((Pointer)null); allocate(k, v); }
	private native void allocate(@StdString  String k, @StdString  String v);
	/**标识 */
	public native @StdString  String key(); public native LocalSetting key(String key);
	/**值 */
	public native @StdString  String val(); public native LocalSetting val(String val);
}

@Namespace("model") @NoOffset public static class delFileinfoList extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public delFileinfoList(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public delFileinfoList(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public delFileinfoList position(long position) {
        return (delFileinfoList)super.position(position);
    }

	public delFileinfoList() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**文件ID */
	public native @Cast("int64") long fileid(); public native delFileinfoList fileid(long fileid);
	/**缩略图本地路径 */
	public native @StdString  String thumbPath(); public native delFileinfoList thumbPath(String thumbPath);
	/**缩略图服务器路径 */
	public native @StdString  String thumbUrl(); public native delFileinfoList thumbUrl(String thumbUrl);
}

/**个人配置项 */
@Namespace("model") @NoOffset public static class PersonalData extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PersonalData(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PersonalData(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PersonalData position(long position) {
        return (PersonalData)super.position(position);
    }

	public PersonalData() { super((Pointer)null); allocate(); }
	private native void allocate();
	public PersonalData(@Cast("int16") int t, @Cast("int16") int v) { super((Pointer)null); allocate(t, v); }
	private native void allocate(@Cast("int16") int t, @Cast("int16") int v);
	/**标识 */
	public native @Cast("int16") int type(); public native PersonalData type(int type);
	/**值 */
	public native @Cast("int16") int val(); public native PersonalData val(int val);
}
/**好友验证方式返回 */
@Namespace("model") @NoOffset public static class ContactVerifyType extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ContactVerifyType(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ContactVerifyType(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ContactVerifyType position(long position) {
        return (ContactVerifyType)super.position(position);
    }

	public ContactVerifyType() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long userid(); public native ContactVerifyType userid(long userid);
	/**验证类型1需要验证信息:2:不允许任何人添加,3:允许任何人添加 */
	public native @Cast("int8") byte type(); public native ContactVerifyType type(byte type);
}
/**在线状态 */
@Namespace("model") @NoOffset public static class OnlineState extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OnlineState(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OnlineState(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OnlineState position(long position) {
        return (OnlineState)super.position(position);
    }

	public OnlineState() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**用户ID */
	public native @Cast("int64") long userID(); public native OnlineState userID(long userID);
	public native @Cast("int64") long connectID(); public native OnlineState connectID(long connectID);    /**sessionID */
	/**在线设备类型  1：PC；2：手机；3：pad；4：网页
	 * 在线状态 -1：离线，1:在线；2:隐身,3:忙碌,4:离开,5:请勿打扰,6:想聊天,7:强制下线,8:暂离，
	 * 9:未激活 10:删除账号，11:账号冻结,  12:更换绑定账号,  13:重置密码,  14:远程控制PC下线 */
	public native @Cast("int8") byte deviceType(); public native OnlineState deviceType(byte deviceType);
	public native @Cast("int8") byte flag(); public native OnlineState flag(byte flag);        
    /**操作时间,如果客户端不在线，他最后在线时间 */
    public native @Cast("int64") long operTime(); public native OnlineState operTime(long operTime);
}

/**消息查询 */
@Namespace("model") @NoOffset public static class MsgSearchProperty extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgSearchProperty(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgSearchProperty(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgSearchProperty position(long position) {
        return (MsgSearchProperty)super.position(position);
    }

	public MsgSearchProperty() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**消息类型 当前只支持2文本 */
	public native int msgtype(); public native MsgSearchProperty msgtype(int msgtype);
	/**消息数量 */
	public native int count(); public native MsgSearchProperty count(int count);
	/**
	* 　targetId为用户Id或群Id，与count字段共同决定搜索的方式，有以下几种组合：
	*   targetId !=0, count = 1:搜索指定的targetId的聊天记录数目。
	* 　targetId = 0,count > 1: 从最小的targetId开始向上搜索记录，共搜索到count个匹配的targetId为止。
	*   targetId !=0, count >1: 从指定的targetId开始向上搜索记录，共搜索到count个匹配的targetId为止。
	*   count = 0为匹配全部消息，最多匹配10000条
	*/
	public native @Cast("int64") long targetid(); public native MsgSearchProperty targetid(long targetid);
	/**开始时间 */
	public native @Cast("int64") long start_time(); public native MsgSearchProperty start_time(long start_time);
	/**结束时间  起始和结束时间全部为0代表搜索全部时间段 */
	public native @Cast("int64") long end_time(); public native MsgSearchProperty end_time(long end_time);
}
/**查询结构体 */
@Namespace("model") @NoOffset public static class SimpleSearchInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SimpleSearchInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SimpleSearchInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SimpleSearchInfo position(long position) {
        return (SimpleSearchInfo)super.position(position);
    }

	public SimpleSearchInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**0x01男，0x02女, 0x08为群，0x10, 0 非男非女为保密 */
	public native @Cast("int8") byte flag(); public native SimpleSearchInfo flag(byte flag);
	/**目标名称 */
	public native @StdString  String name(); public native SimpleSearchInfo name(String name);
	/**目标头像 */
	public native @StdString  String avatar(); public native SimpleSearchInfo avatar(String avatar);
	public native @StdString  String avatarUrl(); public native SimpleSearchInfo avatarUrl(String avatarUrl);
}
/**消息查询结果 */
@Namespace("model") @NoOffset public static class MsgSearchResult extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgSearchResult(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgSearchResult(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgSearchResult position(long position) {
        return (MsgSearchResult)super.position(position);
    }

	public MsgSearchResult() { super((Pointer)null); allocate(); }
	private native void allocate();
	@NoOffset public static class info extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public info(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public info(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public info position(long position) {
	        return (info)super.position(position);
	    }
	
		public info() { super((Pointer)null); allocate(); }
		private native void allocate();
		/**搜索到对象的targetId */
		public native @Cast("int64") long targetId(); public native info targetId(long targetId);
		/**消息数量 */
		public native int count(); public native info count(int count);
		public native @SharedPtr @ByRef Msg msg(); public native info msg(Msg msg);  //匹配的第一条消息
		public native @ByRef SimpleSearchInfo simpleInfo(); public native info simpleInfo(SimpleSearchInfo simpleInfo); 
	}

	/**搜索到的消息信息集合 */
	public native @ByRef InfoVector infos(); public native MsgSearchResult infos(InfoVector infos);
	/**后续查找的targetId，0代表已搜索全部消息 */
	public native @Cast("int64") long nextTargetId(); public native MsgSearchResult nextTargetId(long nextTargetId);
    /**搜索用的key */
    public native @StdString  String key(); public native MsgSearchResult key(String key);
}

@Namespace("model") @NoOffset public static class MsgDetailSearchProperty extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgDetailSearchProperty(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgDetailSearchProperty(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgDetailSearchProperty position(long position) {
        return (MsgDetailSearchProperty)super.position(position);
    }

	public MsgDetailSearchProperty() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**消息类型 当前只支持2文本 */
	public native int msgtype(); public native MsgDetailSearchProperty msgtype(int msgtype);
	/**目标Id */
	public native @Cast("int64") long targetid(); public native MsgDetailSearchProperty targetid(long targetid);
	/**起始msgId，0为从最早的消息就行搜索 */
	public native int messageId(); public native MsgDetailSearchProperty messageId(int messageId);
	/**一次匹配到最大的消息数量,0为匹配全部消息,最多匹配100000条 */
	public native int count(); public native MsgDetailSearchProperty count(int count);
	/**开始时间 */
	public native @Cast("int64") long start_time(); public native MsgDetailSearchProperty start_time(long start_time);
	/**结束时间  起始和结束时间全部为0代表搜索全部时间段 */
	public native @Cast("int64") long end_time(); public native MsgDetailSearchProperty end_time(long end_time);
}

@Namespace("model") @NoOffset public static class MsgDetailSearchResult extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MsgDetailSearchResult(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MsgDetailSearchResult(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MsgDetailSearchResult position(long position) {
        return (MsgDetailSearchResult)super.position(position);
    }

	public MsgDetailSearchResult() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**后续查找的消息ID，0代表已搜索全部消息 */
	public native @Cast("int64") long nextMsgId(); public native MsgDetailSearchResult nextMsgId(long nextMsgId);
	/**存放此次搜索结果中的所有发送者信息,key为senderUserId */
	public native @ByRef LongSearchMap senderInfos(); public native MsgDetailSearchResult senderInfos(LongSearchMap senderInfos);
	/**保存所有消息内容信息 */
	public native @ByRef MsgPtrVector msgs(); public native MsgDetailSearchResult msgs(MsgPtrVector msgs);
}

@Namespace("model") public static class UploadShareImageProperty extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public UploadShareImageProperty() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public UploadShareImageProperty(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UploadShareImageProperty(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public UploadShareImageProperty position(long position) {
        return (UploadShareImageProperty)super.position(position);
    }

	/** 缩略图 */
	public native @StdString  String thumbImg(); public native UploadShareImageProperty thumbImg(String thumbImg);
	/** 原图 */
	public native @StdString  String srcImg(); public native UploadShareImageProperty srcImg(String srcImg);
	/** 加密秘钥 */
	public native @StdString  String encryptkey(); public native UploadShareImageProperty encryptkey(String encryptkey);
	/** 登录信息保存路径 */
	public native @StdString  String loginfoPath(); public native UploadShareImageProperty loginfoPath(String loginfoPath);
}

@Namespace("model") @NoOffset public static class DownloadImageParam extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DownloadImageParam(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DownloadImageParam(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DownloadImageParam position(long position) {
        return (DownloadImageParam)super.position(position);
    }

	public DownloadImageParam() { super((Pointer)null); allocate(); }
	private native void allocate();
	/** 发送方对方ＩＤ targetID. */
	public native @Cast("int64") long targetID(); public native DownloadImageParam targetID(long targetID);
	/** 消息ID 存fileInfo用. */
	public native @Cast("int64") long msgID(); public native DownloadImageParam msgID(long msgID);
	/** 远程路径 */
	public native @StdString  String rPath(); public native DownloadImageParam rPath(String rPath);
	/** 九图Url路径，一般就传缩略图 */
	public native @ByRef StringVector nineBoxUrl(); public native DownloadImageParam nineBoxUrl(StringVector nineBoxUrl);
	/** 加密密钥，存fileInfo用 */
	public native @StdString  String encryptKey(); public native DownloadImageParam encryptKey(String encryptKey);
	/** 相对路径 下载九图时和nineBoxUrl字段一一对应，单张图片就放在下标0 存fileInfo */
	public native @ByRef StringVector relaPath(); public native DownloadImageParam relaPath(StringVector relaPath);
	/** 标识位 0缩略图 1大图 1~9表示九图的位置 存fileInfo用 isNineBox=true时存缩略图 */
	public native @Cast("int32") int flag(); public native DownloadImageParam flag(int flag);
	/** 文件类型 0.所有 6文档 5图片 89视频 3音频 与msgType一致 */
	public native int fileType(); public native DownloadImageParam fileType(int fileType);
	/** 是否下载九图缩略图 只有在下九图缩略图时置为true 此时flag表示九图位置 传1~9 */
	public native @Cast("bool") boolean isNineBox(); public native DownloadImageParam isNineBox(boolean isNineBox);
	/** 图片宽度 像素 --视频分辨率下载缩略图时传入 */
	public native @Cast("int32") int width(); public native DownloadImageParam width(int width);
	/** 图片高度 像素 */
	public native @Cast("int32") int height(); public native DownloadImageParam height(int height);
	/**增加md5校验 --下载九图时传入多个，单张图片or大图传入一个 */
	public native @ByRef StringVector md5Code(); public native DownloadImageParam md5Code(StringVector md5Code);
}
/** enum model::UploadType */
public static final int
	eFileType_app = 10020,	
	eFileType_share = 10021;

@Namespace("model") @NoOffset public static class UploadFileProperty extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UploadFileProperty(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public UploadFileProperty(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public UploadFileProperty position(long position) {
        return (UploadFileProperty)super.position(position);
    }

	public UploadFileProperty() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**对方的targetId(人或群) */
	public native @Cast("int64") long targetid(); public native UploadFileProperty targetid(long targetid);
	/**标示文件的唯一localId 通过time()生成 */
	public native @Cast("int64") long localid(); public native UploadFileProperty localid(long localid);
	/**附件类型 */
	public native @Cast("int16") int type(); public native UploadFileProperty type(int type);
	/**上传文件的本地路径 */
	public native @StdString  String localPath(); public native UploadFileProperty localPath(String localPath);
	/**文件夹本地路径，上传文件夹时使用 */
	public native @StdString  String dirPath(); public native UploadFileProperty dirPath(String dirPath);
	/**用于存储自定义信息 */
	public native @StdString  String msg(); public native UploadFileProperty msg(String msg);
	/**秘钥  ///断点上传的key必须一致 */
	public native @StdString  String encryptKey(); public native UploadFileProperty encryptKey(String encryptKey);
	/**是否点对点 0 否， 1 是. */
	public native @Cast("int8") byte isP2p(); public native UploadFileProperty isP2p(byte isP2p);
	/** 是否JS上传图片,0 否， 1 是 */
	public native @Cast("int8") byte isJS(); public native UploadFileProperty isJS(byte isJS);
	/** 是否不存消息和文件信息到数据库0 否， 1 是 */
	public native @Cast("int8") byte noStore(); public native UploadFileProperty noStore(byte noStore);
	/**是否断点上传 */
	public native @Cast("bool") boolean isResume(); public native UploadFileProperty isResume(boolean isResume);
	/**密级 */
	public native int securityLevel(); public native UploadFileProperty securityLevel(int securityLevel);
}

@Namespace("model") @NoOffset public static class DownloadFileProperty extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DownloadFileProperty(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DownloadFileProperty(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DownloadFileProperty position(long position) {
        return (DownloadFileProperty)super.position(position);
    }

	public DownloadFileProperty() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**文件的消息ID */
	public native @Cast("int64") long msgid(); public native DownloadFileProperty msgid(long msgid);
	/**个人文件为发送者用户ID，群文件为群ID */
	public native @Cast("int64") long targetId(); public native DownloadFileProperty targetId(long targetId);
	/**标示文件的唯一localId */
	public native @Cast("int64") long localId(); public native DownloadFileProperty localId(long localId);
	/**发送者ID，个人文件时和targetId相同	 */
	public native @Cast("int64") long fromUserId(); public native DownloadFileProperty fromUserId(long fromUserId);
	public native @StdString  String fileName(); public native DownloadFileProperty fileName(String fileName);		// 文件名
	/**本地保存地址 */
	public native @StdString  String localPath(); public native DownloadFileProperty localPath(String localPath);
	/**服务器地址 */
	public native @StdString  String url(); public native DownloadFileProperty url(String url);
	/**加密KEY */
	public native @StdString  String encryptKey(); public native DownloadFileProperty encryptKey(String encryptKey);
	/** 是否接收局域网直传文件. */
	public native @Cast("bool") boolean bisP2P(); public native DownloadFileProperty bisP2P(boolean bisP2P);
	/**是否断点续传下载 */
	public native @Cast("bool") boolean bIsResume(); public native DownloadFileProperty bIsResume(boolean bIsResume);
	/** 下载的线程数量 bIsResume为true且threadCount>1时生效 最大允许5个线程 */
	public native int threadCount(); public native DownloadFileProperty threadCount(int threadCount);
	/** 文件类型 0.所有 6文档 5图片 89视频 3音频 与msgType一致 */
	public native int fileType(); public native DownloadFileProperty fileType(int fileType);
	public native @StdString  String relaPath(); public native DownloadFileProperty relaPath(String relaPath);		/**iOS专用，相对路径 */
	/** 视频、音频时长 秒  --视频宽高size下载缩略图时传入 */
	public native @Cast("int64") long mediaTime(); public native DownloadFileProperty mediaTime(long mediaTime);
	/**密级 */
	public native int securityLevel(); public native DownloadFileProperty securityLevel(int securityLevel);
	/** 文件MD5值，从文件消息中获取，为空则不校验 */
	public native @StdString  String md5Code(); public native DownloadFileProperty md5Code(String md5Code);
	public native @Cast("int8") byte isGroupDoc(); public native DownloadFileProperty isGroupDoc(byte isGroupDoc); //是否群文档  0：否 1：是
	public native @Cast("int64") long docid(); public native DownloadFileProperty docid(long docid); //群文档的docid
}

@Namespace("model") @NoOffset public static class Fileinfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Fileinfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Fileinfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Fileinfo position(long position) {
        return (Fileinfo)super.position(position);
    }

	public Fileinfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**文件ID */
	public native @Cast("int64") long fileid(); public native Fileinfo fileid(long fileid);
	/**发送者ID */
	public native @Cast("int64") long userid(); public native Fileinfo userid(long userid);
	/**目标ID,可以是群,也可以是用户 */
	public native @Cast("int64") long targetid(); public native Fileinfo targetid(long targetid);
	/**文件大小 */
	public native @Cast("int64") long size(); public native Fileinfo size(long size);
	/**上传时间 */
	public native @Cast("int64") long time(); public native Fileinfo time(long time);
	public native @Cast("int8") byte fileTerm(); public native Fileinfo fileTerm(byte fileTerm);		/**群文件有效期< 1.临时 2.永久 */
	/**文件类型 0.所有 6文档 5图片 89视频 3音频 与msgType一致 */
	public native @Cast("int8") byte fileType(); public native Fileinfo fileType(byte fileType);
	/**本地路径 */
	public native @StdString  String path(); public native Fileinfo path(String path);
	/**文件名 */
	public native @StdString  String name(); public native Fileinfo name(String name);
	/**文件url */
	public native @StdString  String url(); public native Fileinfo url(String url);
	/**加密KEY */
	public native @StdString  String encrypt_key(); public native Fileinfo encrypt_key(String encrypt_key);
	/**缩略图本地路径 */
	public native @StdString  String thumbPath(); public native Fileinfo thumbPath(String thumbPath);
	/**缩略图地址 */
	public native @StdString  String thumbUrl(); public native Fileinfo thumbUrl(String thumbUrl);
	/**缩略图相对路径 */
	public native @StdString  String thumbRelaPath(); public native Fileinfo thumbRelaPath(String thumbRelaPath);
	/**相对路径 */
	public native @StdString  String relaPath(); public native Fileinfo relaPath(String relaPath);
	public native @Cast("int64") long mediaTime(); public native Fileinfo mediaTime(long mediaTime);
	public native @Cast("int32") int width(); public native Fileinfo width(int width);
	public native @Cast("int32") int height(); public native Fileinfo height(int height);
	/**密级 */
	public native int securityLevel(); public native Fileinfo securityLevel(int securityLevel);
}

@Namespace("model") @NoOffset public static class OfflineMsg extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OfflineMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OfflineMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OfflineMsg position(long position) {
        return (OfflineMsg)super.position(position);
    }

	public OfflineMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**1未读消息 2设备已读消息 */
	public native int offline_type(); public native OfflineMsg offline_type(int offline_type);
	/**数量 */
	public native int count(); public native OfflineMsg count(int count);
	public native @SharedPtr @ByRef Msg msg(); public native OfflineMsg msg(Msg msg);
}

@Namespace("model") public static class stupdateInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public stupdateInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public stupdateInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public stupdateInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public stupdateInfo position(long position) {
        return (stupdateInfo)super.position(position);
    }

	/*该字段决定预登陆是否该缓存升级服务器的安装包;
	0，代表不缓存，返回给客户端运维服务器的安装包下载地址;
	1，代表预登陆缓存到本地，返回给客户端本地服务器的安装包下载地址
	*/
	public native @StdString  String nocache(); public native stupdateInfo nocache(String nocache);
	/**升级服务器安装包下载地址 */
	public native @StdString  String url(); public native stupdateInfo url(String url);
	/**安装包描述信息 */
	public native @StdString  String descr(); public native stupdateInfo descr(String descr);
	/**安装包大小 */
	public native @StdString  String fileSize(); public native stupdateInfo fileSize(String fileSize);
	/**安装包签名 */
	public native @StdString  String signCode(); public native stupdateInfo signCode(String signCode);
	/**是否 当前下载包给web端 */
	public native @StdString  String htmlDowmload(); public native stupdateInfo htmlDowmload(String htmlDowmload);
	/**透传信息 */
	public native @StdString  String ext(); public native stupdateInfo ext(String ext);
}

/**版本升级信息 */
@Namespace("model") @NoOffset public static class UpgradeInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UpgradeInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public UpgradeInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public UpgradeInfo position(long position) {
        return (UpgradeInfo)super.position(position);
    }

	public UpgradeInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	/** 升级包的HAXI值 */
	public native @StdString  String hasCode(); public native UpgradeInfo hasCode(String hasCode);
	/** 升级类型 0建议升级,1强制升级 gradeType. */
	public native @Cast("int8") byte gradeType(); public native UpgradeInfo gradeType(byte gradeType);
	/** 服务器版本号 version. */
	public native @StdString  String version(); public native UpgradeInfo version(String version);
	/** 升级的地址 */
	public native @StdString  String updateAddr(); public native UpgradeInfo updateAddr(String updateAddr);
	/**新预登录信息 */
	public native @ByRef stupdateInfoVector upAddr(); public native UpgradeInfo upAddr(stupdateInfoVector upAddr);
	/** 升级描述信息 */
	public native @StdString  String desc(); public native UpgradeInfo desc(String desc);
	/** 客户端信息 */
	public native @StdString  String clientInfo(); public native UpgradeInfo clientInfo(String clientInfo);
}


/** 企业信息(搜索中使用) */

@Namespace("model") @NoOffset public static class EntInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EntInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public EntInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public EntInfo position(long position) {
        return (EntInfo)super.position(position);
    }

	public EntInfo() { super((Pointer)null); allocate(); }
	private native void allocate();

	/** 企业ID enterpriseID. */
	public native @Cast("int64") long enterpriseID(); public native EntInfo enterpriseID(long enterpriseID);
	/** 企业全称 fullName. */
	public native @StdString  String fullName(); public native EntInfo fullName(String fullName);
	/** 企业简称 shortName. */
	public native @StdString  String shortName(); public native EntInfo shortName(String shortName);
	/** 企业关键字 keyWords. */
	public native @StdString  String keyWords(); public native EntInfo keyWords(String keyWords);
	/** 企业电话 phone. */
	public native @StdString  String phone(); public native EntInfo phone(String phone);
}


@Namespace("model") @NoOffset public static class OrGroupinfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrGroupinfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrGroupinfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OrGroupinfo position(long position) {
        return (OrGroupinfo)super.position(position);
    }

	public OrGroupinfo() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("int64") long groupid(); public native OrGroupinfo groupid(long groupid);
	public native @Cast("int32") int orderid(); public native OrGroupinfo orderid(int orderid);
	public native @StdString  String groupname(); public native OrGroupinfo groupname(String groupname);
	public native @StdString  String orgname(); public native OrGroupinfo orgname(String orgname);
}


/**
* \struct st_orgUserinfo
* \brief  组织用户信息（搜索中使用）
*/
@Namespace("model") @NoOffset public static class OrgUserinfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrgUserinfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrgUserinfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OrgUserinfo position(long position) {
        return (OrgUserinfo)super.position(position);
    }

	public OrgUserinfo() { super((Pointer)null); allocate(); }
	private native void allocate();

	/** 用户ID      userid. */
	public native @Cast("int64") long userid(); public native OrgUserinfo userid(long userid);
	/** 用户名称 	 name. */
	public native @StdString  String name(); public native OrgUserinfo name(String name);
	//std::vector<std::string>  phonenumbers;     ///< 电话号码清单 phonenumbers.
	//std::vector<std::string>  emails;           ///< 电子邮件清单 emails.
	/** orgname 组织名称. */
	public native @StdString  String orgname(); public native OrgUserinfo orgname(String orgname);
	/** 头像. */
	public native @StdString  String userHead(); public native OrgUserinfo userHead(String userHead);
}


/**
* \struct st_entAppinfo
* \brief 应用信息
*/
@Namespace("model") @NoOffset public static class EntAppinfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EntAppinfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public EntAppinfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public EntAppinfo position(long position) {
        return (EntAppinfo)super.position(position);
    }

	public EntAppinfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	/** 应用标识 */
	public native @StdString  String appSign(); public native EntAppinfo appSign(String appSign);
	/** 应用名称 */
	public native @StdString  String appName(); public native EntAppinfo appName(String appName);
	/** 应用图标 */
	public native @StdString  String appIcon(); public native EntAppinfo appIcon(String appIcon);
	public native @StdString  String appIconUrl(); public native EntAppinfo appIconUrl(String appIconUrl); /**服务器应用图标全路径 */
	/** 应用ID */
	public native @Cast("int64") long appID(); public native EntAppinfo appID(long appID);
	/** 应用主页 */
	public native @StdString  String appHomeUrl(); public native EntAppinfo appHomeUrl(String appHomeUrl);
	/** entID */
	public native @Cast("int64") long entID(); public native EntAppinfo entID(long entID);
	/** 应用名称 */
	public native @StdString  String entName(); public native EntAppinfo entName(String entName);
	/** 客户端配置 */
	public native @ByRef MapStr2 configItems(); public native EntAppinfo configItems(MapStr2 configItems);
	/** 应用密钥 */
	public native @StdString  String appSecret(); public native EntAppinfo appSecret(String appSecret);
	/** 应用TOKEN */
	public native @StdString  String appToken(); public native EntAppinfo appToken(String appToken);
	/** 应用菜单 */
	public native @StdString  String appMenus(); public native EntAppinfo appMenus(String appMenus);
	/** openID是否编码，0:不编码，1:编码 */
	public native @Cast("int8") byte openIDEncoded(); public native EntAppinfo openIDEncoded(byte openIDEncoded);
	/** 应用子账号 */
	public native @StdString  String subAccount(); public native EntAppinfo subAccount(String subAccount);
	/**子类型  1 H5应用，2 移动应用 */
	public native @Cast("int8") byte appSubType(); public native EntAppinfo appSubType(byte appSubType);
	/**推荐 1 是 ，2 否 */
	public native @Cast("int8") byte recommend(); public native EntAppinfo recommend(byte recommend);
	/** 默认安装 1 是 ，2 否 */
	public native @Cast("int8") byte defaultInstall(); public native EntAppinfo defaultInstall(byte defaultInstall);
	/**扩展字段 json 格式，mainUrl H5首页，adminUrl 后台管理地址，myUrl 个人中心地址 */
	public native @StdString  String extend(); public native EntAppinfo extend(String extend);
	/**设备类型 1(iPhone_E), 2(iPad_E), 3(iPhone), 4(iPad), 5(androidPhone), 6(androidPad) */
	public native @StdString  String deviceTypes(); public native EntAppinfo deviceTypes(String deviceTypes);
	/**消息历史地址 */
	public native @StdString  String messageHistoryUrl(); public native EntAppinfo messageHistoryUrl(String messageHistoryUrl);
	/**是否启用自定义菜单   1 启用  0停用 */
	public native @StdString  String menuOpen(); public native EntAppinfo menuOpen(String menuOpen);
	/**是否启用自定义菜单响应事件  1启用 0停用 */
	public native @StdString  String replyMenuOpen(); public native EntAppinfo replyMenuOpen(String replyMenuOpen);
	/**智能开关 2 */
	public native @Cast("int8") byte appType(); public native EntAppinfo appType(byte appType);
	/**公众号状态 */
	public native @Cast("int8") byte status(); public native EntAppinfo status(byte status);
	/**1:订阅号2：企业号 3：应用号 */
	public native @Cast("int8") byte subOrAppType(); public native EntAppinfo subOrAppType(byte subOrAppType);
	/**应用功能介绍 */
	public native @StdString  String appFunctintroduce(); public native EntAppinfo appFunctintroduce(String appFunctintroduce);
	/**公众号介绍 */
	public native @StdString  String appDescription(); public native EntAppinfo appDescription(String appDescription);
	/**公众号创建者id  可能是appid也可能是userid */
	public native @Cast("int64") long ownerId(); public native EntAppinfo ownerId(long ownerId);
	/**应用是否需要强制授权1需要，0不需要 */
	public native @Cast("int8") byte forceGrant(); public native EntAppinfo forceGrant(byte forceGrant);
	/**授权介绍 */
	public native @StdString  String grantIntroduce(); public native EntAppinfo grantIntroduce(String grantIntroduce);
	public native @Cast("int64") long CSID(); public native EntAppinfo CSID(long CSID);  //客服id
}

@Namespace("model") @NoOffset public static class LocalSearchMemberInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LocalSearchMemberInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LocalSearchMemberInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LocalSearchMemberInfo position(long position) {
        return (LocalSearchMemberInfo)super.position(position);
    }

	public LocalSearchMemberInfo() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("int64") long groupID(); public native LocalSearchMemberInfo groupID(long groupID);				//所在群ID
	public native int groupMemberNum(); public native LocalSearchMemberInfo groupMemberNum(int groupMemberNum);			//所在群人数
	public native int matchFlag(); public native LocalSearchMemberInfo matchFlag(int matchFlag);				//匹配类型 1.通过用户名匹配到 2.通过备注匹配到
	public native @Cast("int64") long userID(); public native LocalSearchMemberInfo userID(long userID);               //匹配到的用户ID
	public native @StdString  String name(); public native LocalSearchMemberInfo name(String name);			//匹配到的用户名
	public native @StdString  String remark(); public native LocalSearchMemberInfo remark(String remark);         //匹配到的用户备注
	public native int securityLevel(); public native LocalSearchMemberInfo securityLevel(int securityLevel);     //工作密级
	public native int status(); public native LocalSearchMemberInfo status(int status);               //<是否为外服成员（4 外服成员）
}

@Namespace("model") public static class SearchResult extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SearchResult() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SearchResult(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SearchResult(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SearchResult position(long position) {
        return (SearchResult)super.position(position);
    }

    public native @StdString  String key(); public native SearchResult key(String key);
	public native @ByRef UserVector users(); public native SearchResult users(UserVector users);
	public native @ByRef TinyGroupVector groups(); public native SearchResult groups(TinyGroupVector groups);

	/** 企业列表 vtent. */
	public native @ByRef EntInfoVector vtent(); public native SearchResult vtent(EntInfoVector vtent);
	/** 企业组织列表 vtOrgroup. */
	public native @ByRef OrGroupinfoVector vtOrgroup(); public native SearchResult vtOrgroup(OrGroupinfoVector vtOrgroup);
	/** 组织用户列表 vtorgUser */
	public native @ByRef StrVectorMap mporgUser(); public native SearchResult mporgUser(StrVectorMap mporgUser);
	/** 企业应用列表 vtEntApp */
	public native @ByRef EntAppinfoVector vtEntApp(); public native SearchResult vtEntApp(EntAppinfoVector vtEntApp);
	/**匹配到的群成员 */
	public native @ByRef LocalSearchMemberInfoVector members(); public native SearchResult members(LocalSearchMemberInfoVector members);

}

/**************************************工作台应用群应用*********************************************************/
@Namespace("model") @NoOffset public static class QueryMarketApplication extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QueryMarketApplication(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QueryMarketApplication(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QueryMarketApplication position(long position) {
        return (QueryMarketApplication)super.position(position);
    }


	public QueryMarketApplication() { super((Pointer)null); allocate(); }
	private native void allocate();

	/**页码 */
	public native @Cast("int32") int pageNum(); public native QueryMarketApplication pageNum(int pageNum);
	/**页长 */
	public native @Cast("int32") int pageSize(); public native QueryMarketApplication pageSize(int pageSize);
	/**类型 2（IOS），3（Android） */
	public native @Cast("int32") int deviceType(); public native QueryMarketApplication deviceType(int deviceType);
	/**用户ID，预留类型，暂时不用输入 */
	public native @Cast("int64") long userID(); public native QueryMarketApplication userID(long userID);
	/**应用名称 模糊查询用 */
	public native @StdString  String appName(); public native QueryMarketApplication appName(String appName);
	/** json字符串，内部实体，根据查询类型解析 */
	public native @StdString  String jsonStr(); public native QueryMarketApplication jsonStr(String jsonStr);
	/**查询类型;1.工作台应用市场展示应用,3.群应用（默认为1） */
	public native @Cast("int8") byte releaseType(); public native QueryMarketApplication releaseType(byte releaseType);
	/**获取方式，默认为0，获取全部和隐藏应用，1 获取所有未忽略的应用 */
	public native @Cast("int8") byte gettype(); public native QueryMarketApplication gettype(byte gettype);
}
/**************************************工作台应用群应用*********************************************************/
/**************************************群主/管理员忽略/添加群应用入参*********************************************************/
@Namespace("model") @NoOffset public static class IgnoreMarketAppBean extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IgnoreMarketAppBean(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IgnoreMarketAppBean(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public IgnoreMarketAppBean position(long position) {
        return (IgnoreMarketAppBean)super.position(position);
    }

	public IgnoreMarketAppBean() { super((Pointer)null); allocate(); }
	private native void allocate();
	/* 操作关联ID */
	public native @Cast("int64") long relationId(); public native IgnoreMarketAppBean relationId(long relationId);
	/* 应用号ID */
	public native @Cast("int64") long vestAppId(); public native IgnoreMarketAppBean vestAppId(long vestAppId);
	/* 关联ID类型;1.用户 2.群 */
	public native @Cast("int64") long relationIdType(); public native IgnoreMarketAppBean relationIdType(long relationIdType);
	/* 操作者ID */
	public native @Cast("int64") long operatorId(); public native IgnoreMarketAppBean operatorId(long operatorId);
	/* 操作类型1添加 2忽略 */
	public native @Cast("int8") byte operatorType(); public native IgnoreMarketAppBean operatorType(byte operatorType);
}
/**************************************群主/管理员忽略/添加群应用入参*********************************************************/

/**查询标签 */
@Namespace("model") @NoOffset public static class queryTag extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public queryTag(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public queryTag(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public queryTag position(long position) {
        return (queryTag)super.position(position);
    }

	public queryTag() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int32") int key(); public native queryTag key(int key);
	public native @StdString  String value(); public native queryTag value(String value);
}
/**应用市场信息 */
@Namespace("model") @NoOffset public static class SmallMarketAppInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SmallMarketAppInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SmallMarketAppInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SmallMarketAppInfo position(long position) {
        return (SmallMarketAppInfo)super.position(position);
    }

	public SmallMarketAppInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**应用ID */
	public native @Cast("int64") long appID(); public native SmallMarketAppInfo appID(long appID);
	/**企业ID */
	public native @Cast("int64") long entID(); public native SmallMarketAppInfo entID(long entID);
	/**所有者id */
	public native @Cast("int64") long ownerId(); public native SmallMarketAppInfo ownerId(long ownerId);
	/**状态 1或12启用，2或16停用，3或15删除，11、应用待审核 12、审核通过及启用 13、应用创建审核驳回 15应用删除 16、应用停用 20、应用号下架 21、应用号应用强制下架 */
	public native @Cast("int8") byte status(); public native SmallMarketAppInfo status(byte status);
	/**类型：1(H5应用), 2(IOS应用), 3(Android应用), 4(内部应用), 5(快捷应用) 6(本地添加的快捷应用) */
	public native @Cast("int8") byte appType(); public native SmallMarketAppInfo appType(byte appType);
	/**默认安装 1 是 ，2 否 */
	public native @Cast("int8") byte defaultInstall(); public native SmallMarketAppInfo defaultInstall(byte defaultInstall);
	/**个人安全中心是否展示 1 是 ，2 否 */
	public native @Cast("int8") byte showInMy(); public native SmallMarketAppInfo showInMy(byte showInMy);
	/**应用标识 */
	public native @StdString  String appSign(); public native SmallMarketAppInfo appSign(String appSign);
	/**应用名称 */
	public native @StdString  String appName(); public native SmallMarketAppInfo appName(String appName);
	/**应用图标		 */
	public native @StdString  String appIcon(); public native SmallMarketAppInfo appIcon(String appIcon);
	/**应用图标url地址	 */
	public native @StdString  String appIconUrl(); public native SmallMarketAppInfo appIconUrl(String appIconUrl);
	/**应用功能介绍 */
	public native @StdString  String appFunctintroduce(); public native SmallMarketAppInfo appFunctintroduce(String appFunctintroduce);
	/**版本号	 */
	public native @StdString  String version(); public native SmallMarketAppInfo version(String version);
	/**H5首页 */
	public native @StdString  String mainUrl(); public native SmallMarketAppInfo mainUrl(String mainUrl);
	/**后台管理地址 */
	public native @StdString  String adminUrl(); public native SmallMarketAppInfo adminUrl(String adminUrl);
	/**个人中心地址 */
	public native @StdString  String myUrl(); public native SmallMarketAppInfo myUrl(String myUrl);
	/**包名 */
	public native @StdString  String packageName(); public native SmallMarketAppInfo packageName(String packageName);
	/**下载地址 */
	public native @StdString  String downloadUrl(); public native SmallMarketAppInfo downloadUrl(String downloadUrl);
	/**urlScheme */
	public native @StdString  String urlScheme(); public native SmallMarketAppInfo urlScheme(String urlScheme);
	/**快捷应用地址 */
	public native @StdString  String quickUrl(); public native SmallMarketAppInfo quickUrl(String quickUrl);
	/**扩展字段 */
	public native @StdString  String extend(); public native SmallMarketAppInfo extend(String extend);
	/**activity */
	public native @StdString  String activityName(); public native SmallMarketAppInfo activityName(String activityName);
	/** 查询标签 */
	public native @ByRef queryVector tags(); public native SmallMarketAppInfo tags(queryVector tags);
	/** 应用来源 1：后台管理应用 2：开放平台应用 */
	public native @Cast("int8") byte sourceType(); public native SmallMarketAppInfo sourceType(byte sourceType);
	/** 应用对应的应用号id  */
	public native @Cast("int64") long vestAppID(); public native SmallMarketAppInfo vestAppID(long vestAppID);
	/** 应用分类id */
	public native @Cast("int64") long appTypeID(); public native SmallMarketAppInfo appTypeID(long appTypeID);
	/** 应用分类名称 */
	public native @StdString  String appTypeName(); public native SmallMarketAppInfo appTypeName(String appTypeName);
	/** 应用简介（edit by jss 2021/04/27） */
	public native @StdString  String introduce(); public native SmallMarketAppInfo introduce(String introduce);
}
/**********************************************应用市场分页查询,添加群应用*******************************/
@Namespace("model") @NoOffset public static class SmallMarketAppPage extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SmallMarketAppPage(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SmallMarketAppPage(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SmallMarketAppPage position(long position) {
        return (SmallMarketAppPage)super.position(position);
    }

	public SmallMarketAppPage() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**页码 */
	public native @Cast("int32") int pageNum(); public native SmallMarketAppPage pageNum(int pageNum);
	/**页长 */
	public native @Cast("int32") int pageSize(); public native SmallMarketAppPage pageSize(int pageSize);
	/**总数 */
	public native @Cast("int32") int count(); public native SmallMarketAppPage count(int count);
	/**总页数 */
	public native @Cast("int32") int totalPage(); public native SmallMarketAppPage totalPage(int totalPage);
	/**应用列表 */
	public native @ByRef SmallMarketAppInfoVector appInfoList(); public native SmallMarketAppPage appInfoList(SmallMarketAppInfoVector appInfoList);
	/**为以后考虑，标识暂时1为工作台隐藏应用3为群隐藏应用（修订） */
	public native @ByRef ByteLongSmallMarketAppInfoMapMap extMap(); public native SmallMarketAppPage extMap(ByteLongSmallMarketAppInfoMapMap extMap);
}
/**********************************************应用市场分页查询,群应用*******************************/

@Namespace("model") @NoOffset public static class EnterpriseDictionary extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EnterpriseDictionary(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public EnterpriseDictionary(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public EnterpriseDictionary position(long position) {
        return (EnterpriseDictionary)super.position(position);
    }

	public EnterpriseDictionary() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**组织ID */
	public native @Cast("int32") int id(); public native EnterpriseDictionary id(int id);
	/**父组织ID */
	public native @Cast("int32") int parentId(); public native EnterpriseDictionary parentId(int parentId);
	/**字段的名字 */
	public native @StdString  String dicValue(); public native EnterpriseDictionary dicValue(String dicValue);
	/**字段的键值 */
	public native @StdString  String dickey(); public native EnterpriseDictionary dickey(String dickey);
	/** 扩展字段，格式为{"isEdit":0,"isFriend":0,"isInput":0,"isLogin":0,"isShow":0,"isStrange":0},
	isEdit:是否客户端可编辑;
	isFriend:客户端是否好友可见;
	isInput:是否必填字段;
	isLogin:是否登录项字段;
	isShow:客户端组织架构是否可见;
	isStrange:客户端是否陌生人可见*/
	public native @StdString  String extend(); public native EnterpriseDictionary extend(String extend);      
}

/**通讯录 */
@Namespace("model") @NoOffset public static class PhoneBookContact extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PhoneBookContact(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PhoneBookContact(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PhoneBookContact position(long position) {
        return (PhoneBookContact)super.position(position);
    }

	public PhoneBookContact() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**联系人号码 */
	public native @StdString  String contactNum(); public native PhoneBookContact contactNum(String contactNum);
	/**联系人姓名 */
	public native @StdString  String name(); public native PhoneBookContact name(String name);
	/**数据来源 1：手机通讯录； 2：qq好友； */
	public native @Cast("int8") byte source(); public native PhoneBookContact source(byte source);
    /**号码归属地 1：国内； 2：国际； */
    public native @Cast("int8") byte area(); public native PhoneBookContact area(byte area);
}

/**本地通讯录 */
@Namespace("model") @NoOffset public static class localPhoneBook extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public localPhoneBook(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public localPhoneBook(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public localPhoneBook position(long position) {
        return (localPhoneBook)super.position(position);
    }

	public localPhoneBook() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**联系人号码 */
	public native @StdString  String phone(); public native localPhoneBook phone(String phone);
	/**联系人ID */
	public native @Cast("int64") long userId(); public native localPhoneBook userId(long userId);
	/**标示 */
	public native @Cast("int8") byte flag(); public native localPhoneBook flag(byte flag);
	/**手机通讯录里的名称 */
	public native @StdString  String phoneName(); public native localPhoneBook phoneName(String phoneName);
	/** 用户名称 */
	public native @StdString  String userName(); public native localPhoneBook userName(String userName);
	/** 用户头像 */
	public native @StdString  String userHead(); public native localPhoneBook userHead(String userHead);
	public native int status(); public native localPhoneBook status(int status);              /**外服人员为4 */
}

/**上传通讯录后的推荐者 */
@Namespace("model") @NoOffset public static class RecommendContact extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RecommendContact(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RecommendContact(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public RecommendContact position(long position) {
        return (RecommendContact)super.position(position);
    }

	public RecommendContact() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @ByRef PhoneBookContact pbContact(); public native RecommendContact pbContact(PhoneBookContact pbContact);	//上传的联系人
	public native @ByRef User contact(); public native RecommendContact contact(User contact);				//联系人信息
	public native @ByRef User recommend(); public native RecommendContact recommend(User recommend);				//推荐者信息
	/** 是否是好友标识，1表示是好友关系，2表示不是好友关系, 3表示等待验证 */
	public native @Cast("int8") byte isBuddy(); public native RecommendContact isBuddy(byte isBuddy);
}

@Namespace("model") @NoOffset public static class transferLocalData extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public transferLocalData(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public transferLocalData(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public transferLocalData position(long position) {
        return (transferLocalData)super.position(position);
    }

	public transferLocalData() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**要导入或导出文件的存放路径  */
	public native @StdString  String filePath(); public native transferLocalData filePath(String filePath);

	/**当前0.0.1 */
	public native @StdString  String version(); public native transferLocalData version(String version);
	/**导出时选择从那天开始 */
	public native int year(); public native transferLocalData year(int year);
	public native int mon(); public native transferLocalData mon(int mon);
	public native int day(); public native transferLocalData day(int day);
	/**0:导出;1:导入;2:南京数据迁移 */
	public native @Cast("int8") byte type(); public native transferLocalData type(byte type);
}

/**p2p传文件请求 */
@Namespace("model") @NoOffset public static class P2pSendFileReq extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public P2pSendFileReq(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public P2pSendFileReq(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public P2pSendFileReq position(long position) {
        return (P2pSendFileReq)super.position(position);
    }

	public P2pSendFileReq() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int8") byte fileType(); public native P2pSendFileReq fileType(byte fileType); /**1:文件, 2:目录 */
	public native @StdString  String fileName(); public native P2pSendFileReq fileName(String fileName); /**文件名称 */
	public native @Cast("int64") long fileSize(); public native P2pSendFileReq fileSize(long fileSize); /**文件大小
	/**
	* 发送文件的标识,响应的时候需要回传回去
	*/
	public native @Cast("int64") long fileSign(); public native P2pSendFileReq fileSign(long fileSign); /**发送标识 */
	public native @Cast("int64") long sendUserID(); public native P2pSendFileReq sendUserID(long sendUserID);/**发送者ID */
}

/**p2p对象 */
@Namespace("model") @NoOffset public static class p2pUser extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public p2pUser(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public p2pUser(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public p2pUser position(long position) {
        return (p2pUser)super.position(position);
    }

	public p2pUser() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**用户ID */
	public native @Cast("int64") long userid(); public native p2pUser userid(long userid);
	/**PC 0x01，移动 0x02 */
	public native @Cast("int8") byte flag(); public native p2pUser flag(byte flag);
}

@Namespace("model") @NoOffset public static class downloadFileInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public downloadFileInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public downloadFileInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public downloadFileInfo position(long position) {
        return (downloadFileInfo)super.position(position);
    }

	public downloadFileInfo() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("int8") byte fileType(); public native downloadFileInfo fileType(byte fileType); /* 1:文件, 2:文件夹 */
	public native @Cast("int64") long size(); public native downloadFileInfo size(long size);    /* 当前文件大小, http上传时是总分片数 */
	public native @Cast("int64") long finished(); public native downloadFileInfo finished(long finished); /* 完成量, http上传时是已上传的分片数 */
	public native @StdString  String remotePath(); public native downloadFileInfo remotePath(String remotePath); /* 远端路径 */
	public native @StdString  String localPath(); public native downloadFileInfo localPath(String localPath);  /* 本地路径 */
}
//子账号信息
@Namespace("model") @NoOffset public static class SubServerInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SubServerInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SubServerInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SubServerInfo position(long position) {
        return (SubServerInfo)super.position(position);
    }

	public SubServerInfo() { super((Pointer)null); allocate(); }
	private native void allocate();
	/** 服务器地址 */
	public native @StdString  String addr(); public native SubServerInfo addr(String addr);
	/** 用户ＩＤ */
	public native @Cast("int64") long userId(); public native SubServerInfo userId(long userId);
	/** 登录账号名称 */
	public native @StdString  String name(); public native SubServerInfo name(String name);
	/** 头像 */
	public native @StdString  String avatar(); public native SubServerInfo avatar(String avatar);
	/** 账号 */
	public native @StdString  String account(); public native SubServerInfo account(String account);
	/** 备注 */
	public native @StdString  String remark(); public native SubServerInfo remark(String remark);
	/** 账号类型 */
	public native @Cast("int8") byte type(); public native SubServerInfo type(byte type);
	/**置顶时间(毫秒)，0标识没有置顶 */
	public native @Cast("int64") long topTime(); public native SubServerInfo topTime(long topTime);
	public native @StdString  String verImgPath(); public native SubServerInfo verImgPath(String verImgPath); /**智能客服信息 */
}
 @Namespace("model") @NoOffset public static class upMsgCt extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public upMsgCt(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public upMsgCt(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public upMsgCt position(long position) {
         return (upMsgCt)super.position(position);
     }
 
	public upMsgCt() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int8") byte type(); public native upMsgCt type(byte type);
	/**包名 */
	public native @StdString  String PackName(); public native upMsgCt PackName(String PackName);
	/**用户名 */
	public native @StdString  String UserName(); public native upMsgCt UserName(String UserName);
	/**消息数 */
	public native @StdString  String MsgNum(); public native upMsgCt MsgNum(String MsgNum);
	/**设备类型 */
	public native @StdString  String devtype(); public native upMsgCt devtype(String devtype);
}

 /**敏感词 */
 @Namespace("model") @NoOffset public static class BadWord extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public BadWord(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public BadWord(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public BadWord position(long position) {
         return (BadWord)super.position(position);
     }
 
	 public BadWord() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 0不过滤 1使用*号 2禁止发送 */
	 public native @Cast("int8") byte badWordType(); public native BadWord badWordType(byte badWordType);
	 /** 敏感词列表 */
	 public native @ByRef StringVector badWordList(); public native BadWord badWordList(StringVector badWordList);
 }
 @Namespace("model") @NoOffset public static class reqEntAppInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public reqEntAppInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public reqEntAppInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public reqEntAppInfo position(long position) {
         return (reqEntAppInfo)super.position(position);
     }
 
	 public reqEntAppInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 1.企业号 2.应用号 */
	 public native @Cast("int8") byte type(); public native reqEntAppInfo type(byte type);
	 /** 页码 */
	 public native @Cast("int32") int pageNum(); public native reqEntAppInfo pageNum(int pageNum);
	 /** 每页大小 */
	 public native @Cast("int32") int pageSize(); public native reqEntAppInfo pageSize(int pageSize);
 }

 @Namespace("model") public static class oauthReq extends Pointer {
     static { Loader.load(); }
     /** Default native constructor. */
     public oauthReq() { super((Pointer)null); allocate(); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public oauthReq(long size) { super((Pointer)null); allocateArray(size); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public oauthReq(Pointer p) { super(p); }
     private native void allocate();
     private native void allocateArray(long size);
     @Override public oauthReq position(long position) {
         return (oauthReq)super.position(position);
     }
 
	 /** 应用ID */
	 public native @StdString  String appID(); public native oauthReq appID(String appID);
	 /** 用户ID */
	 public native @StdString  String userID(); public native oauthReq userID(String userID);
	 /** 账户类型 */
	 public native @StdString  String accountType(); public native oauthReq accountType(String accountType);
	 /** 账户 */
	 public native @ByRef OptionalString account(); public native oauthReq account(OptionalString account);
	 /** 密码 */
	 public native @ByRef OptionalString password(); public native oauthReq password(OptionalString password);
 }

 @Namespace("model") @NoOffset public static class qVerifyCodes extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public qVerifyCodes(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public qVerifyCodes(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public qVerifyCodes position(long position) {
         return (qVerifyCodes)super.position(position);
     }
 
	 public qVerifyCodes() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 类型 1.根据用户ID向用户发送短信(只根据语言发送，不处理内容) */
	 public native @ByRef OptionalByte type(); public native qVerifyCodes type(OptionalByte type);
	 /** 用户ID集合 */
	 public native @ByRef LongVector userIDs(); public native qVerifyCodes userIDs(LongVector userIDs);
	 public native @Cast("bool") boolean isSetUserIDs(); public native qVerifyCodes isSetUserIDs(boolean isSetUserIDs);
 }
 @Namespace("model") @NoOffset public static class AuthUserBean extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public AuthUserBean(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public AuthUserBean(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public AuthUserBean position(long position) {
         return (AuthUserBean)super.position(position);
     }
 
	 public AuthUserBean() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long userID(); public native AuthUserBean userID(long userID);                              /**用户ID */
	 public native @StdString  String name(); public native AuthUserBean name(String name);                          /**用户名 */
	 public native @Cast("int8") byte sex(); public native AuthUserBean sex(byte sex);                                  /**性别 */
	 public native @StdString  String area(); public native AuthUserBean area(String area);                          /**区域 */
	 public native @Cast("int16") int year(); public native AuthUserBean year(int year);                               /**生日 */
	 public native @Cast("int8") byte month(); public native AuthUserBean month(byte month);
	 public native @Cast("int8") byte day(); public native AuthUserBean day(byte day);
	 public native @StdString  String school(); public native AuthUserBean school(String school);                        /**毕业学校 */
	 public native @StdString  String portraitURL(); public native AuthUserBean portraitURL(String portraitURL);                   /**头像地址 */
	 public native @ByRef StringVector phoneNums(); public native AuthUserBean phoneNums(StringVector phoneNums);        /**电话号码清单 */
	 public native @ByRef StringVector emails(); public native AuthUserBean emails(StringVector emails);           /**邮箱清单 */
 }

 /**用户注销信息 */
 @Namespace("model") @NoOffset public static class UserAuthenticationInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public UserAuthenticationInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public UserAuthenticationInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public UserAuthenticationInfo position(long position) {
         return (UserAuthenticationInfo)super.position(position);
     }
 
	 public UserAuthenticationInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int8") byte logout_mode(); public native UserAuthenticationInfo logout_mode(byte logout_mode);                        //注销模式   1:注销用户密码认证，自动注销模式 2:申请注销密码认证，手动注销模式
	 public native @Cast("int8") byte type(); public native UserAuthenticationInfo type(byte type);                               /**类型 */
	 public native @StdString  String password(); public native UserAuthenticationInfo password(String password);                    /**密码 */
	 public native @StdString  String authenticationCode(); public native UserAuthenticationInfo authenticationCode(String authenticationCode);          /**注销验证码，type为5必须传 */
 }


 /*******************cloudService begin***********************/

 // 云盘上传查重信息
 @Namespace("model") @NoOffset public static class CloudPreUpload extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudPreUpload(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudPreUpload(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudPreUpload position(long position) {
         return (CloudPreUpload)super.position(position);
     }
 
	 public CloudPreUpload() { super((Pointer)null); allocate(); }
	 private native void allocate();

	 public native @Cast("int64") long user(); public native CloudPreUpload user(long user);		//用户id
	 public native @Cast("int64") long sdkid(); public native CloudPreUpload sdkid(long sdkid);		// sdkid
	 public native @StdString  String sha2(); public native CloudPreUpload sha2(String sha2);	// sha256 哈希值
	 public native @StdString  String md5(); public native CloudPreUpload md5(String md5);	// md5
	 public native @Cast("int64") long fsize(); public native CloudPreUpload fsize(long fsize);		// 文件大小
	 public native @Cast("int64") long pid(); public native CloudPreUpload pid(long pid);			// 父节点id
	 public native @StdString  String fname(); public native CloudPreUpload fname(String fname);	// 文件名
	 public native @StdString  String ftype(); public native CloudPreUpload ftype(String ftype);	// 文件类型
	 public native @StdString  String filePath(); public native CloudPreUpload filePath(String filePath); // 文件路径
	 public native @Cast("int64") long sowner(); public native CloudPreUpload sowner(long sowner);		// 共享目录拥有者 id
	 public native @Cast("int64") long ssdkid(); public native CloudPreUpload ssdkid(long ssdkid);		// 共享目录拥有者 id

 }

 // 云盘文件通用结构体
 @Namespace("model") @NoOffset public static class CloudCommonParam extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudCommonParam(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudCommonParam(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudCommonParam position(long position) {
         return (CloudCommonParam)super.position(position);
     }
 
	 public CloudCommonParam() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long user(); public native CloudCommonParam user(long user);		// 用户id
	 public native @Cast("int64") long sdkid(); public native CloudCommonParam sdkid(long sdkid);		// sdkid
	 public native @Cast("int64") long virtualid(); public native CloudCommonParam virtualid(long virtualid);	// 虚拟文件id
	 public native @StdString  String name(); public native CloudCommonParam name(String name);	// 新文件 或 文件夹名
	 public native @Cast("int64") long sowner(); public native CloudCommonParam sowner(long sowner);		// 共享目录拥有者 id
	 public native @Cast("int64") long ssdkid(); public native CloudCommonParam ssdkid(long ssdkid);		// 共享目录拥有者 id
	 public native @Cast("int64") long dstpid(); public native CloudCommonParam dstpid(long dstpid);		// 目标id, 新的父节点 id

 }

 @Namespace("model") @NoOffset public static class cloudCommonRet extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public cloudCommonRet(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public cloudCommonRet(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public cloudCommonRet position(long position) {
         return (cloudCommonRet)super.position(position);
     }
 
	 public cloudCommonRet() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long virtualid(); public native cloudCommonRet virtualid(long virtualid);		// 虚拟文件id   -1 不存在需要 上传
	 public native @Cast("int64") long atime(); public native cloudCommonRet atime(long atime);			// 时间戳
	 public native @Cast("int64") long mtime(); public native cloudCommonRet mtime(long mtime);			// 创建时间
	 public native @Cast("int64") long chtime(); public native cloudCommonRet chtime(long chtime);			// 改变时间
	 public native @StdString  String fname(); public native cloudCommonRet fname(String fname);		// 新文件名
	 public native @Cast("int64") long groupid(); public native cloudCommonRet groupid(long groupid);			// 共享组id

 }

 // 新云盘，返回被删除的文件信息
 @Namespace("model") @NoOffset public static class delFileRet extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public delFileRet(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public delFileRet(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public delFileRet position(long position) {
         return (delFileRet)super.position(position);
     }
 
	 public delFileRet() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long virtualid(); public native delFileRet virtualid(long virtualid);
	 public native @Cast("int64") long dtime(); public native delFileRet dtime(long dtime);
	 public native @Cast("int64") long atime(); public native delFileRet atime(long atime);
 }

 @Namespace("model") @NoOffset public static class returnSuc extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public returnSuc(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public returnSuc(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public returnSuc position(long position) {
         return (returnSuc)super.position(position);
     }
 
	 public returnSuc() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long virtualid(); public native returnSuc virtualid(long virtualid);
	 public native @Cast("int64") long rtime(); public native returnSuc rtime(long rtime);
	 public native @Cast("int64") long atime(); public native returnSuc atime(long atime);
	 public native @Cast("int64") long mvtime(); public native returnSuc mvtime(long mvtime);
	 public native @Cast("int64") long newVirtualid(); public native returnSuc newVirtualid(long newVirtualid);
	 public native @Cast("int64") long cptime(); public native returnSuc cptime(long cptime);
	 public native @Cast("int64") long ctime(); public native returnSuc ctime(long ctime);
	 public native @Cast("int64") long chtime(); public native returnSuc chtime(long chtime);				// 改变时间
	 public native @StdString  String msg(); public native returnSuc msg(String msg); 
	 public native @StdString  String fname(); public native returnSuc fname(String fname);
 }


 // 云盘 同步文件/文件夹
 @Namespace("model") @NoOffset public static class cloudSyncFile extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public cloudSyncFile(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public cloudSyncFile(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public cloudSyncFile position(long position) {
         return (cloudSyncFile)super.position(position);
     }
 
	 public cloudSyncFile() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int32") int type(); public native cloudSyncFile type(int type);
	 public native @Cast("int64") long user(); public native cloudSyncFile user(long user);
	 public native @Cast("int64") long sdkid(); public native cloudSyncFile sdkid(long sdkid);
	 public native @Cast("int64") long atime(); public native cloudSyncFile atime(long atime);
 }

 // 云盘文件基本信息
 @Namespace("model") @NoOffset public static class newCloudFileInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public newCloudFileInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public newCloudFileInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public newCloudFileInfo position(long position) {
         return (newCloudFileInfo)super.position(position);
     }
 
	 public newCloudFileInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long virtualid(); public native newCloudFileInfo virtualid(long virtualid);
	 public native @Cast("int64") long pid(); public native newCloudFileInfo pid(long pid);
	 public native @StdString  String fname(); public native newCloudFileInfo fname(String fname);     //名字  (可能为空)
	 public native @Cast("int32") int type(); public native newCloudFileInfo type(int type);			// 1 文件， 2 文件夹
	 public native @Cast("int64") long dtime(); public native newCloudFileInfo dtime(long dtime);			// 被删除时间， -1 彻底删除
	 public native @StdString  String ftype(); public native newCloudFileInfo ftype(String ftype);		// 文件类型
	 public native @StdString  String md5(); public native newCloudFileInfo md5(String md5);		// 
	 public native @StdString  String sha2(); public native newCloudFileInfo sha2(String sha2);		//
	 public native @StdString  String skey(); public native newCloudFileInfo skey(String skey);
	 public native @Cast("int64") long mtime(); public native newCloudFileInfo mtime(long mtime);
	 public native @Cast("int64") long atime(); public native newCloudFileInfo atime(long atime);
	 public native @Cast("int64") long fsize(); public native newCloudFileInfo fsize(long fsize);			// 文件字节大小
	 public native @Cast("int32") int isdel(); public native newCloudFileInfo isdel(int isdel);			// 是否 回收站删除
	 public native @Cast("int64") long createtime(); public native newCloudFileInfo createtime(long createtime);		// 创建时间
	 public native @Cast("int64") long updatetime(); public native newCloudFileInfo updatetime(long updatetime);		// 修改时间
	 public native @Cast("int64") long deletetime(); public native newCloudFileInfo deletetime(long deletetime);		// 删除时间
	 public native @Cast("int64") long shareCreateAt(); public native newCloudFileInfo shareCreateAt(long shareCreateAt);	// 共享组创建时间
	 public native @Cast("int64") long shareUpdateAt(); public native newCloudFileInfo shareUpdateAt(long shareUpdateAt);	// 共享组修改时间
	 public native @Cast("int64") long shareDeleteAt(); public native newCloudFileInfo shareDeleteAt(long shareDeleteAt);	// 共享组删除时间
	 public native @Cast("int64") long groupid(); public native newCloudFileInfo groupid(long groupid);			// 共享组id
	 public native @Cast("int64") long ownerid(); public native newCloudFileInfo ownerid(long ownerid);			// 共享提供者id
	 public native @Cast("int64") long createid(); public native newCloudFileInfo createid(long createid);		// 共享创建者id
	 public native @Cast("int32") int permission(); public native newCloudFileInfo permission(int permission);		// 读写
	 public native @Cast("int32") int isShare(); public native newCloudFileInfo isShare(int isShare);			// 0 未被共享， 1 被共享
	 public native @Cast("int64") long uploadid(); public native newCloudFileInfo uploadid(long uploadid);		// 上传者 id
 }


 //云盘上传信息
 @Namespace("model") @NoOffset public static class NewCloudUploadFileInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public NewCloudUploadFileInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public NewCloudUploadFileInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public NewCloudUploadFileInfo position(long position) {
         return (NewCloudUploadFileInfo)super.position(position);
     }
 
	 public NewCloudUploadFileInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int32") int type(); public native NewCloudUploadFileInfo type(int type);					// 上传类型 1 秒传 2 正常文件上传3 分片上传文件4 正常文件夹上传
	 public native @Cast("int64") long pid(); public native NewCloudUploadFileInfo pid(long pid);						// 云盘父目录id 如果没有父目录，传0。
	 public native @Cast("int64") long user(); public native NewCloudUploadFileInfo user(long user);					// 用户id
	 public native @Cast("int64") long sdkid(); public native NewCloudUploadFileInfo sdkid(long sdkid);					// sdkid
	 public native @Cast("int64") long sowner(); public native NewCloudUploadFileInfo sowner(long sowner);					// 共享目录拥有者 id
	 public native @Cast("int64") long ssdkid(); public native NewCloudUploadFileInfo ssdkid(long ssdkid);					// 共享目录拥有者 sdkid
	 public native @Cast("int64") long virtualid(); public native NewCloudUploadFileInfo virtualid(long virtualid);				// 文件id
	 public native @StdString  String ftype(); public native NewCloudUploadFileInfo ftype(String ftype);				// 文件类型
	 public native @Cast("int64") long fileSize(); public native NewCloudUploadFileInfo fileSize(long fileSize);				//文件大小
	 public native @Cast("int64") long localId(); public native NewCloudUploadFileInfo localId(long localId);					//唯一标识ID
	 public native @StdString  String encryptKey(); public native NewCloudUploadFileInfo encryptKey(String encryptKey);		//加密key
	 /**本地文件地址 */
	 public native @StdString  String localPath(); public native NewCloudUploadFileInfo localPath(String localPath);
	 /**文件名，为空时，取localPath的文件名 */
	 public native @StdString  String fileName(); public native NewCloudUploadFileInfo fileName(String fileName);
	 
	 /**是否支持断点续传 */
	 public native @Cast("bool") boolean isResume(); public native NewCloudUploadFileInfo isResume(boolean isResume);
	 public native @Cast("bool") boolean isEncrypt(); public native NewCloudUploadFileInfo isEncrypt(boolean isEncrypt);				/** 是否加密 */
 }

 //云盘下载信息
 @Namespace("model") @NoOffset public static class CloudDownloadFileInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudDownloadFileInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudDownloadFileInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudDownloadFileInfo position(long position) {
         return (CloudDownloadFileInfo)super.position(position);
     }
 
	 public CloudDownloadFileInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();

	 public native @Cast("int64") long localId(); public native CloudDownloadFileInfo localId(long localId);				//唯一标识ID
	 public native @Cast("int64") long fileId(); public native CloudDownloadFileInfo fileId(long fileId);					// 文件id
	 public native @Cast("int64") long userId(); public native CloudDownloadFileInfo userId(long userId);					// 用户id
	 public native @Cast("int64") long sdkid(); public native CloudDownloadFileInfo sdkid(long sdkid);					// sdkid
	 public native @Cast("int64") long sowner(); public native CloudDownloadFileInfo sowner(long sowner);					// 共享目录拥有者ID
	 public native @Cast("int64") long ssdkid(); public native CloudDownloadFileInfo ssdkid(long ssdkid);					// 共享目录拥有者 sdk ID
	 /** 文件本地保存路径 localPath. */
	 public native @StdString  String localPath(); public native CloudDownloadFileInfo localPath(String localPath);
	 /** 远程路径.   先预留，应该没有用 */
	 public native @StdString  String uri(); public native CloudDownloadFileInfo uri(String uri);
	 /** 真实的文件名 fileName */
	 public native @StdString  String fileName(); public native CloudDownloadFileInfo fileName(String fileName);
	 public native @Cast("int64") long fileSize(); public native CloudDownloadFileInfo fileSize(long fileSize);				/** 文件大小 */
	 /**是否断点下载 */
	 public native @Cast("bool") boolean bisResume(); public native CloudDownloadFileInfo bisResume(boolean bisResume);
 }

 // 云盘 共享文件
 @Namespace("model") @NoOffset public static class cloudShare extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public cloudShare(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public cloudShare(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public cloudShare position(long position) {
         return (cloudShare)super.position(position);
     }
 
	 public cloudShare() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long user(); public native cloudShare user(long user);
	 public native @Cast("int64") long sdkid(); public native cloudShare sdkid(long sdkid);
	 public native @Cast("int64") long virtualid(); public native cloudShare virtualid(long virtualid);					// 目标文件 id
	 public native @ByRef LongVector vecRead(); public native cloudShare vecRead(LongVector vecRead);
	 public native @ByRef LongVector vecWrite(); public native cloudShare vecWrite(LongVector vecWrite);
	 public native @Cast("int64") long srcUser(); public native cloudShare srcUser(long srcUser);						// 共享提供者 userid
	 //  = -1, 请求所有用户 提供的共享目录信息
	 //  >0  请求 userid 用户 提供的共享目录信息
	 public native @Cast("int64") long srcVirtualid(); public native cloudShare srcVirtualid(long srcVirtualid);				// 共享目录文件 id
	 //  = -1, 忽略
	 // 若 srcuser > 0 && srcvid > 0，则服务端返回用户srcuser 共享给我的srcvid目录信息
	 public native @Cast("int64") long srcsdkid(); public native cloudShare srcsdkid(long srcsdkid);					// 共享提供者 sdkid
	 public native @Cast("int32") int newPermission(); public native cloudShare newPermission(int newPermission);				// 0 读权限， 1  写权限， 2 取消共享
	 public native @Cast("int64") long groupid(); public native cloudShare groupid(long groupid);						// 共享组id
	 public native @Cast("int64") long dstUser(); public native cloudShare dstUser(long dstUser);						// 改变目标用户
	 public native @Cast("int64") long sowner(); public native cloudShare sowner(long sowner);						// 共享目录拥有者id
	 public native @Cast("int64") long ssdkid(); public native cloudShare ssdkid(long ssdkid);						// 共享目录拥有者 sdkid
	 public native @ByRef LongVector vecChangeuser(); public native cloudShare vecChangeuser(LongVector vecChangeuser);	// 共享人 userid

 }

 @Namespace("model") @NoOffset public static class cloudShareRet extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public cloudShareRet(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public cloudShareRet(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public cloudShareRet position(long position) {
         return (cloudShareRet)super.position(position);
     }
 
	 public cloudShareRet() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long userid(); public native cloudShareRet userid(long userid);									// 共享失败的 userid
	 public native @Cast("int32") int code(); public native cloudShareRet code(int code);
	 public native @StdString  String msg(); public native cloudShareRet msg(String msg);
	 public native @Cast("int64") long virtualid(); public native cloudShareRet virtualid(long virtualid);
	 public native @Cast("int32") int permission(); public native cloudShareRet permission(int permission);
	 public native @StdString  String targetids(); public native cloudShareRet targetids(String targetids);
	 public native @Cast("int64") long sdkid(); public native cloudShareRet sdkid(long sdkid);									// 共享提供者 id
	 public native @Cast("int64") long createid(); public native cloudShareRet createid(long createid);								// 共享创建者 id				
	// std::vector<newCloudFileInfo> vecShareFile;	// 获取别人共享文件信息
 }

 // 返回 共享给别人的文件信息
 @Namespace("model") @NoOffset public static class cloudShareOtherRet extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public cloudShareOtherRet(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public cloudShareOtherRet(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public cloudShareOtherRet position(long position) {
         return (cloudShareOtherRet)super.position(position);
     }
 
	 public cloudShareOtherRet() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long virtualid(); public native cloudShareOtherRet virtualid(long virtualid);						// 目录
	 public native @Cast("int64") long atime(); public native cloudShareOtherRet atime(long atime);
	 public native @Cast("int64") long groupid(); public native cloudShareOtherRet groupid(long groupid);							// 共享组id
	 public native @ByRef LongVector vecRead(); public native cloudShareOtherRet vecRead(LongVector vecRead);
	 public native @ByRef LongVector vecWrite(); public native cloudShareOtherRet vecWrite(LongVector vecWrite);
 }

 @Namespace("model") @NoOffset public static class cloudContactInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public cloudContactInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public cloudContactInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public cloudContactInfo position(long position) {
         return (cloudContactInfo)super.position(position);
     }
 
	 public cloudContactInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long user(); public native cloudContactInfo user(long user);							// 用户id
	 public native @StdString  String userName(); public native cloudContactInfo userName(String userName);					// 用户名
	 public native @Cast("int64") long roleid(); public native cloudContactInfo roleid(long roleid);							// 角色名
	 //int64 createAt;						// 创建用户时间
	 //int64 updateAt;
	 //int64 deleteAt;
	 public native @StdString  String companyTag(); public native cloudContactInfo companyTag(String companyTag);					// 公司标志
	 public native @StdString  String department(); public native cloudContactInfo department(String department);				// 部门
	 //std::string email;						// 邮箱
	 //std::string phoneNum;					// 手机号
	 public native @Cast("int64") long orgId(); public native cloudContactInfo orgId(long orgId);						// 组织id

 }

 // 查询云盘上传/下载 信息
 @Namespace("model") @NoOffset public static class cloudTransferInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public cloudTransferInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public cloudTransferInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public cloudTransferInfo position(long position) {
         return (cloudTransferInfo)super.position(position);
     }
 
	 public cloudTransferInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long pid(); public native cloudTransferInfo pid(long pid);						// 云盘父目录id 如果没有父目录，传0。
	 public native @Cast("int64") long user(); public native cloudTransferInfo user(long user);					// 用户id
	 public native @Cast("int64") long sdkid(); public native cloudTransferInfo sdkid(long sdkid);					// sdkid
	 public native @Cast("int64") long sowner(); public native cloudTransferInfo sowner(long sowner);					// 共享目录拥有者 id
	 public native @Cast("int64") long ssdkid(); public native cloudTransferInfo ssdkid(long ssdkid);					// 共享目录拥有者 sdkid

	 public native @Cast("int64") long virtualid(); public native cloudTransferInfo virtualid(long virtualid);					// 文件id
	 public native @Cast("int64") long fileSize(); public native cloudTransferInfo fileSize(long fileSize);				// 文件大小	 
	 /**文件名，为空时，取localPath的文件名 */
	 public native @StdString  String fileName(); public native cloudTransferInfo fileName(String fileName);
	 public native @StdString  String encryptKey(); public native cloudTransferInfo encryptKey(String encryptKey);		// 加密key 
	 /**本地文件地址 */
	 public native @StdString  String uploadPath(); public native cloudTransferInfo uploadPath(String uploadPath);
	 public native @StdString  String md(); public native cloudTransferInfo md(String md);				/** 文件 md5码 */
	 public native @StdString  String sha(); public native cloudTransferInfo sha(String sha);				/** 文件的标记，在删除时需要判断是对应的文件 */
	 /** 文件本地保存路径 localPath */
	 public native @StdString  String downLoadPath(); public native cloudTransferInfo downLoadPath(String downLoadPath);

	 public native @Cast("int64") long splitSize(); public native cloudTransferInfo splitSize(long splitSize);    			/** http上传时是总分片数 */
	 public native @Cast("int64") long splitFinished(); public native cloudTransferInfo splitFinished(long splitFinished); 			/** 完成量, http上传时是已上传的分片数 */

	 //bool  isResumeUpload;			///<是否支持断点续传
	 //bool  isEncrypt;				/// 是否加密
	 //bool  bisResumeDownload;		///<是否断点下载

	 public native @Cast("int32") int transferType(); public native cloudTransferInfo transferType(int transferType);			/** transferType = 1, 上传， transferType = 2, 下载 */
	 public native @Cast("int32") int transferState(); public native cloudTransferInfo transferState(int transferState);			/**	transferState = 1, 成功， transferState = 2, 失败， */
 }

 //云盘上传信息
 @Namespace("model") @NoOffset public static class CloudUploadFileInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudUploadFileInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudUploadFileInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudUploadFileInfo position(long position) {
         return (CloudUploadFileInfo)super.position(position);
     }
 
	 public CloudUploadFileInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long pid(); public native CloudUploadFileInfo pid(long pid);						//云盘父目录id 如果没有父目录，传0。
	 /** 云盘父目录code */
	 public native @StdString  String fileCode(); public native CloudUploadFileInfo fileCode(String fileCode);
	 public native @Cast("int64") long fileSize(); public native CloudUploadFileInfo fileSize(long fileSize);					//文件大小
	 public native @Cast("int64") long localId(); public native CloudUploadFileInfo localId(long localId);					//唯一标识ID
	 public native @StdString  String encryptKey(); public native CloudUploadFileInfo encryptKey(String encryptKey);		//加密key
	 /**本地文件地址 */
	 public native @StdString  String localPath(); public native CloudUploadFileInfo localPath(String localPath);
	 /**文件名，为空时，取localPath的文件名 */
	 public native @StdString  String fileName(); public native CloudUploadFileInfo fileName(String fileName);
	 /**是否支持断点续传 */
	 public native @Cast("bool") boolean isResume(); public native CloudUploadFileInfo isResume(boolean isResume);
 }


//云盘添加文件信息
 @Namespace("model") @NoOffset public static class CloudAddFileInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudAddFileInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudAddFileInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudAddFileInfo position(long position) {
         return (CloudAddFileInfo)super.position(position);
     }
 
	 public CloudAddFileInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long pid(); public native CloudAddFileInfo pid(long pid);						//云盘父目录id 如果没有父目录，传0。
	 public native @Cast("int64") long ownerId(); public native CloudAddFileInfo ownerId(long ownerId);					//拥有者id
	 public native @Cast("int64") long uploaderId(); public native CloudAddFileInfo uploaderId(long uploaderId);				//上传者id
	 public native @StdString  String uploaderName(); public native CloudAddFileInfo uploaderName(String uploaderName);		//上传者名字
	 public native @Cast("int64") long encryptFileSize(); public native CloudAddFileInfo encryptFileSize(long encryptFileSize);			//加密文件大小
	 public native @Cast("int64") long fileId(); public native CloudAddFileInfo fileId(long fileId);					//文件ID
	 public native @StdString  String fileCode(); public native CloudAddFileInfo fileCode(String fileCode);			//文件code
	 public native @StdString  String fileName(); public native CloudAddFileInfo fileName(String fileName);			//文件名
	 public native @StdString  String filePath(); public native CloudAddFileInfo filePath(String filePath);			//文件路径
	 public native @StdString  String fileRemark(); public native CloudAddFileInfo fileRemark(String fileRemark);		//文件备注
	 public native @StdString  String fileClass(); public native CloudAddFileInfo fileClass(String fileClass);			//文件分类
	 public native @Cast("int64") long fileSize(); public native CloudAddFileInfo fileSize(long fileSize);					//文件大小
	 public native @StdString  String fileSuffix(); public native CloudAddFileInfo fileSuffix(String fileSuffix);		//文件后缀名
	 public native @Cast("int8") byte fileType(); public native CloudAddFileInfo fileType(byte fileType);					//类型 1.文件  2.文件夹  3.团队文件夹  4 特殊文件夹
	 public native @StdString  String md5Hash(); public native CloudAddFileInfo md5Hash(String md5Hash);			//md5码	
	 public native @StdString  String encryptKey(); public native CloudAddFileInfo encryptKey(String encryptKey);		//加密key
 }

 //云盘文件信息
 @Namespace("model") @NoOffset public static class CloudFileInfo extends CloudAddFileInfo {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudFileInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudFileInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudFileInfo position(long position) {
         return (CloudFileInfo)super.position(position);
     }
 
	 public CloudFileInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long createTime(); public native CloudFileInfo createTime(long createTime);				//创建时间
	 public native @Cast("int64") long updateTime(); public native CloudFileInfo updateTime(long updateTime);				//更新时间
	 public native @Cast("bool") boolean image(); public native CloudFileInfo image(boolean image);					//是否为图片
	 public native @Cast("int64") long validity(); public native CloudFileInfo validity(long validity);					//有效性 天
     public native @Cast("int64") long roleId(); public native CloudFileInfo roleId(long roleId);
 }

 //云盘用户信息
 @Namespace("model") @NoOffset public static class CloudUserInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudUserInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudUserInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudUserInfo position(long position) {
         return (CloudUserInfo)super.position(position);
     }
 
	 public CloudUserInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long userId(); public native CloudUserInfo userId(long userId);
	 public native @Cast("int64") long sdkid(); public native CloudUserInfo sdkid(long sdkid);
	 public native @StdString  String userName(); public native CloudUserInfo userName(String userName);
	 public native @StdString  String headImg(); public native CloudUserInfo headImg(String headImg);
	 public native @Cast("int64") long createdAt(); public native CloudUserInfo createdAt(long createdAt);
	 public native @Cast("int64") long updatedAt(); public native CloudUserInfo updatedAt(long updatedAt);
	 /**已使用容量(KB) */
	 public native @Cast("int64") long useSpace(); public native CloudUserInfo useSpace(long useSpace);
	 /**用户云盘总容量(KB) */
	 public native @Cast("int64") long totalSpace(); public native CloudUserInfo totalSpace(long totalSpace);
	 /**状态 1.未升级 2.升级中 3.正常 */
	 public native @Cast("int8") byte status(); public native CloudUserInfo status(byte status);
	 /**最大同时上传文件个数 */
	 public native @Cast("int32") int uploadNum(); public native CloudUserInfo uploadNum(int uploadNum);
	 /**最大同时下载文件个数 */
	 public native @Cast("int32") int downloadNum(); public native CloudUserInfo downloadNum(int downloadNum);
	 /**文件在回收站保留多久后自动删除 */
	 public native @Cast("int32") int keepTime(); public native CloudUserInfo keepTime(int keepTime);
	 /**上传最大速度 */
	 public native @Cast("int64") long uploadMaxSpeed(); public native CloudUserInfo uploadMaxSpeed(long uploadMaxSpeed);
	 /**下载最大速度 */
	 public native @Cast("int64") long downloadMaxSpeed(); public native CloudUserInfo downloadMaxSpeed(long downloadMaxSpeed);
	 /**是否开启通知推送  0 关闭系统推送， 1，开启系统推送 */
	 public native @Cast("int32") int systemNotify(); public native CloudUserInfo systemNotify(int systemNotify);
 }
 @Namespace("model") @NoOffset public static class TeamMemberInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public TeamMemberInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public TeamMemberInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public TeamMemberInfo position(long position) {
         return (TeamMemberInfo)super.position(position);
     }
 
	 public TeamMemberInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long fileId(); public native TeamMemberInfo fileId(long fileId);			//文件信息
	 public native @StdString  String headImg(); public native TeamMemberInfo headImg(String headImg);	//头像
	 public native @Cast("int64") long createTime(); public native TeamMemberInfo createTime(long createTime);		//创建时间
	 public native @Cast("int64") long updateTime(); public native TeamMemberInfo updateTime(long updateTime);		//上传时间
	 public native @Cast("int64") long userId(); public native TeamMemberInfo userId(long userId);			//用户id
	 public native @StdString  String userName(); public native TeamMemberInfo userName(String userName);  //用户名
	 public native @Cast("int64") long roleId(); public native TeamMemberInfo roleId(long roleId);	
	 public native @StdString  String roleName(); public native TeamMemberInfo roleName(String roleName);	
 }

 @Namespace("model") @NoOffset public static class BaseRoleInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public BaseRoleInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public BaseRoleInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public BaseRoleInfo position(long position) {
         return (BaseRoleInfo)super.position(position);
     }
 
	 public BaseRoleInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int8") byte isShow(); public native BaseRoleInfo isShow(byte isShow);
	 public native @StdString  String name(); public native BaseRoleInfo name(String name);	
	 public native @Cast("int64") long orderNum(); public native BaseRoleInfo orderNum(long orderNum);		
	 public native @StdString  String permission(); public native BaseRoleInfo permission(String permission);
	 public native @Cast("int64") long totalSize(); public native BaseRoleInfo totalSize(long totalSize);
	 public native @Cast("int64") long uploadSize(); public native BaseRoleInfo uploadSize(long uploadSize);
 }

 @Namespace("model") @NoOffset public static class CloudRoleInfo extends BaseRoleInfo {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudRoleInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudRoleInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudRoleInfo position(long position) {
         return (CloudRoleInfo)super.position(position);
     }
 
	 public CloudRoleInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long createTime(); public native CloudRoleInfo createTime(long createTime);	
	 public native @Cast("int64") long roleId(); public native CloudRoleInfo roleId(long roleId);
	 public native @Cast("int8") byte roleType(); public native CloudRoleInfo roleType(byte roleType);
	 public native @Cast("int8") byte status(); public native CloudRoleInfo status(byte status);
	 public native @Cast("int64") long updatedTime(); public native CloudRoleInfo updatedTime(long updatedTime);
 }

 @Namespace("model") @NoOffset public static class CloudPermission extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CloudPermission(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CloudPermission(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public CloudPermission position(long position) {
         return (CloudPermission)super.position(position);
     }
 
	 public CloudPermission() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int8") byte isCreateTeam(); public native CloudPermission isCreateTeam(byte isCreateTeam);
	 public native @Cast("int8") byte isDelete(); public native CloudPermission isDelete(byte isDelete);
	 public native @Cast("int8") byte isDownLoad(); public native CloudPermission isDownLoad(byte isDownLoad);
	 public native @Cast("int8") byte isManager(); public native CloudPermission isManager(byte isManager);
	 public native @Cast("int8") byte isReName(); public native CloudPermission isReName(byte isReName);
	 public native @Cast("int8") byte isRead(); public native CloudPermission isRead(byte isRead);
	 public native @Cast("int8") byte isUpload(); public native CloudPermission isUpload(byte isUpload);
	 public native @Cast("int64") long roleId(); public native CloudPermission roleId(long roleId);
	 public native @Cast("int64") long totalSize(); public native CloudPermission totalSize(long totalSize);
	 public native @Cast("int64") long uploadSize(); public native CloudPermission uploadSize(long uploadSize);
 }

 @Namespace("model") @NoOffset public static class FolderOpenBean extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public FolderOpenBean(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public FolderOpenBean(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public FolderOpenBean position(long position) {
         return (FolderOpenBean)super.position(position);
     }
 
	 public FolderOpenBean() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long pid(); public native FolderOpenBean pid(long pid); // 文件夹Id
	 public native @Cast("int64") long ownerId(); public native FolderOpenBean ownerId(long ownerId); // 所有者Id
	 public native int fileType(); public native FolderOpenBean fileType(int fileType);// 文件类型 1 文件 2 文件夹 3.团队文件夹
	 public native @Cast("int64") long timestamp(); public native FolderOpenBean timestamp(long timestamp); // 时间戳 只查询更新时间>时间戳的数据
	 public native @StdString  String sort(); public native FolderOpenBean sort(String sort); // 排序方式
	 public native int pageNum(); public native FolderOpenBean pageNum(int pageNum); // 页码
	 public native int pageSize(); public native FolderOpenBean pageSize(int pageSize); // 页长
	 public native @Cast("int64") long userId(); public native FolderOpenBean userId(long userId);
	 public native @Cast("int64") long roleId(); public native FolderOpenBean roleId(long roleId);
	 public native @StdString  String fileCode(); public native FolderOpenBean fileCode(String fileCode);
 }

 @Namespace("model") @NoOffset public static class smallMarketAppType extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public smallMarketAppType(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public smallMarketAppType(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public smallMarketAppType position(long position) {
         return (smallMarketAppType)super.position(position);
     }
 
	 public smallMarketAppType() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 应用分类id */
	 public native @Cast("int64") long appTypeID(); public native smallMarketAppType appTypeID(long appTypeID);
	 /** 应用分类名称 */
	 public native @StdString  String appTypeName(); public native smallMarketAppType appTypeName(String appTypeName);
 
 }
 

 /*******************cloudService end***********************/

  //日志文件头信息
 @Namespace("model") @NoOffset public static class LogHeadTag extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public LogHeadTag(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public LogHeadTag(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public LogHeadTag position(long position) {
         return (LogHeadTag)super.position(position);
     }
 
	 public LogHeadTag() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long id(); public native LogHeadTag id(long id);							
	 public native @StdString  String project(); public native LogHeadTag project(String project);				
	 public native @StdString  String deviceType(); public native LogHeadTag deviceType(String deviceType);			
	 public native @StdString  String os(); public native LogHeadTag os(String os);					
	 public native @StdString  String osVersion(); public native LogHeadTag osVersion(String osVersion);				
	 public native @StdString  String appVersion(); public native LogHeadTag appVersion(String appVersion);			
	 public native @StdString  String sdkVersion(); public native LogHeadTag sdkVersion(String sdkVersion);			
	 public native @StdString  String netType(); public native LogHeadTag netType(String netType);				
 }
 
 @Namespace("model") @NoOffset public static class getReqAtMsg extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public getReqAtMsg(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public getReqAtMsg(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public getReqAtMsg position(long position) {
         return (getReqAtMsg)super.position(position);
     }
 
	 public getReqAtMsg() { super((Pointer)null); allocate(); }
	 private native void allocate();

	 /** 群ID */
	 public native @Cast("int64") long groupID(); public native getReqAtMsg groupID(long groupID);
	 /** 起始时间 */
	 public native @Cast("int64") long beginTime(); public native getReqAtMsg beginTime(long beginTime);
	 /** 结束时间 */
	 public native @Cast("int64") long endTime(); public native getReqAtMsg endTime(long endTime);
	 /** 最大返回的消息数量,消息排序按时间倒叙排列。 */
	 public native @Cast("int32") int maxCount(); public native getReqAtMsg maxCount(int maxCount);
	 /** 0.别人\我，1.我\别人 */
	 public native @Cast("int8") byte atType(); public native getReqAtMsg atType(byte atType);
 }

 @Namespace("model") @NoOffset public static class UserContact extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public UserContact(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public UserContact(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public UserContact position(long position) {
         return (UserContact)super.position(position);
     }
 
	 public UserContact() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 账号类型 1.电话号码 3.email 4.userID 6.accountName */
	 public native @Cast("int8") byte type(); public native UserContact type(byte type);
	 /** 帐号名称 */
	 public native @StdString  String name(); public native UserContact name(String name);
	 /** 状态 1.启用， 2.禁用, 5.锁定, 6.冻结  */
	 public native @Cast("int8") byte status(); public native UserContact status(byte status);
 }

 /**获取邀请码参数 */
 @Namespace("model") @NoOffset public static class InviteCodeParam extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public InviteCodeParam(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public InviteCodeParam(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public InviteCodeParam position(long position) {
         return (InviteCodeParam)super.position(position);
     }
 
	 public InviteCodeParam() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 
	 /** 生成邀请码的用户的userid */
	 public native @Cast("int64") long createUserID(); public native InviteCodeParam createUserID(long createUserID);
	 /** 生成邀请的位数 */
	 public native @Cast("int32") int digit(); public native InviteCodeParam digit(int digit);
	 /** 有效秒数（默认一个月）  */
	 public native @Cast("int64") long effectiveSeconds(); public native InviteCodeParam effectiveSeconds(long effectiveSeconds);
	 /** 有效次数（默认无数次） */
	 public native @Cast("int32") int effectiveCount(); public native InviteCodeParam effectiveCount(int effectiveCount);
	 /** 有效账号 不传时默认任何账号都能使用 */
	 public native @ByRef UserContactVector consumeAccount(); public native InviteCodeParam consumeAccount(UserContactVector consumeAccount);
	 /**二维码分享加好友开关//  [10/27/2020 admin] */
	 public native @Cast("int8") byte value_byte(); public native InviteCodeParam value_byte(byte value_byte);
 }

 /**意见反馈 */
 @Namespace("model") @NoOffset public static class IssueFeedBack extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public IssueFeedBack(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public IssueFeedBack(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public IssueFeedBack position(long position) {
         return (IssueFeedBack)super.position(position);
     }
 
	 
	 /** 主键ID,可不用设置 */
	 public IssueFeedBack() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 
	 /** 问题ID(1：崩溃；2：掉线；3：卡顿；4：其他问题；5：改进建议) */
	 public native int id(); public native IssueFeedBack id(int id);
	 
	 /** 问题名称 */
	 public native int questionID(); public native IssueFeedBack questionID(int questionID);
	 
	 /** 问题描述 */
	 public native @StdString  String questionName(); public native IssueFeedBack questionName(String questionName);
	 
	 /** 是否必现 1：是；2：否 */
	 public native @StdString  String questionDescription(); public native IssueFeedBack questionDescription(String questionDescription);
	 
	 /** 操作系统 1:安卓、2:IOS、3:Windows、4:MAC、5:网页 */
	 public native @Cast("int8") byte isNecessary(); public native IssueFeedBack isNecessary(byte isNecessary);
	 public native @Cast("int8") byte operatingSystem(); public native IssueFeedBack operatingSystem(byte operatingSystem);
	 public native @StdString  String clientVersion(); public native IssueFeedBack clientVersion(String clientVersion);
	 public native @Cast("int64") long feedbackPersonID(); public native IssueFeedBack feedbackPersonID(long feedbackPersonID);
	 public native @StdString  String feedbackPersonName(); public native IssueFeedBack feedbackPersonName(String feedbackPersonName);
	 
	 /** 提交时间 */
	 public native @StdString  String feedbackPersonOrg(); public native IssueFeedBack feedbackPersonOrg(String feedbackPersonOrg);
	 
	 /** 反馈截图 最多四张,以英文分号;隔开 */
	 public native @StdString  String createDate(); public native IssueFeedBack createDate(String createDate);
	 
	 /** 日志地址 */
	 public native @StdString  String screenPic(); public native IssueFeedBack screenPic(String screenPic);
	 public native @StdString  String logUrl(); public native IssueFeedBack logUrl(String logUrl);
	 /**操作系统版本 */
	 public native @StdString  String operatingSystemVersion(); public native IssueFeedBack operatingSystemVersion(String operatingSystemVersion);
 }

 /**工作台轮播图实体 返回类型   */
 @Namespace("model") @NoOffset public static class WorkbenchBanner extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public WorkbenchBanner(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public WorkbenchBanner(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public WorkbenchBanner position(long position) {
         return (WorkbenchBanner)super.position(position);
     }
 
     public WorkbenchBanner() { super((Pointer)null); allocate(); }
     private native void allocate();
     public native @StdString  String id(); public native WorkbenchBanner id(String id);
     /** 标题  */
     public native @StdString  String title(); public native WorkbenchBanner title(String title);
     /** 封面  只支持jpg、png  */
     public native @StdString  String cover(); public native WorkbenchBanner cover(String cover);
     /** 类型  1：外链，2:非外链 
      *  显示状态  1：显示，2：隐藏.  */
     public native @Cast("int32") int type(); public native WorkbenchBanner type(int type);
     public native @Cast("int32") int displayStatus(); public native WorkbenchBanner displayStatus(int displayStatus);
	 
	 /** 地址（外链-完整路径；非外-存轮播图详情页的相对地址.  */
	 public native @StdString  String linkUrl(); public native WorkbenchBanner linkUrl(String linkUrl);		// 外链地址
     
     /** 富文本内容.  */
     public native @StdString  String detailUrl(); public native WorkbenchBanner detailUrl(String detailUrl);
     
     /** 排序  */
     public native @StdString  String content(); public native WorkbenchBanner content(String content);
     public native @Cast("int32") int sortNum(); public native WorkbenchBanner sortNum(int sortNum);     
     /** 创建时间  */
     public native @Cast("int64") long createTime(); public native WorkbenchBanner createTime(long createTime);
     /** 更新时间  */
     public native @Cast("int64") long updateTime(); public native WorkbenchBanner updateTime(long updateTime);
 }

 /**帮助系统信息 返回类型   */
 @Namespace("model") @NoOffset public static class HelpSystemInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public HelpSystemInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public HelpSystemInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public HelpSystemInfo position(long position) {
         return (HelpSystemInfo)super.position(position);
     }
 
     public HelpSystemInfo() { super((Pointer)null); allocate(); }
     private native void allocate();
     /** 帮助ID  */
     public native @Cast("int64") long id(); public native HelpSystemInfo id(long id);
     /** 标题  */
     public native @StdString  String title(); public native HelpSystemInfo title(String title);
     /** 父帮助ID  */
     public native @Cast("int64") long parentId(); public native HelpSystemInfo parentId(long parentId);
     /** 帮助类型  */
     public native @Cast("int32") int helpType(); public native HelpSystemInfo helpType(int helpType);
     /** 外链类型  */
     public native @Cast("int32") int linkType(); public native HelpSystemInfo linkType(int linkType);
     /** 显示状态  */
     public native @Cast("int32") int displayStatus(); public native HelpSystemInfo displayStatus(int displayStatus);
     /** 外链地址  */
     public native @StdString  String linkUrl(); public native HelpSystemInfo linkUrl(String linkUrl);
     /** 细节地址  */
     public native @StdString  String detailUrl(); public native HelpSystemInfo detailUrl(String detailUrl);
     /** 富文本内容   */
     public native @StdString  String content(); public native HelpSystemInfo content(String content);
     /** 排序  */
     public native @Cast("int32") int sortNum(); public native HelpSystemInfo sortNum(int sortNum);
     /** 创建时间  */
     public native @Cast("int64") long createTime(); public native HelpSystemInfo createTime(long createTime);
     /** 更新时间  */
     public native @Cast("int64") long updateTime(); public native HelpSystemInfo updateTime(long updateTime);
     /** 状态  */
     public native @Cast("int32") int status(); public native HelpSystemInfo status(int status);
 }

 /**查询文件是否过期或者文件延期返回 */
 @Namespace("model") @NoOffset public static class DelayFileResp extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public DelayFileResp(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public DelayFileResp(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public DelayFileResp position(long position) {
         return (DelayFileResp)super.position(position);
     }
 
	 
	 /** 当入参delayType=1时，0.全部未过期   1.部分过期   -1.链接地址错误 -2.传的delayType错误
	  *  当入参delayType=2时，0.全部延期成功 1.部分延期成功 -1.链接地址错误 -2.传的delayType错误 */
	 public DelayFileResp() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int32") int delayCode(); public native DelayFileResp delayCode(int delayCode);
	 public native @ByRef StringVector fileUrls(); public native DelayFileResp fileUrls(StringVector fileUrls); /**过期的文件链接路径 */
 }

 @Namespace("model") @NoOffset public static class OAuthResult extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public OAuthResult(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public OAuthResult(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public OAuthResult position(long position) {
         return (OAuthResult)super.position(position);
     }
 
	 public OAuthResult() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 应用名 */
	 public native @StdString  String appName(); public native OAuthResult appName(String appName);
	 /** 应用图标 */
	 public native @StdString  String appIcon(); public native OAuthResult appIcon(String appIcon);
	 /** 授权范围 */
	 public native @Cast("int32") int scope(); public native OAuthResult scope(int scope);
	 /** 授权码 */
	 public native @StdString  String authCode(); public native OAuthResult authCode(String authCode);
	 /** 静默授权开关 1.开 2.关 */
	 public native @Cast("int8") byte silentAuth(); public native OAuthResult silentAuth(byte silentAuth);
 }
 /**
 * \brief 设置群文件永久入参
 */
 @Namespace("model") @NoOffset public static class SetGroupFileTermParam extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public SetGroupFileTermParam(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public SetGroupFileTermParam(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public SetGroupFileTermParam position(long position) {
         return (SetGroupFileTermParam)super.position(position);
     }
 
	 public SetGroupFileTermParam() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long fileId(); public native SetGroupFileTermParam fileId(long fileId);         /**文件id */
	 public native @Cast("int64") long groupId(); public native SetGroupFileTermParam groupId(long groupId);		   /**群ID */
	 public native @Cast("int64") long userID(); public native SetGroupFileTermParam userID(long userID);		   /**上传者ID */
	 /** 1.临时 2.永久 */
	 public native @Cast("int8") byte fileTerm(); public native SetGroupFileTermParam fileTerm(byte fileTerm);
	 public native @StdString  String fileUrl(); public native SetGroupFileTermParam fileUrl(String fileUrl);  /**群文件url */
 }
 /**
 * \brief 获取群文件入参
 */
 @Namespace("model") @NoOffset public static class GetGroupFile extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GetGroupFile(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GetGroupFile(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GetGroupFile position(long position) {
         return (GetGroupFile)super.position(position);
     }
 
	 public GetGroupFile() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 目标ID  */
	 public native @Cast("int64") long targetID(); public native GetGroupFile targetID(long targetID);
	 /** 起始消息号  or 起始时间 */
	 public native @Cast("int64") long msgBeginID(); public native GetGroupFile msgBeginID(long msgBeginID);
	 /** 消息列偏移量 */
	 public native @Cast("int32") int msgOffset(); public native GetGroupFile msgOffset(int msgOffset);
	 /** 偏移标志  0.降序  1.升序  */
	 public native @Cast("int8") byte offsetFlag(); public native GetGroupFile offsetFlag(byte offsetFlag);
	 public native @Cast("int8") byte fileTerm(); public native GetGroupFile fileTerm(byte fileTerm);    /**按文件有效期类型获取 0. 获取所有 1.临时 2.永久 */
	 /** 按文件类型获取 0.所有 6文档 5图片 89视频 3音频 与msgType一致 */
	 public native @Cast("int8") byte fileType(); public native GetGroupFile fileType(byte fileType);
 }

 @Namespace("model") @NoOffset public static class GroupDocAttribute extends Fileinfo {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GroupDocAttribute(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GroupDocAttribute(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GroupDocAttribute position(long position) {
         return (GroupDocAttribute)super.position(position);
     }
 
	 public GroupDocAttribute() { super((Pointer)null); allocate(); }
	 private native void allocate();

	 public native @StdString  String encryptAlgorithm(); public native GroupDocAttribute encryptAlgorithm(String encryptAlgorithm); // 加密算法optional
	 public native @StdString  String hashcode(); public native GroupDocAttribute hashcode(String hashcode); // 文件hash值 optional
	 public native @Cast("int8") byte status(); public native GroupDocAttribute status(byte status); // 1: 新增 2: 改名 3: 删除
	 public native @Cast("int64") long createAt(); public native GroupDocAttribute createAt(long createAt);
	 public native @Cast("int64") long updateAt(); public native GroupDocAttribute updateAt(long updateAt);
	 public native @Cast("int64") long deleteAt(); public native GroupDocAttribute deleteAt(long deleteAt);
	 public native @Cast("int64") long version(); public native GroupDocAttribute version(long version);
	 public native @Cast("int64") long lastModifiedBy(); public native GroupDocAttribute lastModifiedBy(long lastModifiedBy);//optional 
 }

 //群文档上传下载结构体  edit by :jss
 @Namespace("model") @NoOffset public static class GroupDocUpdownInfo extends Fileinfo {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GroupDocUpdownInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GroupDocUpdownInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GroupDocUpdownInfo position(long position) {
         return (GroupDocUpdownInfo)super.position(position);
     }
 
	 public GroupDocUpdownInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 创建时间，主键 */
	 public native @Cast("int64") long createAt(); public native GroupDocUpdownInfo createAt(long createAt);
	 /** 文档localid */
	 public native @Cast("int64") long docLocalID(); public native GroupDocUpdownInfo docLocalID(long docLocalID);
	 /** 上传者 */
	 public native @Cast("int64") long uploader(); public native GroupDocUpdownInfo uploader(long uploader);
	 /** 下载者 */
	 public native @Cast("int64") long downloader(); public native GroupDocUpdownInfo downloader(long downloader);
	 /** 状态  1:正在上传 2:等待上传 3:上传完成 4:上传失败 5:重新上传 6:下载完成 */
	 public native int status(); public native GroupDocUpdownInfo status(int status);
	 /** 文档版本 */
	 public native @Cast("int64") long version(); public native GroupDocUpdownInfo version(long version);
 }

 /**
 * \brief 工作台应用房间信息
 */
 @Namespace("model") @NoOffset public static class AppRoomInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public AppRoomInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public AppRoomInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public AppRoomInfo position(long position) {
         return (AppRoomInfo)super.position(position);
     }
 
	 public AppRoomInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long id(); public native AppRoomInfo id(long id);							 //房间id
	 public native @StdString  String name(); public native AppRoomInfo name(String name);				//房间名称
	 public native @StdString  String icon(); public native AppRoomInfo icon(String icon);                //房间图标
	 public native @ByRef LongVector mems(); public native AppRoomInfo mems(LongVector mems);  //房间里成员应用id
 }
 /**
 * \brief 设置工作台应用顺序信息
 */
 @Namespace("model") @NoOffset public static class AppOrderInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public AppOrderInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public AppOrderInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public AppOrderInfo position(long position) {
         return (AppOrderInfo)super.position(position);
     }
 
	 public AppOrderInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long id(); public native AppOrderInfo id(long id);		//房间id或应用id
	 public native @Cast("int8") byte type(); public native AppOrderInfo type(byte type);		// 1、房间 2、应用 3、本地应用
	 public native @Cast("int32") int order(); public native AppOrderInfo order(int order); //排序位置
	 public native @ByRef LongVector apps(); public native AppOrderInfo apps(LongVector apps);  //type是房间时，房间成员的顺序，按vector的下标顺序为排序位置信息
 }
 /**
 * \brief 工作台应用列表信息
 */
 @Namespace("model") @NoOffset public static class MarketAppGroup extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public MarketAppGroup(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public MarketAppGroup(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public MarketAppGroup position(long position) {
         return (MarketAppGroup)super.position(position);
     }
 
	 public MarketAppGroup() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long id(); public native MarketAppGroup id(long id);				//房间id或应用id
	 public native @Cast("int8") byte type(); public native MarketAppGroup type(byte type);				// 1、房间 2、应用 3、本地应用
	 public native @StdString  String name(); public native MarketAppGroup name(String name);  //房间名称或应用名称
	 public native @StdString  String icon(); public native MarketAppGroup icon(String icon);   //房间图标
	 public native @StdString  String url(); public native MarketAppGroup url(String url);   //本地应用Url
	 public native @ByRef SmallMarketAppInfoVector apps(); public native MarketAppGroup apps(SmallMarketAppInfoVector apps); ////type是房间时,为房间成员应用信息，type为应用时，为应用详细信息
 }
 /**
 * \brief 本地应用信息
 */
 @Namespace("model") @NoOffset public static class LocalAppInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public LocalAppInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public LocalAppInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public LocalAppInfo position(long position) {
         return (LocalAppInfo)super.position(position);
     }
 
	 public LocalAppInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();

	 public native @Cast("int64") long appId(); public native LocalAppInfo appId(long appId);					   //本地应用id
	 public native @StdString  String name(); public native LocalAppInfo name(String name);				//本地应用名称
	 public native @StdString  String icon(); public native LocalAppInfo icon(String icon);                //本地应用图标
	 public native @StdString  String url(); public native LocalAppInfo url(String url);                  //应用对应的url
 }
 /**
 * \brief 群议题结构
 */
 @Namespace("model") @NoOffset public static class GroupIssue extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GroupIssue(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GroupIssue(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GroupIssue position(long position) {
         return (GroupIssue)super.position(position);
     }
 
	 public GroupIssue() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long id(); public native GroupIssue id(long id);			//议题id
	 public native @Cast("int64") long groupId(); public native GroupIssue groupId(long groupId);		//群id
	 public native @Cast("int64") long createrId(); public native GroupIssue createrId(long createrId);	//创建者id
	 public native @Cast("int64") long createTime(); public native GroupIssue createTime(long createTime);	//议题创建时间
	 public native @StdString  String name(); public native GroupIssue name(String name);  //议题名称
 }

 /**JssdkAuth认证信息 */
 @Namespace("model") @NoOffset public static class JssdkAuthInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public JssdkAuthInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public JssdkAuthInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public JssdkAuthInfo position(long position) {
         return (JssdkAuthInfo)super.position(position);
     }
 
	 public JssdkAuthInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long appID(); public native JssdkAuthInfo appID(long appID);
	 public native @Cast("int64") long timeStamp(); public native JssdkAuthInfo timeStamp(long timeStamp);
	 public native @StdString  String noncestr(); public native JssdkAuthInfo noncestr(String noncestr);
	 public native @StdString  String url(); public native JssdkAuthInfo url(String url);
	 public native @StdString  String signature(); public native JssdkAuthInfo signature(String signature);
	 public native @ByRef StringVector jsApiList(); public native JssdkAuthInfo jsApiList(StringVector jsApiList);
 }

 /**AppListMenuCode 栏目的应用列表 */
 @Namespace("model") @NoOffset public static class AppListMenuCode extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public AppListMenuCode(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public AppListMenuCode(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public AppListMenuCode position(long position) {
         return (AppListMenuCode)super.position(position);
     }
 
	 public AppListMenuCode() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int32") int pageNum(); public native AppListMenuCode pageNum(int pageNum);			//页码
	 public native @Cast("int32") int pageSize(); public native AppListMenuCode pageSize(int pageSize);			//页长
	 public native @Cast("int32") int deviceType(); public native AppListMenuCode deviceType(int deviceType);		//类型
	 public native @Cast("int64") long userID(); public native AppListMenuCode userID(long userID);				//用户ID
	 public native @StdString  String appName(); public native AppListMenuCode appName(String appName);		//应用名称，模糊查询用
	 public native @StdString  String channels(); public native AppListMenuCode channels(String channels);		//应用名称发布渠道
 }

 /**
 * \brief jssdk认证
 */
 @Namespace("model") @NoOffset public static class GroupJssdkAuth extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GroupJssdkAuth(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GroupJssdkAuth(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GroupJssdkAuth position(long position) {
         return (GroupJssdkAuth)super.position(position);
     }
 
	 public GroupJssdkAuth() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long appID(); public native GroupJssdkAuth appID(long appID);		//
	 public native @StdString  String url(); public native GroupJssdkAuth url(String url);		    //url
	 public native @ByRef StringVector jsApiList(); public native GroupJssdkAuth jsApiList(StringVector jsApiList);	//
	 //std::string jsApiList;
	 public native @Cast("int64") long timeStamp(); public native GroupJssdkAuth timeStamp(long timeStamp);	//时间戳
 }

 /**
 * \brief 自定义菜单栏目信息
 */
 @Namespace("model") @NoOffset public static class GroupAppListMenuResult extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GroupAppListMenuResult(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GroupAppListMenuResult(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GroupAppListMenuResult position(long position) {
         return (GroupAppListMenuResult)super.position(position);
     }
 
	 public GroupAppListMenuResult() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long appID(); public native GroupAppListMenuResult appID(long appID);
	 public native @Cast("int8") byte appType(); public native GroupAppListMenuResult appType(byte appType);						//1 H5, 2 苹果, 3 安卓, 4 内部, 5 快捷, 5 本地
	 public native @StdString  String appTypeName(); public native GroupAppListMenuResult appTypeName(String appTypeName);	//应用类型中文名
	 public native @StdString  String appSign(); public native GroupAppListMenuResult appSign(String appSign);			//应用标识
	 public native @StdString  String appName(); public native GroupAppListMenuResult appName(String appName);			//应用名称
	 public native @StdString  String appIcon(); public native GroupAppListMenuResult appIcon(String appIcon);			//应用图标
	 public native @StdString  String mainUrl(); public native GroupAppListMenuResult mainUrl(String mainUrl);			//	应用地址
	 public native @StdString  String adminUrl(); public native GroupAppListMenuResult adminUrl(String adminUrl);			//	应用后台地址
	 public native @StdString  String packageName(); public native GroupAppListMenuResult packageName(String packageName);	//	应用包名
	 public native @StdString  String downloadUrl(); public native GroupAppListMenuResult downloadUrl(String downloadUrl);	//	应用下载地址
	 public native @StdString  String urlScheme(); public native GroupAppListMenuResult urlScheme(String urlScheme);		//	应用urlScheme
 }
 /**自定义菜单栏目信息 */
 @Namespace("model") @NoOffset public static class AppListMenuInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public AppListMenuInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public AppListMenuInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public AppListMenuInfo position(long position) {
         return (AppListMenuInfo)super.position(position);
     }
 
	 public AppListMenuInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int8") byte resultCode(); public native AppListMenuInfo resultCode(byte resultCode);		//0成功 - 1失败

	 public native @ByRef GroupAppListMenuResultVector menuInfos(); public native AppListMenuInfo menuInfos(GroupAppListMenuResultVector menuInfos);	 //resultData:Array

 }
 /**
 * \brief 群公告信息
 */
 @Namespace("model") @NoOffset public static class GroupAnnouncementInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GroupAnnouncementInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GroupAnnouncementInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GroupAnnouncementInfo position(long position) {
         return (GroupAnnouncementInfo)super.position(position);
     }
 
	 public GroupAnnouncementInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long announcementID(); public native GroupAnnouncementInfo announcementID(long announcementID);  //公告Id
	 public native @Cast("int64") long groupID(); public native GroupAnnouncementInfo groupID(long groupID);             //群Id
	 public native @Cast("int64") long createUserID(); public native GroupAnnouncementInfo createUserID(long createUserID);     //创建者Id
	 public native @Cast("int64") long createDt(); public native GroupAnnouncementInfo createDt(long createDt);           //创建时间
	 public native @StdString  String content(); public native GroupAnnouncementInfo content(String content);        //公告内容
 }
 /**
 * \brief 获取群公告列表入参
 */
 @Namespace("model") @NoOffset public static class GetGroupAnnouncementListParam extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GetGroupAnnouncementListParam(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GetGroupAnnouncementListParam(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GetGroupAnnouncementListParam position(long position) {
         return (GetGroupAnnouncementListParam)super.position(position);
     }
 
	 public GetGroupAnnouncementListParam() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long lastSourceID(); public native GetGroupAnnouncementListParam lastSourceID(long lastSourceID);  /*已拉取到的最终群公告id*/
	 public native @Cast("int64") long groupID(); public native GetGroupAnnouncementListParam groupID(long groupID);        /*群id*/
	 public native @Cast("int64") long userID(); public native GetGroupAnnouncementListParam userID(long userID);          /*用户id*/
	 public native @Cast("int32") int pageSize(); public native GetGroupAnnouncementListParam pageSize(int pageSize);      /*每页大小 默认20*/
 }
 /**
 * \brief 获取群公告列表返回
 */
 @Namespace("model") @NoOffset public static class GroupAnnouncementList extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public GroupAnnouncementList(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public GroupAnnouncementList(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public GroupAnnouncementList position(long position) {
         return (GroupAnnouncementList)super.position(position);
     }
 
	 public GroupAnnouncementList() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @StdVector GroupAnnouncementInfo list(); public native GroupAnnouncementList list(GroupAnnouncementInfo list);
 }


 /**全局免打扰模式信息 */
 @Namespace("model") @NoOffset public static class globalNoDisturbModeInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public globalNoDisturbModeInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public globalNoDisturbModeInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public globalNoDisturbModeInfo position(long position) {
         return (globalNoDisturbModeInfo)super.position(position);
     }
 
	 public globalNoDisturbModeInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int32") int startTime(); public native globalNoDisturbModeInfo startTime(int startTime);
	 public native @Cast("int32") int endTime(); public native globalNoDisturbModeInfo endTime(int endTime);
	 public native @StdString  String name(); public native globalNoDisturbModeInfo name(String name);
	 public native @Cast("bool") boolean isOpen(); public native globalNoDisturbModeInfo isOpen(boolean isOpen);
 }
 /**设置登录记录 */
 @Namespace("model") @NoOffset public static class DeviceLoginRecord extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public DeviceLoginRecord(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public DeviceLoginRecord(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public DeviceLoginRecord position(long position) {
         return (DeviceLoginRecord)super.position(position);
     }
 
	 public DeviceLoginRecord() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long userID(); public native DeviceLoginRecord userID(long userID);  // 用户ID
	 public native @Cast("int64") long loginTime(); public native DeviceLoginRecord loginTime(long loginTime);  //登录时间 
	 public native @Cast("int8") byte deviceType(); public native DeviceLoginRecord deviceType(byte deviceType);  //设备类型 
	 public native @StdString  String deviceInfo(); public native DeviceLoginRecord deviceInfo(String deviceInfo); //设备信息 
	 public native @StdString  String macCode(); public native DeviceLoginRecord macCode(String macCode);  //mac地址 
	 public native @StdString  String loginIP(); public native DeviceLoginRecord loginIP(String loginIP);  // 登录IP 
	 public native @StdString  String loginCity(); public native DeviceLoginRecord loginCity(String loginCity);  //登录地址 
 }

 /**工作密集 */
 @Namespace("model") @NoOffset public static class Security extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public Security(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public Security(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public Security position(long position) {
         return (Security)super.position(position);
     }
 
	 public Security() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long userID(); public native Security userID(long userID);  // 用户ID
	 public native @Cast("int32") int level(); public native Security level(int level);  //等级
	 public native @Cast("int64") long operateTime(); public native Security operateTime(long operateTime);  //操作时间
	 public native @Cast("int64") long operateUserId(); public native Security operateUserId(long operateUserId); //操作人用户ID
	 public native @StdString  String name(); public native Security name(String name);  //密级名称
	 public native @StdString  String color(); public native Security color(String color);  //密级颜色
 }

 /**
 * \brief 消息提醒结构
 */
 @Namespace("model") @NoOffset public static class reminderMsg extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public reminderMsg(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public reminderMsg(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public reminderMsg position(long position) {
         return (reminderMsg)super.position(position);
     }
 
	 public reminderMsg() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long reminderId(); public native reminderMsg reminderId(long reminderId);                                /**消息提醒id，发送时不赋值 */
	 public native @Cast("int64") long receiverUserId(); public native reminderMsg receiverUserId(long receiverUserId);                            /**接收者用户ID,设置消息提醒的人，a用户设置了消息提醒，时间戳到达时服务器会发送给a用户 */
	 public native @Cast("int64") long reminderSendTime(); public native reminderMsg reminderSendTime(long reminderSendTime);                          /**消息提醒发送时间（时间戳） */
	 public native @Cast("int64") long reminderMsgId(); public native reminderMsg reminderMsgId(long reminderMsgId);                             /**需要提醒的消息ID，关联消息id */
	 public native @Cast("int64") long sourceId(); public native reminderMsg sourceId(long sourceId);                                  /**原消息发送者ID（用户或群），原消息所在的会话id，跳转或显示头像使用 */
	 public native @SharedPtr @ByRef Msg msg(); public native reminderMsg msg(Msg msg);                                 /**原始消息数据 */
 }

 /**
 * 待办事项
 */
 @Namespace("model") @NoOffset public static class agencymsg extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public agencymsg(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public agencymsg(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public agencymsg position(long position) {
         return (agencymsg)super.position(position);
     }
 
	 public agencymsg() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /**公共号Id**/
	 public native @Cast("int64") long appId(); public native agencymsg appId(long appId);
	 /**用户Id**/
	 public native @Cast("int64") long userId(); public native agencymsg userId(long userId);
	 /**公共号名称**/
	 public native @StdString  String appName(); public native agencymsg appName(String appName);
	 /**待办事项计数**/
	 public native @Cast("int32") int agencyCount(); public native agencymsg agencyCount(int agencyCount);
	 /**中文消息模板**/
	 public native @StdString  String agencyContentZh(); public native agencymsg agencyContentZh(String agencyContentZh);
	 /**英文消息模板**/
	 public native @StdString  String agencyContentEn(); public native agencymsg agencyContentEn(String agencyContentEn);
	 /**待办事项地址**/
	 public native @StdString  String agencyUrl(); public native agencymsg agencyUrl(String agencyUrl);
	 /**待办事项拓展字段**/
	 public native @StdString  String agencyExtendInfo(); public native agencymsg agencyExtendInfo(String agencyExtendInfo);
	 /**用户对应用的状态**/
	 public native @Cast("int8") byte agencyStatus(); public native agencymsg agencyStatus(byte agencyStatus);
	 /**更新时间**/
	 public native @Cast("int64") long updateAtTime(); public native agencymsg updateAtTime(long updateAtTime);
 }

/* 新待办事项结构体BEGIN */
 @Namespace("model") @NoOffset public static class agencyMessageBean extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public agencyMessageBean(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public agencyMessageBean(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public agencyMessageBean position(long position) {
         return (agencyMessageBean)super.position(position);
     }
 
	 public agencyMessageBean() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long userID(); public native agencyMessageBean userID(long userID);
	 public native @Cast("int64") long targetID(); public native agencyMessageBean targetID(long targetID);
	 public native @StdString  String message(); public native agencyMessageBean message(String message);
	 public native @Cast("int8") byte messageType(); public native agencyMessageBean messageType(byte messageType);
	 public native @Cast("int64") long localID(); public native agencyMessageBean localID(long localID);
	 public native @StdString  String maccode(); public native agencyMessageBean maccode(String maccode);
	 public native @StdString  String format(); public native agencyMessageBean format(String format);
	 public native @ByRef LongVector limitRange(); public native agencyMessageBean limitRange(LongVector limitRange);
	 public native @StdString  String msgProperties(); public native agencyMessageBean msgProperties(String msgProperties);
	 public native @Cast("int8") byte activeType(); public native agencyMessageBean activeType(byte activeType);
	 public native @ByRef LongVector relatedUsers(); public native agencyMessageBean relatedUsers(LongVector relatedUsers);
	 public native @Cast("int64") long relatedMsgID(); public native agencyMessageBean relatedMsgID(long relatedMsgID);
	 public native @Cast("int64") long SDKID(); public native agencyMessageBean SDKID(long SDKID);
	 public native @Cast("int8") byte setRead(); public native agencyMessageBean setRead(byte setRead);
	 public native @StdString  String sourceID(); public native agencyMessageBean sourceID(String sourceID);
	 public native @Cast("int32") int subMsgType(); public native agencyMessageBean subMsgType(int subMsgType);
	 public native @Cast("int32") int securityLevel(); public native agencyMessageBean securityLevel(int securityLevel);
 }
 @Namespace("model") @NoOffset public static class ToDoTaskMsg extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public ToDoTaskMsg(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public ToDoTaskMsg(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public ToDoTaskMsg position(long position) {
         return (ToDoTaskMsg)super.position(position);
     }
 
	 public ToDoTaskMsg() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long targetID(); public native ToDoTaskMsg targetID(long targetID);
	 public native @Cast("int64") long appID(); public native ToDoTaskMsg appID(long appID);
	 public native @Cast("int64") long taskID(); public native ToDoTaskMsg taskID(long taskID);
	 public native @Cast("int64") long messageID(); public native ToDoTaskMsg messageID(long messageID);
	 public native @ByRef agencyMessageBean messageBean(); public native ToDoTaskMsg messageBean(agencyMessageBean messageBean);
	 public native @Cast("int8") byte urgent(); public native ToDoTaskMsg urgent(byte urgent);
	 public native @Cast("int8") byte finished(); public native ToDoTaskMsg finished(byte finished);
	 public native @Cast("int64") long createTime(); public native ToDoTaskMsg createTime(long createTime);
	 public native @Cast("int64") long updateTime(); public native ToDoTaskMsg updateTime(long updateTime);

	 public native @StdString  String title(); public native ToDoTaskMsg title(String title); // 标题
	 public native @StdString  String content(); public native ToDoTaskMsg content(String content); // 内容说明
	 public native @StdString  String bID(); public native ToDoTaskMsg bID(String bID); //  业务方自己的唯一主键
	 public native @StdString  String fileds(); public native ToDoTaskMsg fileds(String fileds); // 补充的内容, markdown形式展示
	 public native @StdString  String button(); public native ToDoTaskMsg button(String button); // 业务动作，确定；其他业务可以扩展多个动作
	 public native @StdString  String detailUrl(); public native ToDoTaskMsg detailUrl(String detailUrl); //  消息正文的链接URL
	 public native @StdString  String picUrl(); public native ToDoTaskMsg picUrl(String picUrl); // 消息中的图片
	 public native @StdString  String userList(); public native ToDoTaskMsg userList(String userList); //  参与人员, 多个人员逗号分隔
	 public native int isShowSession(); public native ToDoTaskMsg isShowSession(int isShowSession); // 客户端根据该字段判断展示位置(1展示会话不展示工作台; 2不展示会话, 展示工作台; 3展示会话和工作台; 4不展示会话和工作台)
	 public native @StdString  String tag(); public native ToDoTaskMsg tag(String tag); // 消息标签，最多支持4个中文字符，12个英文字符, 最多支持6个
 }
 @Namespace("model") @NoOffset public static class agencyTaskMsg extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public agencyTaskMsg(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public agencyTaskMsg(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public agencyTaskMsg position(long position) {
         return (agencyTaskMsg)super.position(position);
     }
 
	 public agencyTaskMsg() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native void init();
	 public native @StdVector ToDoTaskMsg ToDoTaskMsgs(); public native agencyTaskMsg ToDoTaskMsgs(ToDoTaskMsg ToDoTaskMsgs);
	 public native @Cast("int64") long totalCount(); public native agencyTaskMsg totalCount(long totalCount);
	 public native @Cast("int64") long totalPage(); public native agencyTaskMsg totalPage(long totalPage);
 }
 /* 新待办事项结构体END */
 /**
 *  \biref  根据用户ID获取用户登录的设备信息,豆豆版本
 */
 @Namespace("model") @NoOffset public static class LoginClientRecord extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public LoginClientRecord(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public LoginClientRecord(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public LoginClientRecord position(long position) {
         return (LoginClientRecord)super.position(position);
     }
 
	 public LoginClientRecord() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long userID(); public native LoginClientRecord userID(long userID);				//用户ID
	 public native @Cast("int64") long loginTime(); public native LoginClientRecord loginTime(long loginTime);			//登录时间
	 public native @Cast("int8") byte deviceType(); public native LoginClientRecord deviceType(byte deviceType);			//登录设备类型
	 public native @Cast("int8") byte clientType(); public native LoginClientRecord clientType(byte clientType);			//client类型
	 public native @StdString  String deviceInfo(); public native LoginClientRecord deviceInfo(String deviceInfo);	//登录设备信息
	 public native @StdString  String clientVersion(); public native LoginClientRecord clientVersion(String clientVersion); //client版本
	 public native @StdString  String SDKID(); public native LoginClientRecord SDKID(String SDKID);			//SDKID
 }

 /**
 * 应用帮助查询
 */
 @Namespace("model") @NoOffset public static class SmallAppHelp extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public SmallAppHelp(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public SmallAppHelp(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public SmallAppHelp position(long position) {
         return (SmallAppHelp)super.position(position);
     }
 
	 public SmallAppHelp() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("int64") long id(); public native SmallAppHelp id(long id);//帮助id
	 public native @Cast("int64") long appId(); public native SmallAppHelp appId(long appId);// 公共号（应用号）id 
	 public native @Cast("int64") long parentId(); public native SmallAppHelp parentId(long parentId);//帮助父id 
	 public native @StdString  String title(); public native SmallAppHelp title(String title);//标题
	 public native @Cast("int8") byte helpType(); public native SmallAppHelp helpType(byte helpType);//帮助类别（1：分类，2：文章）
	 public native @Cast("int8") byte articleType(); public native SmallAppHelp articleType(byte articleType);//1:外链；2:文件；3:自定义图文
	 public native @StdString  String linkUrl(); public native SmallAppHelp linkUrl(String linkUrl);//外链地址
	 public native @StdString  String fileUrl(); public native SmallAppHelp fileUrl(String fileUrl);//文件地址（客户端原生预览）
	 public native @StdString  String detailUrl(); public native SmallAppHelp detailUrl(String detailUrl);//文章地址（vrvxin web预览）/vrvxin/help/toDetails.do?id={id} 
	 public native @Cast("int32") int sortNum(); public native SmallAppHelp sortNum(int sortNum);//排序值
 }

 /*
 * 用户对公共号的设置
 */
 @Namespace("model") @NoOffset public static class strc_UserToAppConfig extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public strc_UserToAppConfig(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public strc_UserToAppConfig(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public strc_UserToAppConfig position(long position) {
         return (strc_UserToAppConfig)super.position(position);
     }
 
	public strc_UserToAppConfig() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("int64") long appId(); public native strc_UserToAppConfig appId(long appId);      
	public native @Cast("int64") long timestamp(); public native strc_UserToAppConfig timestamp(long timestamp);  
	public native @Cast("int8") byte type(); public native strc_UserToAppConfig type(byte type);        
	public native @Cast("int32") int value(); public native strc_UserToAppConfig value(int value);
 }
 /*
 用户绑定的后台管理员角色信息
  [2/25/2021 zhuohc]
 */
 @Namespace("model") public static class AdminRoleInfo extends Pointer {
     static { Loader.load(); }
     /** Default native constructor. */
     public AdminRoleInfo() { super((Pointer)null); allocate(); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public AdminRoleInfo(long size) { super((Pointer)null); allocateArray(size); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public AdminRoleInfo(Pointer p) { super(p); }
     private native void allocate();
     private native void allocateArray(long size);
     @Override public AdminRoleInfo position(long position) {
         return (AdminRoleInfo)super.position(position);
     }
 
	 public native @Cast("bool") boolean superAdmin(); public native AdminRoleInfo superAdmin(boolean superAdmin);				//是否是超级管理员，true是，false否
	 public native @StdString  String adminName(); public native AdminRoleInfo adminName(String adminName);		//管理后台绑定人员名称
	 public native @StdString  String adminAccount(); public native AdminRoleInfo adminAccount(String adminAccount);	//管理后台绑定人员帐号
 }
 /*
 用户绑定的后台管理员角色信息
 [3/8/2021 zhuohc]
 */
 @Namespace("model") public static class AdminRoleInfoJson extends Pointer {
     static { Loader.load(); }
     /** Default native constructor. */
     public AdminRoleInfoJson() { super((Pointer)null); allocate(); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public AdminRoleInfoJson(long size) { super((Pointer)null); allocateArray(size); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public AdminRoleInfoJson(Pointer p) { super(p); }
     private native void allocate();
     private native void allocateArray(long size);
     @Override public AdminRoleInfoJson position(long position) {
         return (AdminRoleInfoJson)super.position(position);
     }
 
	 public native @StdString  String roleInfoResult(); public native AdminRoleInfoJson roleInfoResult(String roleInfoResult);		//管理后台绑定人员信息
 }
 //用户设置信息结构体
 @Namespace("model") @NoOffset public static class PersonalDataSwitch extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public PersonalDataSwitch(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public PersonalDataSwitch(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public PersonalDataSwitch position(long position) {
         return (PersonalDataSwitch)super.position(position);
     }
 
	 public PersonalDataSwitch() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /** 用户 id **/
	 public native @Cast("int64") long currentUserId(); public native PersonalDataSwitch currentUserId(long currentUserId);
	 /** 21:群验证方式 **/
	 public native @Cast("int32") int switchType(); public native PersonalDataSwitch switchType(int switchType);
	 /**
	 *	switchType = 21 :1 群邀请需要验证   2  不允许群邀请  3 群邀请不需要验证
	 **/
	 public native @StdString  String value(); public native PersonalDataSwitch value(String value);
	 /** SDKID **/
	 public native @Cast("int64") long SDKID(); public native PersonalDataSwitch SDKID(long SDKID);
	 /** 扩展字段 **/
	 public native @StdString  String extendValue(); public native PersonalDataSwitch extendValue(String extendValue);
 }


 @Namespace("model") @NoOffset public static class ClientMenuSet extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public ClientMenuSet(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public ClientMenuSet(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public ClientMenuSet position(long position) {
         return (ClientMenuSet)super.position(position);
     }
 
	 public ClientMenuSet() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /* id */
	 public native @Cast("int32") int id(); public native ClientMenuSet id(int id);
	 /* 客户端菜单类型 1.内置不可关闭菜单;2.内置可关闭菜单;3.用户自定义菜单 */
	 public native @Cast("int8") byte type(); public native ClientMenuSet type(byte type);
	 /* 客户端菜单code 唯一 */
	 public native @StdString  String code(); public native ClientMenuSet code(String code);
	 /* 客户端菜单name JSON格式字符串 {"zh":"zhname","en":"enname"} */
	 public native @StdString  String name(); public native ClientMenuSet name(String name);
	 /* 客户端菜单是否开启 1.是;2.否 */
	 public native @Cast("int8") byte isShow(); public native ClientMenuSet isShow(byte isShow);
	 /* 客户端默认展示页 1.是;2.否 */
	 public native @Cast("int8") byte isDefaultPage(); public native ClientMenuSet isDefaultPage(byte isDefaultPage);
	 /* 是否是原生内置图标 */
	 public native @Cast("int8") byte isOriginIcon(); public native ClientMenuSet isOriginIcon(byte isOriginIcon);
	 /* 客户端默认展示图标 */
	 public native @StdString  String defaultIcon(); public native ClientMenuSet defaultIcon(String defaultIcon);
	 /* 客户端选中展示图标 */
	 public native @StdString  String clickIcon(); public native ClientMenuSet clickIcon(String clickIcon);
	 /* 客户端菜单拓展字段 */
	 public native @StdString  String extend(); public native ClientMenuSet extend(String extend);
	 /* 客户端菜单排序字段 */
	 public native @Cast("int32") int sortId(); public native ClientMenuSet sortId(int sortId);
 }
 @Namespace("model") public static class OutEntNodeInfo extends Pointer {
     static { Loader.load(); }
     /** Default native constructor. */
     public OutEntNodeInfo() { super((Pointer)null); allocate(); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public OutEntNodeInfo(long size) { super((Pointer)null); allocateArray(size); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public OutEntNodeInfo(Pointer p) { super(p); }
     private native void allocate();
     private native void allocateArray(long size);
     @Override public OutEntNodeInfo position(long position) {
         return (OutEntNodeInfo)super.position(position);
     }
 
	/** 节点ID（唯一) */
	public native @StdString  String nodeID(); public native OutEntNodeInfo nodeID(String nodeID);
	/**节点名 */
	public native @StdString  String nodeName(); public native OutEntNodeInfo nodeName(String nodeName);
	/** 企业类型 */
	public native @StdString  String nodeType(); public native OutEntNodeInfo nodeType(String nodeType);
 }

 @Namespace("model") @NoOffset public static class BifactorSt extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public BifactorSt(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public BifactorSt(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public BifactorSt position(long position) {
         return (BifactorSt)super.position(position);
     }
 
	 public BifactorSt() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @Cast("bool") boolean bTips(); public native BifactorSt bTips(boolean bTips);       //是否要弹框
	 public native @Cast("int8") byte nSubType(); public native BifactorSt nSubType(byte nSubType);   //子消息类型
	 public native @Cast("int8") byte nOperater(); public native BifactorSt nOperater(byte nOperater); //用户操作 1同意 2拒绝
	 public native @Cast("int64") long nMessageId(); public native BifactorSt nMessageId(long nMessageId); //消息ID
	 public native @Cast("int64") long nTargetId(); public native BifactorSt nTargetId(long nTargetId);  //目标ID
	 public native @Cast("int64") long nSendLoginTime(); public native BifactorSt nSendLoginTime(long nSendLoginTime);
	 public native @StdString  String szAdminName(); public native BifactorSt szAdminName(String szAdminName); //管理员姓名
 }

 @Namespace("model") public static class ElevatorAuthority extends Pointer {
     static { Loader.load(); }
     /** Default native constructor. */
     public ElevatorAuthority() { super((Pointer)null); allocate(); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public ElevatorAuthority(long size) { super((Pointer)null); allocateArray(size); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public ElevatorAuthority(Pointer p) { super(p); }
     private native void allocate();
     private native void allocateArray(long size);
     @Override public ElevatorAuthority position(long position) {
         return (ElevatorAuthority)super.position(position);
     }
 
	 public native @Cast("int64") long elevatorUserId(); public native ElevatorAuthority elevatorUserId(long elevatorUserId); // 提权人员userId
	 public native @Cast("int64") long superUserId(); public native ElevatorAuthority superUserId(long superUserId);  // 超级用户userId
	 public native @StdString  String authorityCode(); public native ElevatorAuthority authorityCode(String authorityCode); // 权限code/提权记录信息
	 public native @Cast("int64") long createTime(); public native ElevatorAuthority createTime(long createTime); //创建时间
	 public native @Cast("int64") long updateTime(); public native ElevatorAuthority updateTime(long updateTime); //更新时间
 }
 /**应用市场信息 */
 @Namespace("model") @NoOffset public static class MarketAppInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public MarketAppInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public MarketAppInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public MarketAppInfo position(long position) {
         return (MarketAppInfo)super.position(position);
     }
 
	 public MarketAppInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 /**应用ID */
	 public native @Cast("int64") long appID(); public native MarketAppInfo appID(long appID);
	 /** 类型：1(H5应用), 2(IOS应用), 3(Android应用), 4(内部应用), 5(快捷应用) */
	 public native @Cast("int8") byte appType(); public native MarketAppInfo appType(byte appType);
	 /**应用标识 */
	 public native @StdString  String appSign(); public native MarketAppInfo appSign(String appSign);
	 /**应用名称 */
	 public native @StdString  String appName(); public native MarketAppInfo appName(String appName);
	 /**应用图标		 */
	 public native @StdString  String appIcon(); public native MarketAppInfo appIcon(String appIcon);
	 /**应用图标url地址	 */
	 public native @StdString  String appIconUrl(); public native MarketAppInfo appIconUrl(String appIconUrl);
	 /**版本号	 */
	 public native @StdString  String version(); public native MarketAppInfo version(String version);
	 /**包名 */
	 public native @StdString  String packageName(); public native MarketAppInfo packageName(String packageName);
	 /**下载地址 */
	 public native @StdString  String downloadUrl(); public native MarketAppInfo downloadUrl(String downloadUrl);
	 /**activity */
	 public native @StdString  String activityName(); public native MarketAppInfo activityName(String activityName);
	 /**urlScheme */
	 public native @StdString  String urlScheme(); public native MarketAppInfo urlScheme(String urlScheme);
	 /**更新说明 */
	 public native @StdString  String updateExplain(); public native MarketAppInfo updateExplain(String updateExplain);
 }

 @Namespace("model") @NoOffset public static class TokenInfo extends Pointer {
     static { Loader.load(); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public TokenInfo(Pointer p) { super(p); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public TokenInfo(long size) { super((Pointer)null); allocateArray(size); }
     private native void allocateArray(long size);
     @Override public TokenInfo position(long position) {
         return (TokenInfo)super.position(position);
     }
 
	 public TokenInfo() { super((Pointer)null); allocate(); }
	 private native void allocate();
	 public native @StdString  String commonToken(); public native TokenInfo commonToken(String commonToken); //返回的值
	 public native @Cast("int64") long userId(); public native TokenInfo userId(long userId);
	 public native @Cast("int64") long expireTime(); public native TokenInfo expireTime(long expireTime);
 }

 @Namespace("model") public static class CommonTokenRsp extends Pointer {
     static { Loader.load(); }
     /** Default native constructor. */
     public CommonTokenRsp() { super((Pointer)null); allocate(); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public CommonTokenRsp(long size) { super((Pointer)null); allocateArray(size); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public CommonTokenRsp(Pointer p) { super(p); }
     private native void allocate();
     private native void allocateArray(long size);
     @Override public CommonTokenRsp position(long position) {
         return (CommonTokenRsp)super.position(position);
     }
 
	 public native @StdString  String message(); public native CommonTokenRsp message(String message);//返回码描述
	 public native @ByRef TokenInfo commonTokenInfo(); public native CommonTokenRsp commonTokenInfo(TokenInfo commonTokenInfo); //返回结果结构体
 }

 /*namespace service*/


// Parsed from model/SDKTypes.h

// #pragma once


// #if _WIN32 != 1 || _MSC_VER >= 1600
// #include <memory>
// #include <functional>

// #define SSharedPtr std::shared_ptr
// #define SFunction std::function
// #define SNull nullptr

// #else
// #include "boost/shared_ptr.hpp"
// #include "boost/function.hpp"

// #define SSharedPtr boost::shared_ptr
// #define SFunction boost::function
// #define SNull NULL

// #endif

public static final int SERVICENAMEMAXLEN = 300;    /**service 个人，好友，群成员，群信息长度最大长度限制 */
// #ifdef  _WIN32
// #elif  defined(__linux__)
// #include <stdint.h>
// #elif  defined(__APPLE__)
// #include <stdint.h>
// #endif


// Parsed from model/SysMsg.h

// #pragma once
// #include "SDKTypes.h"
// #include<string>
/**系统消息类型 */
/** enum model::SysOperType */
public static final int
	//eSysIgnore = 1,	///<忽略
	/**同意 */
	eSysAgree = 0,
	/**拒绝 */
	eSysRefuse = 1;
	//eSysRefuseForever,	///<拒绝并不允许再次请求
/**系统消息 */
@Namespace("model") @NoOffset public static class SysMsg extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SysMsg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SysMsg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SysMsg position(long position) {
        return (SysMsg)super.position(position);
    }

	public SysMsg() { super((Pointer)null); allocate(); }
	private native void allocate();
	/**消息ID */
	public native @Cast("int64") long msgId(); public native SysMsg msgId(long msgId);
	/**用户ID */
	public native @Cast("int64") long userId(); public native SysMsg userId(long userId);
	/**群ID 群相关消息有值 */
	public native @Cast("int64") long groupId(); public native SysMsg groupId(long groupId);
	/**时间 */
	public native @Cast("int64") long time(); public native SysMsg time(long time);
	/**消息类型 */
	public native int msgType(); public native SysMsg msgType(int msgType);
	/**是否回应 */
	public native int isResponse(); public native SysMsg isResponse(int isResponse);
	/**是否已读 */
	public native int isRead(); public native SysMsg isRead(int isRead);
	/**活动类型 */
	public native int operType(); public native SysMsg operType(int operType);
	/**子操作类型标示,  msgType=1时 1:添加好友,2:关注   msgType=3	时 1:邀请, 2:申请加入 */
	public native int subType(); public native SysMsg subType(int subType);
	/**用户名称 */
	public native @StdString  String userName(); public native SysMsg userName(String userName);
	/**群名称 群相关消息有值 */
	public native @StdString  String groupName(); public native SysMsg groupName(String groupName);
	/**消息来源头像 */
	public native @StdString  String avatar(); public native SysMsg avatar(String avatar);
	/**消息内容 */
	public native @StdString  String info(); public native SysMsg info(String info);
	public native int securityLevel(); public native SysMsg securityLevel(int securityLevel);
}

/**
* \brief #msgType=1	 * 1:　添加好友，２：关注
* #
*/


// Parsed from model/TinyGroup.h

// #pragma once
// #include "Optional.h"
// #include "SDKTypes.h"
// #include <string>
/**群组信息 */
@Namespace("model") @NoOffset public static class TinyGroup extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TinyGroup(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TinyGroup(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TinyGroup position(long position) {
        return (TinyGroup)super.position(position);
    }

	public TinyGroup() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native void init();

	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef TinyGroup rhs);
	/**群等级（1,2,3,4)1是临时群，2是普通群 */
	public native @ByRef OptionalInt level(); public native TinyGroup level(OptionalInt level);
	/**是否允许退群 */
	public native @ByRef OptionalBool cantExit(); public native TinyGroup cantExit(OptionalBool cantExit);
	/**是否为v标群 */
	public native @ByRef OptionalBool isVSign(); public native TinyGroup isVSign(OptionalBool isVSign);
	/**是否置顶 */
	public native @ByRef OptionalBool isTop(); public native TinyGroup isTop(OptionalBool isTop);
	/**是否是隐藏群 */
	public native @ByRef OptionalBool isHidden(); public native TinyGroup isHidden(OptionalBool isHidden);
	/**创建者ID */
	public native @ByRef OptionalLong createrId(); public native TinyGroup createrId(OptionalLong createrId);
	/**群ID */
	public native @ByRef OptionalLong groupId(); public native TinyGroup groupId(OptionalLong groupId);
	/**群名 */
	public native @ByRef OptionalString groupName(); public native TinyGroup groupName(OptionalString groupName);
	/**群头像 */
	public native @ByRef OptionalString avatar(); public native TinyGroup avatar(OptionalString avatar);
	/**群头像url */
	public native @ByRef OptionalString avatarUrl(); public native TinyGroup avatarUrl(OptionalString avatarUrl);
	/**名称拼音 */
	public native @ByRef OptionalString pinyin(); public native TinyGroup pinyin(OptionalString pinyin);
	/**服务器 */
	public native @ByRef OptionalString server(); public native TinyGroup server(OptionalString server);
	/**群分类 */
	public native @ByRef OptionalString groupType(); public native TinyGroup groupType(OptionalString groupType);
	/**群密级 */
	public native @ByRef OptionalInt securityLevel(); public native TinyGroup securityLevel(OptionalInt securityLevel);
	/**提权开关 */
	public native @ByRef OptionalByte powerSwitch(); public native TinyGroup powerSwitch(OptionalByte powerSwitch);
	/**是否为外服群（4 外服群） */
	public native @ByRef OptionalInt status(); public native TinyGroup status(OptionalInt status);
}

 /*namespace service*/


// Parsed from model/User.h

// #pragma once

//#include "SDKTypes.h"
//#include "Optional.h"
//#include <string>
// #include "../extModel/packet.h"
/**用户信息 */
@Namespace("model") @NoOffset public static class User extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public User(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public User(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public User position(long position) {
        return (User)super.position(position);
    }

	public User() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native void init();


	public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef User rhs);
	public native @ByRef OptionalInt securityLevel(); public native User securityLevel(OptionalInt securityLevel);			/**密信等级 */
	/**性别:1男2女0保密 */
	public native @ByRef OptionalInt gender(); public native User gender(OptionalInt gender);
	/**时区 */
	public native @ByRef OptionalInt timeZone(); public native User timeZone(OptionalInt timeZone);
	/**id */
	public native @ByRef OptionalLong id(); public native User id(OptionalLong id);
	/**名称 */
	public native @ByRef OptionalString name(); public native User name(OptionalString name);
	/**原图图像 */
	public native @ByRef OptionalString avatar(); public native User avatar(OptionalString avatar);
	/**扩展字段 */
	public native @ByRef @Name("extends") OptionalString _extends(); public native User _extends(OptionalString _extends);
	/**企业扩展信息 */
	public native @ByRef OptionalString entExtends(); public native User entExtends(OptionalString entExtends);
	/**组织结构id,多个用逗号分隔 */
	public native @ByRef OptionalString orgIds(); public native User orgIds(OptionalString orgIds);
	/**缩略图 */
	public native @ByRef OptionalString thumbAvatar(); public native User thumbAvatar(OptionalString thumbAvatar);
	/**原图url */
	public native @ByRef OptionalString avatarUrl(); public native User avatarUrl(OptionalString avatarUrl);
	/**缩略图url */
	public native @ByRef OptionalString thumbAvatarUrl(); public native User thumbAvatarUrl(OptionalString thumbAvatarUrl);
	public native @ByRef OptionaOrganizationInfoVector orgList(); public native User orgList(OptionaOrganizationInfoVector orgList);    /**组织信息，只有searchFromNet接口和getUserInfoByScene接口返回才会带此数据 */
	public native @ByRef OptionalInt status(); public native User status(OptionalInt status);                 /** 是否是本服务人员，外服为4 */

	/**用户标签id,多个用逗号分隔 */
	public native @ByRef OptionalString tagIds(); public native User tagIds(OptionalString tagIds);
}


 /*namespace model*/


}
